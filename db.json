{"meta":{"version":1,"warehouse":"3.0.1"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/cactus/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/cactus/source/css/rtl.styl","path":"css/rtl.styl","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/Photo_0411_1a.jpg","path":"images/Photo_0411_1a.jpg","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/favicon-192x192.png","path":"images/favicon-192x192.png","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/apple-touch-icon.png","path":"images/apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/cactus/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/cactus/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/FiraCode_2/fira_code.css","path":"lib/FiraCode_2/fira_code.css","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/FiraCode_2/HowToInstall.txt","path":"lib/FiraCode_2/HowToInstall.txt","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/FiraCode_2/specimen.html","path":"lib/FiraCode_2/specimen.html","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/FiraCode_2/fira_code.styl","path":"lib/FiraCode_2/fira_code.styl","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/clipboard/clipboard.min.js","path":"lib/clipboard/clipboard.min.js","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff","path":"lib/vazir-font/Vazir-Black.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff2","path":"lib/vazir-font/Vazir-Black.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff","path":"lib/vazir-font/Vazir-Bold.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff2","path":"lib/vazir-font/Vazir-Bold.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff","path":"lib/vazir-font/Vazir-Light.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff2","path":"lib/vazir-font/Vazir-Light.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff","path":"lib/vazir-font/Vazir-Medium.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff2","path":"lib/vazir-font/Vazir-Medium.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff","path":"lib/vazir-font/Vazir-Thin.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff2","path":"lib/vazir-font/Vazir-Thin.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff","path":"lib/vazir-font/Vazir.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/font-face.css","path":"lib/vazir-font/font-face.css","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff2","path":"lib/vazir-font/Vazir.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.ttf","path":"lib/vazir-font/Vazir-Black.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.eot","path":"lib/vazir-font/Vazir-Black.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/jquery/jquery.min.js","path":"lib/jquery/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.ttf","path":"lib/vazir-font/Vazir-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.eot","path":"lib/vazir-font/Vazir-Bold.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.ttf","path":"lib/vazir-font/Vazir-Light.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.eot","path":"lib/vazir-font/Vazir-Light.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.eot","path":"lib/vazir-font/Vazir-Medium.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.ttf","path":"lib/vazir-font/Vazir-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.eot","path":"lib/vazir-font/Vazir-Thin.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.ttf","path":"lib/vazir-font/Vazir-Thin.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.eot","path":"lib/vazir-font/Vazir.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.ttf","path":"lib/vazir-font/Vazir.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.eot","path":"lib/font-awesome/webfonts/fa-regular-400.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.ttf","path":"lib/font-awesome/webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff","path":"lib/font-awesome/webfonts/fa-regular-400.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/justified-gallery/css/justifiedGallery.min.css","path":"lib/justified-gallery/css/justifiedGallery.min.css","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/justified-gallery/js/jquery.justifiedGallery.min.js","path":"lib/justified-gallery/js/jquery.justifiedGallery.min.js","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/FiraCode_2/woff/FiraCode-VF.woff","path":"lib/FiraCode_2/woff/FiraCode-VF.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/FiraCode_2/woff2/FiraCode-Bold.woff2","path":"lib/FiraCode_2/woff2/FiraCode-Bold.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/FiraCode_2/woff2/FiraCode-Light.woff2","path":"lib/FiraCode_2/woff2/FiraCode-Light.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/FiraCode_2/woff2/FiraCode-Medium.woff2","path":"lib/FiraCode_2/woff2/FiraCode-Medium.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/FiraCode_2/woff2/FiraCode-Retina.woff2","path":"lib/FiraCode_2/woff2/FiraCode-Retina.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/FiraCode_2/woff2/FiraCode-VF.woff2","path":"lib/FiraCode_2/woff2/FiraCode-VF.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/FiraCode_2/woff2/FiraCode-Regular.woff2","path":"lib/FiraCode_2/woff2/FiraCode-Regular.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.eot","path":"lib/font-awesome/webfonts/fa-brands-400.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.ttf","path":"lib/font-awesome/webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff","path":"lib/font-awesome/webfonts/fa-brands-400.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff","path":"lib/font-awesome/webfonts/fa-solid-900.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/FiraCode_2/woff/FiraCode-Light.woff","path":"lib/FiraCode_2/woff/FiraCode-Light.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/FiraCode_2/woff/FiraCode-Bold.woff","path":"lib/FiraCode_2/woff/FiraCode-Bold.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/FiraCode_2/woff/FiraCode-Medium.woff","path":"lib/FiraCode_2/woff/FiraCode-Medium.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/FiraCode_2/woff/FiraCode-Regular.woff","path":"lib/FiraCode_2/woff/FiraCode-Regular.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/FiraCode_2/woff/FiraCode-Retina.woff","path":"lib/FiraCode_2/woff/FiraCode-Retina.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.svg","path":"lib/font-awesome/webfonts/fa-regular-400.svg","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.eot","path":"lib/font-awesome/webfonts/fa-solid-900.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.ttf","path":"lib/font-awesome/webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/FiraCode_2/otf/FiraCode-Medium.otf","path":"lib/FiraCode_2/otf/FiraCode-Medium.otf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/FiraCode_2/otf/FiraCode-Bold.otf","path":"lib/FiraCode_2/otf/FiraCode-Bold.otf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/FiraCode_2/otf/FiraCode-Light.otf","path":"lib/FiraCode_2/otf/FiraCode-Light.otf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/FiraCode_2/otf/FiraCode-Regular.otf","path":"lib/FiraCode_2/otf/FiraCode-Regular.otf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/FiraCode_2/otf/FiraCode-Retina.otf","path":"lib/FiraCode_2/otf/FiraCode-Retina.otf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/FiraCode_2/ttf/FiraCode-Bold.ttf","path":"lib/FiraCode_2/ttf/FiraCode-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/FiraCode_2/ttf/FiraCode-Regular.ttf","path":"lib/FiraCode_2/ttf/FiraCode-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/FiraCode_2/ttf/FiraCode-Medium.ttf","path":"lib/FiraCode_2/ttf/FiraCode-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/FiraCode_2/ttf/FiraCode-Light.ttf","path":"lib/FiraCode_2/ttf/FiraCode-Light.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/FiraCode_2/ttf/FiraCode-Retina.ttf","path":"lib/FiraCode_2/ttf/FiraCode-Retina.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/FiraCode_2/variable_ttf/FiraCode-VF.ttf","path":"lib/FiraCode_2/variable_ttf/FiraCode-VF.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.svg","path":"lib/font-awesome/webfonts/fa-brands-400.svg","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.svg","path":"lib/font-awesome/webfonts/fa-solid-900.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/cactus/.gitignore","hash":"c5345a2c5fa6c136dbe2020a405e541b4755a259","modified":1608482215010},{"_id":"themes/cactus/LICENSE","hash":"346ece39a983b0e7858c11f785cd846cef9eb875","modified":1608482215011},{"_id":"themes/cactus/.stylintrc","hash":"eb5f48e83657928cb0cbee031373b2cd36ca0083","modified":1608482215011},{"_id":"themes/cactus/.jshintrc","hash":"2548bd6ce44422edc7e6f9f68061ab47f26c4f57","modified":1608482215011},{"_id":"themes/cactus/README.md","hash":"1432553fdb0921011dc349bfb7a892d7fe7c67c6","modified":1608482215011},{"_id":"themes/cactus/gulpfile.js","hash":"2bae290993507026a509665ee5a5326b616f8d68","modified":1608482215011},{"_id":"themes/cactus/_config.yml","hash":"5bd43b8a1ca29f0abab7f471010355ffbed66bc0","modified":1608482215011},{"_id":"themes/cactus/package.json","hash":"5bbdbc429e9d46acf97baf7ac5654edde0781064","modified":1608482215018},{"_id":"source/.DS_Store","hash":"de7610198cf7092db814e46d17b75d0c87cdc7cd","modified":1627649490140},{"_id":"source/CNAME","hash":"a33c3017abe841a5c4a03c2f7654208a0d1683b8","modified":1608482215006},{"_id":"themes/cactus/languages/ca.yml","hash":"b79dd2c21dc6697c635e92db1f661a4b8d5d2305","modified":1608482215012},{"_id":"themes/cactus/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1608482215012},{"_id":"themes/cactus/languages/en.yml","hash":"1fd51a71cceab996a7710b45cf34a117a961cbd2","modified":1608482215012},{"_id":"themes/cactus/languages/es.yml","hash":"2b1fc8b0d636123e9ee39017fa20053bd1913a5a","modified":1608482215012},{"_id":"themes/cactus/languages/fa.yml","hash":"63f32e50953af1c4bd0308a4fca5862b5287c2cb","modified":1608482215012},{"_id":"themes/cactus/languages/nl.yml","hash":"ac0573352ad2c737a7686bcca498b985e7bd6447","modified":1608482215013},{"_id":"themes/cactus/languages/it.yml","hash":"62800bcae1f2d2454f87f4bcf4d7593848424f61","modified":1608482215013},{"_id":"themes/cactus/languages/fr.yml","hash":"4fea266d3c522903f3eee4fffee6e66c44775005","modified":1608482215013},{"_id":"themes/cactus/languages/pl.yml","hash":"8a2d6dc874d86c38d42c2c861c39590647b5d536","modified":1608482215013},{"_id":"themes/cactus/languages/ru.yml","hash":"81b57fcd1977ef534f4bf303dbc1b4710cc7f057","modified":1608482215013},{"_id":"themes/cactus/languages/pt-br.yml","hash":"4859aba788a050c2d5d0b997693b0c8c24b349f7","modified":1608482215013},{"_id":"themes/cactus/languages/vi.yml","hash":"f84893c3ec3e45875c90069e14b17ed3016ed973","modified":1608482215014},{"_id":"themes/cactus/languages/tr.yml","hash":"2702914007e6bade9d6861078c0e179ac05bf48c","modified":1608482215013},{"_id":"themes/cactus/languages/zh-TW.yml","hash":"2f4e050c9b35a67f4a7278cec3a949533c2ac16a","modified":1608482215014},{"_id":"themes/cactus/languages/zh-CN.yml","hash":"4008d507168fd322b91deeac0452fa243c34a30b","modified":1608482215014},{"_id":"themes/cactus/layout/archive.ejs","hash":"53de8817e37be01b3ba8fa5ca31b9cafa2f3c011","modified":1608482215017},{"_id":"themes/cactus/layout/index.ejs","hash":"40bc671caf494d4633b81c25e08aa184ea503746","modified":1608482215018},{"_id":"themes/cactus/layout/layout.ejs","hash":"8504004f2ed78914f806c6699d9bd722318cbe56","modified":1608482215018},{"_id":"themes/cactus/scripts/merge-configs.js","hash":"28a76ad9ce4358b164436573a4980dce4df3003d","modified":1627204700702},{"_id":"themes/cactus/layout/post.ejs","hash":"ba00c1b91795a442323249efeeaf32d1d281b3dd","modified":1608482215018},{"_id":"themes/cactus/layout/page.ejs","hash":"c5465d5315a7544aa466b01fd8cfb62917a8bb1d","modified":1608482215018},{"_id":"themes/cactus/scripts/meta.js","hash":"fa6055a39851c9953d033e70c1614547b94dce60","modified":1608482215019},{"_id":"themes/cactus/scripts/page_title.js","hash":"fa662dbdb82779af1b95e35ed7ccdf4866a53dee","modified":1608482215019},{"_id":"themes/cactus/scripts/thumbnail.js","hash":"df8829fd8c3119650037eba5ec11bdce06acff9d","modified":1608482215019},{"_id":"source/_data/projects.json","hash":"c0ce78c3296bf9f0fc0f94de770603e35ffc0d90","modified":1608482215006},{"_id":"source/_posts/centos7-nginx.md","hash":"46b49d56da23b743be6a3508bbbd484a5a696c4c","modified":1608482215007},{"_id":"source/_posts/buildGitPages-1.md","hash":"3aa65b26ca1c77704751b00b1969efcf7eaace84","modified":1608482215006},{"_id":"source/_posts/centos7-setting.md","hash":"1934488198da3a97038c0ce7d16c7c181e3f156a","modified":1608482215007},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1627649457761},{"_id":"source/_posts/domainSetting.md","hash":"c81ad664514b7ba47aa030b482ec9eae12aa4ad4","modified":1608482215007},{"_id":"source/_posts/freshman.md","hash":"40d8dde729aa2342e3dc0e7dda7c52c146638083","modified":1608482215007},{"_id":"source/_posts/es6-variables.md","hash":"a26ea86ff951a5ede1f0d914bbff9f98efc43a60","modified":1608482215007},{"_id":"source/_posts/google-camera.md","hash":"5817db8aa3a0ed0ced9e12124e1196b4e61515a8","modified":1608482215008},{"_id":"source/_posts/gitDebug.md","hash":"02a96698fdfdd5d58cf2f169aa012863f1d72744","modified":1608482215007},{"_id":"source/_posts/git-hooks.md","hash":"36d3da32efbd449468d4153902d16e633dc1e4ab","modified":1608482215007},{"_id":"source/_posts/hexo-instruction.md","hash":"48d936fc1982b826ebb45998a8a51857cbc4260e","modified":1608482215008},{"_id":"source/_posts/green-book.md","hash":"6d68ef1d1709933a006e70a1ed946aaa82b52d58","modified":1608482215008},{"_id":"source/_posts/graduate.md","hash":"2dc9a9c4f21192812b98cfed09cdbf24c8c487e8","modified":1608482215008},{"_id":"source/_posts/js-intSum.md","hash":"43d060e4306b87a7a26a9b027bc1a75c624757be","modified":1608482215008},{"_id":"source/_posts/learn-react.md","hash":"bb3b9e0ac6bc48b316784ec8fc84cfa82911323c","modified":1608482215009},{"_id":"source/_posts/js-operation.md","hash":"63bc85072e01648471f5128db44be9eff13d9ca1","modified":1608482215009},{"_id":"source/_posts/markdown-instruction.md","hash":"0769c25f54643de3a0f63a5cba72d00f2f0bc057","modified":1608482215009},{"_id":"source/_posts/npm-setting.md","hash":"0ac56d446536f06b86b3d024c37899491a2798ba","modified":1608482215009},{"_id":"source/_posts/nginx-https.md","hash":"77f9d06092ebf17ef4371417be7fd38c8fb75b29","modified":1608482215009},{"_id":"source/_posts/myNewBlog.md","hash":"0f3200928ad367cbac7d231d8e9b9b1bd29d9836","modified":1608482215009},{"_id":"source/_posts/picgo-qiniuyun.md","hash":"520de1b0bcf5c630166d631b3d9d7a8aa8fa3501","modified":1608482215010},{"_id":"source/about/index.md","hash":"38019f9ef5d623b72bc99bf643e9c65334611f17","modified":1608482215010},{"_id":"source/tags/index.md","hash":"a83246c53b9597b5f58cade07e79f5cda65f8b9a","modified":1608482215010},{"_id":"themes/cactus/layout/_partial/pagination.ejs","hash":"23bf862b3b8a3cd831850504d9b5a24d21b005e7","modified":1608482215015},{"_id":"themes/cactus/layout/_partial/header.ejs","hash":"6b534801486f6baa989bd351915a9156b838b777","modified":1608482215015},{"_id":"themes/cactus/layout/_partial/footer.ejs","hash":"a4ad205d066076bed07f81660cc71ad48aa38378","modified":1608482215014},{"_id":"themes/cactus/layout/_partial/head.ejs","hash":"9f3b1439aba3f4d90ca654e5260d246002f2387a","modified":1608482215014},{"_id":"themes/cactus/layout/_partial/scripts.ejs","hash":"fd324a60555ff615352e8591b1eb04a7e7b5af80","modified":1608482215017},{"_id":"themes/cactus/layout/_partial/styles.ejs","hash":"be1b54388eb02176dd4722285dda19e3dce2e62e","modified":1608482215017},{"_id":"themes/cactus/layout/_partial/search.ejs","hash":"8b4bf9cf5db0ce762a31fc3baae0f2fc004bece4","modified":1608482215017},{"_id":"themes/cactus/source/css/_extend.styl","hash":"2c8751d132e62f5f068dc3a184d160670737ba1f","modified":1608482215020},{"_id":"themes/cactus/source/css/_mixins.styl","hash":"1a9e309523df9685e8d088dcff0a809c58e2c392","modified":1608482215024},{"_id":"themes/cactus/source/css/_util.styl","hash":"2bfeb2e2605dd5235693b00c71a212646d2e0410","modified":1608482215027},{"_id":"themes/cactus/source/css/_variables.styl","hash":"fb010f2819ff1d18ea7897e01315dcffc3579e64","modified":1608482215027},{"_id":"themes/cactus/source/css/style.styl","hash":"423a1746b7daf0a2a9348ba64af2b548ee1e98a8","modified":1608482215028},{"_id":"themes/cactus/source/css/rtl.styl","hash":"98355abe9ef3a398a5b4cb40d3d33bf86ac8d1d4","modified":1608482215027},{"_id":"themes/cactus/source/images/Photo_0411_1a.jpg","hash":"a6f38f90b4048fa7a6705de3f6763b9248c9166f","modified":1608482215028},{"_id":"themes/cactus/source/images/favicon-192x192.png","hash":"a6f38f90b4048fa7a6705de3f6763b9248c9166f","modified":1608482215029},{"_id":"themes/cactus/source/images/apple-touch-icon.png","hash":"a6f38f90b4048fa7a6705de3f6763b9248c9166f","modified":1608482215028},{"_id":"themes/cactus/source/js/search.js","hash":"a74d0c601f820160825a2e4ad13618074d714933","modified":1608482215031},{"_id":"themes/cactus/source/images/favicon.ico","hash":"a6f38f90b4048fa7a6705de3f6763b9248c9166f","modified":1608482215029},{"_id":"themes/cactus/source/js/main.js","hash":"584c5a69ac81a483a1c4377a2e2cf326c2795e7b","modified":1608482215031},{"_id":"themes/cactus/layout/_partial/post/actions_desktop.ejs","hash":"38aadd1ed890303dde582b722486138afee09b0a","modified":1608482215015},{"_id":"themes/cactus/layout/_partial/post/actions_mobile.ejs","hash":"79b234ff3c264e66b2e71c819228e62bf92b48e4","modified":1608482215015},{"_id":"themes/cactus/layout/_partial/post/category.ejs","hash":"b5bfa049f17868fb09d9d2a7e1d5279fa0381d37","modified":1608482215016},{"_id":"themes/cactus/layout/_partial/post/share.ejs","hash":"847a400e79b775246ca9067e40c3f104d571413d","modified":1608482215016},{"_id":"themes/cactus/layout/_partial/post/gallery.ejs","hash":"9aecd8908e8a684f33dc20c02497c0f1774137c7","modified":1608482215016},{"_id":"themes/cactus/layout/_partial/post/date.ejs","hash":"6f2d1aa9562df343b797d25705f1945323c465fb","modified":1608482215016},{"_id":"themes/cactus/layout/_partial/post/tag.ejs","hash":"e08fae30da060f49c087f6c121868b08eb55c795","modified":1608482215016},{"_id":"themes/cactus/layout/_partial/post/title.ejs","hash":"a060f1c6e3718494a6b1d0e1981ea0bf4e549828","modified":1608482215017},{"_id":"themes/cactus/source/css/_colors/white.styl","hash":"2b25ad24573bded8b42f9d80112eab9fadbed1a5","modified":1608482215020},{"_id":"themes/cactus/source/css/_colors/light.styl","hash":"d09f781cb02394850737b3a9efc6693307d5bf09","modified":1608482215020},{"_id":"themes/cactus/source/css/_colors/classic.styl","hash":"0f0ec41a4165814ce69688425d5ac4d701b7cc70","modified":1608482215020},{"_id":"themes/cactus/source/css/_colors/dark.styl","hash":"9c9655b42b85f754b8a573a1d4634c23c680e1bf","modified":1608482215020},{"_id":"themes/cactus/source/css/_highlight/atelier-forest-dark.styl","hash":"effbc5d75fa87203c847039869c22031b40d5b7d","modified":1608482215021},{"_id":"themes/cactus/source/css/_highlight/atelier-cave-dark.styl","hash":"ce63dd8548688d88254405eedfa75b1d7c82449e","modified":1608482215021},{"_id":"themes/cactus/source/css/_highlight/atelier-heath-dark.styl","hash":"9a2e9a1d0a01bbdf158560c3ed1c134e098b2c68","modified":1608482215021},{"_id":"themes/cactus/source/css/_highlight/atelier-estuary-dark.styl","hash":"0bb16a4eff93688f40787abc2f9e56e7d5cc93e7","modified":1608482215021},{"_id":"themes/cactus/source/css/_highlight/atelier-plateau-dark.styl","hash":"84c80e6f67f62fce958d25817c277d2360272617","modified":1608482215022},{"_id":"themes/cactus/source/css/_highlight/atelier-lakeside-dark.styl","hash":"10ee3882fca7b97a37bd309d2d35fce9868647bb","modified":1608482215022},{"_id":"themes/cactus/source/css/_highlight/atelier-savanna-dark.styl","hash":"e32c1c70def8060fce5e790979a126da650ac642","modified":1608482215022},{"_id":"themes/cactus/source/css/_highlight/atelier-seaside-dark.styl","hash":"2edf385215bbe1985b1a10106525d362667d28c2","modified":1608482215022},{"_id":"themes/cactus/source/css/_highlight/gruvbox-dark.styl","hash":"76b744c14fd5600bea64731c05df97c2df75523f","modified":1608482215022},{"_id":"themes/cactus/source/css/_highlight/kimbie.dark.styl","hash":"45dbb168f22d739d0109745d2decd66b5f94e786","modified":1608482215023},{"_id":"themes/cactus/source/css/_highlight/paraiso-dark.styl","hash":"f1537bd868579fa018ecdbfd2eb922dcf3ba2cac","modified":1608482215023},{"_id":"themes/cactus/source/css/_highlight/solarized-dark.styl","hash":"90c9da5aa594383697e5b18892a7f95beb053f55","modified":1608482215023},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-eighties.styl","hash":"28d751075ebabf7d0327a36f725076fe82fdf626","modified":1608482215023},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night.styl","hash":"16ba09b2db501e4e3e2e7d62595d9bf935bf27c4","modified":1608482215024},{"_id":"themes/cactus/source/css/_partial/archive.styl","hash":"ef8fc52337c4c7b010cad7c427cb78009b30f9d8","modified":1608482215024},{"_id":"themes/cactus/source/css/_partial/article.styl","hash":"c6a3c395ceb4aacba8c995bcde7b58a7ca501919","modified":1608482215024},{"_id":"themes/cactus/source/css/_partial/comments.styl","hash":"1e90f1fb9d4c155df518cacb5a537e9de9c042c1","modified":1608482215025},{"_id":"themes/cactus/source/css/_partial/categories.styl","hash":"a43f00e61b3507f130b8a3f8108a4eeca147c2a0","modified":1608482215025},{"_id":"themes/cactus/source/css/_partial/footer.styl","hash":"ba2ce834f165302f7ff9bdae8ede86579070dfab","modified":1608482215025},{"_id":"themes/cactus/source/css/_partial/header.styl","hash":"375064473672da41c95bfa1ab3699591eeabf107","modified":1608482215025},{"_id":"themes/cactus/source/css/_partial/index.styl","hash":"59c99f4ea3a73bf47ce030df166c5e33d5de31fb","modified":1608482215025},{"_id":"themes/cactus/source/css/_partial/pagination.styl","hash":"950bf517bbe7adb9a9aa4eb5ddec74ffc7598787","modified":1608482215026},{"_id":"themes/cactus/source/css/_partial/search.styl","hash":"159be002780c62a77f46947cf854a7342fba24f4","modified":1608482215026},{"_id":"themes/cactus/source/css/_partial/tags.styl","hash":"d571d5c7c960300d29c5f0ec3fe1140322ecd6b3","modified":1608482215027},{"_id":"themes/cactus/source/css/_partial/tooltip.styl","hash":"2daff581ec3efaec840cbfdee512195919c32629","modified":1608482215027},{"_id":"themes/cactus/source/lib/FiraCode_2/fira_code.css","hash":"1fd88ed4940d93c1aa6ae3e9f8dcfdb67fd9c8c8","modified":1608482215032},{"_id":"themes/cactus/source/lib/FiraCode_2/HowToInstall.txt","hash":"b979d2e37d6135db230740d5754ddbb47784d200","modified":1608482215032},{"_id":"themes/cactus/source/lib/FiraCode_2/specimen.html","hash":"a4a2d9d021d3c7edb106a86e95cf69bf029a8a4b","modified":1608482215041},{"_id":"themes/cactus/source/lib/FiraCode_2/fira_code.styl","hash":"a366a8a480a62199e8c990a362fda2fda6aabb31","modified":1608482215032},{"_id":"themes/cactus/source/lib/clipboard/clipboard.min.js","hash":"ee60ca5ba9401456105ef703a98092369b579c80","modified":1608482215066},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff","hash":"37443d0040f0d7af381c955e4c15919a15d0349e","modified":1608482215116},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff2","hash":"0a257c8b60e0f20802c1dc8daeed2d3cb0d44f17","modified":1608482215117},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff","hash":"df15fd1e74b6f4a50bea57e2b44d9627f38495b5","modified":1608482215119},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff2","hash":"62447a951d48b21c4696ae72df4bc4adef636e26","modified":1608482215120},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff","hash":"32ae5c0d1d5943c8bb8e0f6ab07c3269c6f8b8a8","modified":1608482215123},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff2","hash":"ef07a250766fea840c1049e67c0405d9216ee0a8","modified":1608482215123},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff","hash":"f5653059b2a5929516e4aab02329a978600b9b67","modified":1608482215140},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff2","hash":"668400ae92700965f03f2371faaee0ab8c8347c3","modified":1608482215140},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff","hash":"ad4d46a99a1daf6353c86c79ac3a2b030213859c","modified":1608482215143},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff2","hash":"c3be79b553ec394db71268d604b1d29183b867dc","modified":1608482215144},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff","hash":"bbee70033f0f5882e9869e417b69c6a38f56f187","modified":1608482215146},{"_id":"themes/cactus/source/lib/vazir-font/font-face.css","hash":"8f2bf6b59ae1f2ed4c2fead6cea4b8314fcf62e5","modified":1608482215151},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff2","hash":"30ce165216db078951a690a6ad665b9b78f5dd81","modified":1608482215151},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.ttf","hash":"594dc3344ad14903c247615427d1009709f0f5a4","modified":1608482215116},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.eot","hash":"13d026ff857c853cbd0dc519b6e58669db309441","modified":1608482215115},{"_id":"themes/cactus/source/lib/jquery/jquery.min.js","hash":"0dc32db4aa9c5f03f3b38c47d883dbd4fed13aae","modified":1608482215109},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.ttf","hash":"2e6c9df9f775373fb1988ae8529aa8f05313dae6","modified":1608482215119},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.eot","hash":"f76ec625e15522ff60d21f7a9a3b71c65bc27556","modified":1608482215118},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.ttf","hash":"9f1e2934098a6a4a7c5584c8f3fa24a707070da3","modified":1608482215122},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.eot","hash":"3edffd7bb61eee8cd46b57225f9f9e5264e3362b","modified":1608482215121},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.eot","hash":"1f5a73db7947ef22c8a2bb19d6449b80496c03c4","modified":1608482215137},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.ttf","hash":"295f7e02c9b157e7ea63ad09613b00ceab85c5cd","modified":1608482215139},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.eot","hash":"08e1503d1181188690fd9c81860d6c890c1465f6","modified":1608482215141},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.ttf","hash":"a6aa450ee6e0f85786474ca6b04827ef97e81af4","modified":1608482215142},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.eot","hash":"31a9219c25fe1991fb745ec8dbbcf45c6094a702","modified":1608482215145},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.ttf","hash":"f22b219824026e490a581ddb3b36b07997dff0e3","modified":1608482215146},{"_id":"themes/cactus/source/css/_partial/post/actions_desktop.styl","hash":"d4bdb90c9f8cea367b1b14fe2ecf5afb2f05fabb","modified":1608482215026},{"_id":"themes/cactus/source/css/_partial/post/actions_mobile.styl","hash":"0d2966c1d870392476864af8ee3ba312ba30cb82","modified":1608482215026},{"_id":"themes/cactus/source/lib/font-awesome/css/all.min.css","hash":"cf1a3fd771900af34f2af22142beecfb47367548","modified":1608482215067},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.eot","hash":"42ff503f20e97503cef8e5b2ec10ae07699d7c01","modified":1608482215084},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"d902f8db3e021155f177f698a252fb98d6e61768","modified":1608482215083},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.ttf","hash":"c140085833a38abec6b7df99d4ccac93eb266031","modified":1608482215086},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff","hash":"7b3f44b4d3028f3c87ddf0f4bd62511c9bf4a87e","modified":1608482215086},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"9784edb76f8a2ed595ea4bf74d46cda4eff3b303","modified":1608482215087},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"92da6e3c7121e21cdfde25ef08797a3937a683e1","modified":1608482215108},{"_id":"themes/cactus/source/lib/justified-gallery/css/justifiedGallery.min.css","hash":"92bb6e468a1db7fbd99ccb960e15e28572254263","modified":1608482215110},{"_id":"themes/cactus/source/lib/justified-gallery/js/jquery.justifiedGallery.min.js","hash":"82ab395176c927ffbb2f7c95132ee0a06cd5d64a","modified":1608482215110},{"_id":"themes/cactus/source/lib/FiraCode_2/woff/FiraCode-VF.woff","hash":"3cbefefacd47dc2e6065e78a4c958bdfbc2b3cdc","modified":1608482215062},{"_id":"themes/cactus/source/lib/FiraCode_2/woff2/FiraCode-Bold.woff2","hash":"257c05782024b86466aa7415f9bac904b412d117","modified":1608482215063},{"_id":"themes/cactus/source/lib/FiraCode_2/woff2/FiraCode-Light.woff2","hash":"67ea0bce4410dd2f0f61f0e57f8c4728ca3bf3d6","modified":1608482215063},{"_id":"themes/cactus/source/lib/FiraCode_2/woff2/FiraCode-Medium.woff2","hash":"5c5249db73659ac57006279ca90f2debe44dc537","modified":1608482215064},{"_id":"themes/cactus/source/lib/FiraCode_2/woff2/FiraCode-Retina.woff2","hash":"c384e17a3955d5bd680f3b2a7413da82702e5e87","modified":1608482215065},{"_id":"themes/cactus/source/lib/FiraCode_2/woff2/FiraCode-VF.woff2","hash":"db8b58784b11916566a795941a9458b0516d8afb","modified":1608482215066},{"_id":"themes/cactus/source/lib/FiraCode_2/woff2/FiraCode-Regular.woff2","hash":"cde4f6d2421a282cedbee0cec7b2028b1a872de0","modified":1608482215065},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.eot","hash":"644ece8263d2f96b087eebf7f6d4e309e5898eb5","modified":1608482215068},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.ttf","hash":"19e302760e39e25a5f8d90d6cd0164ef6cd74f8c","modified":1608482215082},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff","hash":"f9d835a0f9248b1bb33d66968e87c4a50103ed8d","modified":1608482215082},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff","hash":"80d33a73cbb60e206ef6f5c898988641576c7dda","modified":1608482215108},{"_id":"themes/cactus/source/lib/FiraCode_2/woff/FiraCode-Light.woff","hash":"4e195d19235ce5af2fb90a8e8fe3f69700b346c2","modified":1608482215059},{"_id":"themes/cactus/source/lib/FiraCode_2/woff/FiraCode-Bold.woff","hash":"55dd313e593fdbbb1cafae03bd438a3337c31209","modified":1608482215058},{"_id":"themes/cactus/source/lib/FiraCode_2/woff/FiraCode-Medium.woff","hash":"fce90bf0dd24d907b504dcd7dbda0a33270cdd4b","modified":1608482215060},{"_id":"themes/cactus/source/lib/FiraCode_2/woff/FiraCode-Regular.woff","hash":"3e54d321179cf7ba0b6a51c753cfe5102aad7aa0","modified":1608482215060},{"_id":"themes/cactus/source/lib/FiraCode_2/woff/FiraCode-Retina.woff","hash":"90806a1b0d350f9c8ea6b00a87a80c0262da774b","modified":1608482215061},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.svg","hash":"33e86c0ad6fb9c5c0c8c2af4cb2d790c6b14a8aa","modified":1608482215085},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.eot","hash":"10740942ec6b3f4985529d343402d0bf32f9f847","modified":1608482215088},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.ttf","hash":"c445864a9646948e0d7ff44930ad732ee61427d8","modified":1608482215107},{"_id":"themes/cactus/source/lib/FiraCode_2/otf/FiraCode-Medium.otf","hash":"64df282c70dfdcec2d442950a84b537f80c233ea","modified":1608482215037},{"_id":"themes/cactus/source/lib/FiraCode_2/otf/FiraCode-Bold.otf","hash":"83d660b9b4e1dd2fd2dea4e7cb19bb1e9ca0441b","modified":1608482215034},{"_id":"themes/cactus/source/lib/FiraCode_2/otf/FiraCode-Light.otf","hash":"bf8b9c6cddc18a0529e84cef6c571ce86cec81cc","modified":1608482215036},{"_id":"themes/cactus/source/lib/FiraCode_2/otf/FiraCode-Regular.otf","hash":"53cf5a0dcc17eb79411cc04f88a8dd17669dfbfe","modified":1608482215039},{"_id":"themes/cactus/source/lib/FiraCode_2/otf/FiraCode-Retina.otf","hash":"1474b5b5ef6d75eb54fbf4c115917ace23b692f2","modified":1608482215041},{"_id":"themes/cactus/source/lib/FiraCode_2/ttf/FiraCode-Bold.ttf","hash":"43be348fbd39bc96179dd84144b493e60ee508c9","modified":1608482215044},{"_id":"themes/cactus/source/lib/FiraCode_2/ttf/FiraCode-Regular.ttf","hash":"d1f975d536c54f0191d427afda568305c1529be9","modified":1608482215052},{"_id":"themes/cactus/source/lib/FiraCode_2/ttf/FiraCode-Medium.ttf","hash":"312a44ef421a1b1587fea021c85cc63c4abd44d2","modified":1608482215051},{"_id":"themes/cactus/source/lib/FiraCode_2/ttf/FiraCode-Light.ttf","hash":"5408b5e9b07981bb8f3dd984f0d0cb4133323368","modified":1608482215046},{"_id":"themes/cactus/source/lib/FiraCode_2/ttf/FiraCode-Retina.ttf","hash":"591358fc42126d32896dfe66d9bdce4a6b0073e3","modified":1608482215055},{"_id":"themes/cactus/source/lib/FiraCode_2/variable_ttf/FiraCode-VF.ttf","hash":"14159d5676b6d971f58110c78227e9df83026763","modified":1608482215057},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.svg","hash":"b0bb9e6ac7709206b9510f1718516d89aead5b21","modified":1608482215075},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.svg","hash":"ed6c1ed8f24df909f40fe5e5c652d7ff9570c821","modified":1608482215105},{"_id":"public/about/index.html","hash":"0822a7bdc7dc4c6586846e86cb8487809e936551","modified":1627705497758},{"_id":"public/tags/index.html","hash":"1647beeb7f0bd8385fcb119f6c72f9b9df7bf65f","modified":1627705497758},{"_id":"public/2019/04/06/green-book/index.html","hash":"ec8742cf1f850ec6d1a007a14cd6f6066d74e7fd","modified":1627705497758},{"_id":"public/2017/08/27/gitDebug/index.html","hash":"c6c530b3c2247626a8a1dd3e61a1f2a11ecd2a95","modified":1627705497758},{"_id":"public/archives/index.html","hash":"ec8e878f04911ec4e1b7600af3f7a6a46aee0149","modified":1627705497758},{"_id":"public/archives/page/2/index.html","hash":"f9ef3ba0e5730076d515415f67dfbf6fc976b3a6","modified":1627705497758},{"_id":"public/archives/2017/index.html","hash":"bf73ed0ec2a5159c51e2b0c1af7ee9009936e8cd","modified":1627705497758},{"_id":"public/archives/2017/07/index.html","hash":"549a3872e6db626ed22ed2d39e69f0119ee89136","modified":1627705497758},{"_id":"public/archives/2017/08/index.html","hash":"81664ca06ba8ae6f4c4dde667d0972cdc2c24408","modified":1627705497758},{"_id":"public/archives/2017/09/index.html","hash":"d144f61d47873d902e20584530ac7f87b8260919","modified":1627705497758},{"_id":"public/archives/2018/index.html","hash":"10ee27e67e13804bef15958724386a057ce18677","modified":1627705497758},{"_id":"public/archives/2018/01/index.html","hash":"937170f4344bfeb3f5f36d40d2589e2c91d835bb","modified":1627705497758},{"_id":"public/archives/2018/05/index.html","hash":"a169a0afa5f6775563ce1a566bf7a6289a44756b","modified":1627705497758},{"_id":"public/archives/2018/07/index.html","hash":"1897bc84970c539ec7bb3a6eb225ca7ed9774834","modified":1627705497758},{"_id":"public/archives/2018/10/index.html","hash":"34811da6de721da5ddf37d8f731db979420e04ca","modified":1627705497758},{"_id":"public/archives/2019/index.html","hash":"d53eac6a216a95a42022b14c891ae0b1b7c10a13","modified":1627705497758},{"_id":"public/archives/2019/02/index.html","hash":"ea433c072457a466ec139eefa490b1298e06fd4e","modified":1627705497758},{"_id":"public/archives/2019/03/index.html","hash":"15f5f3df59af7d9916b79242297f2a3189adf0b9","modified":1627705497758},{"_id":"public/archives/2019/04/index.html","hash":"9c4d6e9966d945a6e25885522c52605edeb76a08","modified":1627705497758},{"_id":"public/archives/2019/05/index.html","hash":"e61edf19f2c89524c006d968905f291dc7805a83","modified":1627705497758},{"_id":"public/archives/2019/07/index.html","hash":"497bb8fd2738ada95ec03d7394db14010c19c270","modified":1627705497758},{"_id":"public/archives/2020/index.html","hash":"36c480e578e5b273d63eb2bcf4eea5eaecd8b62e","modified":1627705497758},{"_id":"public/archives/2020/01/index.html","hash":"5069248b17080b868aa99b736cdfd37d7c189efc","modified":1627705497758},{"_id":"public/archives/2020/02/index.html","hash":"7664c0775ac9f88afce045c8e9fb6ac4f20b4c6f","modified":1627705497758},{"_id":"public/index.html","hash":"998a0e3d8d9b5dc7354ba78a7f078f06fa3799d3","modified":1627705497758},{"_id":"public/page/2/index.html","hash":"998a0e3d8d9b5dc7354ba78a7f078f06fa3799d3","modified":1627705497758},{"_id":"public/tags/Nginx/index.html","hash":"33983583955d38e995f8bcb4119300de3ebb43de","modified":1627705497758},{"_id":"public/tags/linux/index.html","hash":"539de3e7aba23489135fff27b5f6ac1def65fbbf","modified":1627705497758},{"_id":"public/tags/博客搭建/index.html","hash":"e9c65fe87cdcdb349d25d0d50a52da80979c071c","modified":1627705497758},{"_id":"public/tags/js/index.html","hash":"d9f93c790760d4b800df11c2b86a9e45c6a199b7","modified":1627705497758},{"_id":"public/tags/随笔/index.html","hash":"f7a0256d83df64609db0051ef731e50b2dc40e4a","modified":1627705497758},{"_id":"public/tags/es6/index.html","hash":"32811d95e5e5e8cd43d8316ca8093b9c9e61b62d","modified":1627705497758},{"_id":"public/tags/git/index.html","hash":"a061a1781e6f7aff6b7be139a77662ca62bcf775","modified":1627705497758},{"_id":"public/tags/科技/index.html","hash":"015f7eacdd521644bced1fd02da4cd2c0db70313","modified":1627705497758},{"_id":"public/tags/debug/index.html","hash":"1510aa0419ba760ca83af591aeddf5ea58c10780","modified":1627705497758},{"_id":"public/tags/hexo/index.html","hash":"26cd26a901d860a0ae2c4fd01c09c6113d7d61f1","modified":1627705497758},{"_id":"public/tags/电影/index.html","hash":"ae21203fef63a7e0250e1685f6cc2c1566ab68ba","modified":1627705497758},{"_id":"public/tags/算法/index.html","hash":"f964beff4441e1724d9ea4d8d1a21fad7bd36bd9","modified":1627705497758},{"_id":"public/tags/React/index.html","hash":"d294cc08c62dc392c7ae4ec96672041eb544391f","modified":1627705497758},{"_id":"public/tags/markdown/index.html","hash":"8fce1cf6b2ea52b83f3a86b36e1cc9d57b4aa56a","modified":1627705497758},{"_id":"public/tags/npm/index.html","hash":"019817c6dd4ee4ffe301f4c4e896048956fa512e","modified":1627705497758},{"_id":"public/tags/node-js/index.html","hash":"598f05d180f1eaa920e4d117b5aeeada57babc48","modified":1627705497758},{"_id":"public/tags/ssl/index.html","hash":"a2d11ddd5047888604de3897e1af6b7f99e68032","modified":1627705497758},{"_id":"public/tags/https/index.html","hash":"0fe150bbaa6780fb8a1b84895ec0ef1d4d8e8e55","modified":1627705497758},{"_id":"public/2020/02/09/google-camera/index.html","hash":"cde484f81f69f5a3cad94b5f7fbfe1f8d9d28592","modified":1627705497758},{"_id":"public/2020/01/20/learn-react/index.html","hash":"3d4005431b245764e0ac2a448c78222202d2f1e0","modified":1627705497758},{"_id":"public/2019/07/05/graduate/index.html","hash":"643dbbc20a595110a0cd31d7fe3c4b60f336a646","modified":1627705497758},{"_id":"public/2019/05/05/js-intSum/index.html","hash":"7593387eff7d1a0ed93b754300742f8563611827","modified":1627705497758},{"_id":"public/2019/03/05/js-operation/index.html","hash":"bc2d70049c5f8f48a8f1a70d627e407f4a943ba8","modified":1627705497758},{"_id":"public/2019/02/21/es6-variables/index.html","hash":"9951a3570659136de43bef8e70d1914b3515635e","modified":1627705497758},{"_id":"public/2018/10/15/git-hooks/index.html","hash":"2514ae7d3f82ce4baaae33942504def55926b3a2","modified":1627705497758},{"_id":"public/2018/10/04/centos7-setting/index.html","hash":"43e66fcb4d511c77beb13d461e5da4a753197af7","modified":1627705497758},{"_id":"public/2018/10/03/centos7-nginx/index.html","hash":"188e2ca90fa0021cbc466beba710c580fa3c831a","modified":1627705497758},{"_id":"public/2018/07/20/npm-setting/index.html","hash":"d476355d79a1be0705203b1165d5dcbd72cf8bff","modified":1627705497758},{"_id":"public/2018/07/04/picgo-qiniuyun/index.html","hash":"0b58d722bd3e89e0d2eefc72b8a20e54663f3d55","modified":1627705497758},{"_id":"public/2018/05/15/nginx-https/index.html","hash":"800da55d87ff61198a3881928dd730cff5d36ff8","modified":1627705497758},{"_id":"public/2018/01/05/freshman/index.html","hash":"cb77dad8bef93d28b15366ce17fd22caa5c5381a","modified":1627705497758},{"_id":"public/2017/09/02/markdown-instruction/index.html","hash":"e165c993118343bfe3ad34575c9d40da4aa53687","modified":1627705497758},{"_id":"public/2017/08/30/hexo-instruction/index.html","hash":"c586d28d0a428038ae471d7ff7ac6b28c26316fb","modified":1627705497758},{"_id":"public/2017/07/30/domainSetting/index.html","hash":"e1aa3255e942df072ac9cd72d0e20908777ae1ad","modified":1627705497758},{"_id":"public/2017/07/16/buildGitPages-1/index.html","hash":"016a831912c066d460dfcb6ed6b00441cd00f12d","modified":1627705497758},{"_id":"public/2017/07/10/myNewBlog/index.html","hash":"2a0926a716a825a6874c47622e39260d04d9effe","modified":1627705497758},{"_id":"public/images/Photo_0411_1a.jpg","hash":"a6f38f90b4048fa7a6705de3f6763b9248c9166f","modified":1627705497758},{"_id":"public/images/favicon.ico","hash":"a6f38f90b4048fa7a6705de3f6763b9248c9166f","modified":1627705497758},{"_id":"public/images/favicon-192x192.png","hash":"a6f38f90b4048fa7a6705de3f6763b9248c9166f","modified":1627705497758},{"_id":"public/images/apple-touch-icon.png","hash":"a6f38f90b4048fa7a6705de3f6763b9248c9166f","modified":1627705497758},{"_id":"public/CNAME","hash":"a33c3017abe841a5c4a03c2f7654208a0d1683b8","modified":1627705497758},{"_id":"public/lib/FiraCode_2/HowToInstall.txt","hash":"b979d2e37d6135db230740d5754ddbb47784d200","modified":1627705497758},{"_id":"public/lib/vazir-font/Vazir-Black.woff","hash":"37443d0040f0d7af381c955e4c15919a15d0349e","modified":1627705497758},{"_id":"public/lib/vazir-font/Vazir-Black.woff2","hash":"0a257c8b60e0f20802c1dc8daeed2d3cb0d44f17","modified":1627705497758},{"_id":"public/lib/vazir-font/Vazir-Light.woff","hash":"32ae5c0d1d5943c8bb8e0f6ab07c3269c6f8b8a8","modified":1627705497758},{"_id":"public/lib/vazir-font/Vazir-Bold.woff","hash":"df15fd1e74b6f4a50bea57e2b44d9627f38495b5","modified":1627705497758},{"_id":"public/lib/vazir-font/Vazir-Bold.woff2","hash":"62447a951d48b21c4696ae72df4bc4adef636e26","modified":1627705497758},{"_id":"public/lib/vazir-font/Vazir-Light.woff2","hash":"ef07a250766fea840c1049e67c0405d9216ee0a8","modified":1627705497758},{"_id":"public/lib/vazir-font/Vazir-Medium.woff","hash":"f5653059b2a5929516e4aab02329a978600b9b67","modified":1627705497758},{"_id":"public/lib/vazir-font/Vazir-Medium.woff2","hash":"668400ae92700965f03f2371faaee0ab8c8347c3","modified":1627705497758},{"_id":"public/lib/vazir-font/Vazir-Thin.woff2","hash":"c3be79b553ec394db71268d604b1d29183b867dc","modified":1627705497758},{"_id":"public/lib/vazir-font/Vazir-Thin.woff","hash":"ad4d46a99a1daf6353c86c79ac3a2b030213859c","modified":1627705497758},{"_id":"public/lib/vazir-font/Vazir.woff2","hash":"30ce165216db078951a690a6ad665b9b78f5dd81","modified":1627705497758},{"_id":"public/lib/vazir-font/Vazir.woff","hash":"bbee70033f0f5882e9869e417b69c6a38f56f187","modified":1627705497758},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.eot","hash":"42ff503f20e97503cef8e5b2ec10ae07699d7c01","modified":1627705497758},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"d902f8db3e021155f177f698a252fb98d6e61768","modified":1627705497758},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"92da6e3c7121e21cdfde25ef08797a3937a683e1","modified":1627705497758},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.ttf","hash":"c140085833a38abec6b7df99d4ccac93eb266031","modified":1627705497758},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff","hash":"7b3f44b4d3028f3c87ddf0f4bd62511c9bf4a87e","modified":1627705497758},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"9784edb76f8a2ed595ea4bf74d46cda4eff3b303","modified":1627705497758},{"_id":"public/lib/vazir-font/Vazir-Black.ttf","hash":"594dc3344ad14903c247615427d1009709f0f5a4","modified":1627705497758},{"_id":"public/lib/vazir-font/Vazir-Black.eot","hash":"13d026ff857c853cbd0dc519b6e58669db309441","modified":1627705497758},{"_id":"public/lib/vazir-font/Vazir-Bold.ttf","hash":"2e6c9df9f775373fb1988ae8529aa8f05313dae6","modified":1627705497758},{"_id":"public/lib/vazir-font/Vazir-Bold.eot","hash":"f76ec625e15522ff60d21f7a9a3b71c65bc27556","modified":1627705497758},{"_id":"public/lib/vazir-font/Vazir-Light.eot","hash":"3edffd7bb61eee8cd46b57225f9f9e5264e3362b","modified":1627705497758},{"_id":"public/lib/vazir-font/Vazir-Light.ttf","hash":"9f1e2934098a6a4a7c5584c8f3fa24a707070da3","modified":1627705497758},{"_id":"public/lib/vazir-font/Vazir-Medium.ttf","hash":"295f7e02c9b157e7ea63ad09613b00ceab85c5cd","modified":1627705497758},{"_id":"public/lib/vazir-font/Vazir-Thin.eot","hash":"08e1503d1181188690fd9c81860d6c890c1465f6","modified":1627705497758},{"_id":"public/lib/vazir-font/Vazir-Medium.eot","hash":"1f5a73db7947ef22c8a2bb19d6449b80496c03c4","modified":1627705497758},{"_id":"public/lib/vazir-font/Vazir-Thin.ttf","hash":"a6aa450ee6e0f85786474ca6b04827ef97e81af4","modified":1627705497758},{"_id":"public/lib/vazir-font/Vazir.eot","hash":"31a9219c25fe1991fb745ec8dbbcf45c6094a702","modified":1627705497758},{"_id":"public/lib/vazir-font/Vazir.ttf","hash":"f22b219824026e490a581ddb3b36b07997dff0e3","modified":1627705497758},{"_id":"public/lib/FiraCode_2/woff2/FiraCode-Bold.woff2","hash":"257c05782024b86466aa7415f9bac904b412d117","modified":1627705497758},{"_id":"public/lib/FiraCode_2/woff2/FiraCode-Medium.woff2","hash":"5c5249db73659ac57006279ca90f2debe44dc537","modified":1627705497758},{"_id":"public/lib/FiraCode_2/woff/FiraCode-VF.woff","hash":"3cbefefacd47dc2e6065e78a4c958bdfbc2b3cdc","modified":1627705497758},{"_id":"public/lib/FiraCode_2/woff2/FiraCode-Light.woff2","hash":"67ea0bce4410dd2f0f61f0e57f8c4728ca3bf3d6","modified":1627705497758},{"_id":"public/lib/FiraCode_2/woff2/FiraCode-VF.woff2","hash":"db8b58784b11916566a795941a9458b0516d8afb","modified":1627705497758},{"_id":"public/lib/FiraCode_2/woff2/FiraCode-Regular.woff2","hash":"cde4f6d2421a282cedbee0cec7b2028b1a872de0","modified":1627705497758},{"_id":"public/lib/FiraCode_2/woff2/FiraCode-Retina.woff2","hash":"c384e17a3955d5bd680f3b2a7413da82702e5e87","modified":1627705497758},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff","hash":"f9d835a0f9248b1bb33d66968e87c4a50103ed8d","modified":1627705497758},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.eot","hash":"644ece8263d2f96b087eebf7f6d4e309e5898eb5","modified":1627705497758},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.ttf","hash":"19e302760e39e25a5f8d90d6cd0164ef6cd74f8c","modified":1627705497758},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff","hash":"80d33a73cbb60e206ef6f5c898988641576c7dda","modified":1627705497758},{"_id":"public/css/rtl.css","hash":"c2c2bc4ce311b3129275e009e903088b45e7ed77","modified":1627705497758},{"_id":"public/js/main.js","hash":"584c5a69ac81a483a1c4377a2e2cf326c2795e7b","modified":1627705497758},{"_id":"public/lib/FiraCode_2/fira_code.css","hash":"37a776383817bd2e4f569140d8f85645e8844e6e","modified":1627705497758},{"_id":"public/js/search.js","hash":"a74d0c601f820160825a2e4ad13618074d714933","modified":1627705497758},{"_id":"public/lib/clipboard/clipboard.min.js","hash":"ee60ca5ba9401456105ef703a98092369b579c80","modified":1627705497758},{"_id":"public/lib/vazir-font/font-face.css","hash":"8f2bf6b59ae1f2ed4c2fead6cea4b8314fcf62e5","modified":1627705497758},{"_id":"public/lib/justified-gallery/css/justifiedGallery.min.css","hash":"92bb6e468a1db7fbd99ccb960e15e28572254263","modified":1627705497758},{"_id":"public/lib/FiraCode_2/specimen.html","hash":"a4a2d9d021d3c7edb106a86e95cf69bf029a8a4b","modified":1627705497758},{"_id":"public/css/style.css","hash":"a909e9e6f6f618778bad0ab7ad17ab7b6dcc5fd8","modified":1627705497758},{"_id":"public/lib/jquery/jquery.min.js","hash":"0dc32db4aa9c5f03f3b38c47d883dbd4fed13aae","modified":1627705497758},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"cf1a3fd771900af34f2af22142beecfb47367548","modified":1627705497758},{"_id":"public/lib/justified-gallery/js/jquery.justifiedGallery.min.js","hash":"82ab395176c927ffbb2f7c95132ee0a06cd5d64a","modified":1627705497758},{"_id":"public/lib/FiraCode_2/woff/FiraCode-Light.woff","hash":"4e195d19235ce5af2fb90a8e8fe3f69700b346c2","modified":1627705497758},{"_id":"public/lib/FiraCode_2/woff/FiraCode-Bold.woff","hash":"55dd313e593fdbbb1cafae03bd438a3337c31209","modified":1627705497758},{"_id":"public/lib/FiraCode_2/woff/FiraCode-Medium.woff","hash":"fce90bf0dd24d907b504dcd7dbda0a33270cdd4b","modified":1627705497758},{"_id":"public/lib/FiraCode_2/woff/FiraCode-Regular.woff","hash":"3e54d321179cf7ba0b6a51c753cfe5102aad7aa0","modified":1627705497758},{"_id":"public/lib/FiraCode_2/woff/FiraCode-Retina.woff","hash":"90806a1b0d350f9c8ea6b00a87a80c0262da774b","modified":1627705497758},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.ttf","hash":"c445864a9646948e0d7ff44930ad732ee61427d8","modified":1627705497758},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.svg","hash":"33e86c0ad6fb9c5c0c8c2af4cb2d790c6b14a8aa","modified":1627705497758},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.eot","hash":"10740942ec6b3f4985529d343402d0bf32f9f847","modified":1627705497758},{"_id":"public/lib/FiraCode_2/otf/FiraCode-Bold.otf","hash":"83d660b9b4e1dd2fd2dea4e7cb19bb1e9ca0441b","modified":1627705497758},{"_id":"public/lib/FiraCode_2/otf/FiraCode-Medium.otf","hash":"64df282c70dfdcec2d442950a84b537f80c233ea","modified":1627705497758},{"_id":"public/lib/FiraCode_2/otf/FiraCode-Regular.otf","hash":"53cf5a0dcc17eb79411cc04f88a8dd17669dfbfe","modified":1627705497758},{"_id":"public/lib/FiraCode_2/otf/FiraCode-Light.otf","hash":"bf8b9c6cddc18a0529e84cef6c571ce86cec81cc","modified":1627705497758},{"_id":"public/lib/FiraCode_2/otf/FiraCode-Retina.otf","hash":"1474b5b5ef6d75eb54fbf4c115917ace23b692f2","modified":1627705497758},{"_id":"public/lib/FiraCode_2/ttf/FiraCode-Bold.ttf","hash":"43be348fbd39bc96179dd84144b493e60ee508c9","modified":1627705497758},{"_id":"public/lib/FiraCode_2/ttf/FiraCode-Medium.ttf","hash":"312a44ef421a1b1587fea021c85cc63c4abd44d2","modified":1627705497758},{"_id":"public/lib/FiraCode_2/ttf/FiraCode-Regular.ttf","hash":"d1f975d536c54f0191d427afda568305c1529be9","modified":1627705497758},{"_id":"public/lib/FiraCode_2/ttf/FiraCode-Light.ttf","hash":"5408b5e9b07981bb8f3dd984f0d0cb4133323368","modified":1627705497758},{"_id":"public/lib/FiraCode_2/ttf/FiraCode-Retina.ttf","hash":"591358fc42126d32896dfe66d9bdce4a6b0073e3","modified":1627705497758},{"_id":"public/lib/FiraCode_2/variable_ttf/FiraCode-VF.ttf","hash":"14159d5676b6d971f58110c78227e9df83026763","modified":1627705497758},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.svg","hash":"ed6c1ed8f24df909f40fe5e5c652d7ff9570c821","modified":1627705497758},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.svg","hash":"b0bb9e6ac7709206b9510f1718516d89aead5b21","modified":1627705497758}],"Category":[],"Data":[{"_id":"projects","data":[{"name":"NJUPT_Esport","url":"https://github.com/Davont/NJUPT_Esport","desc":"一个为在校学生提供体育相关成绩查询、校新闻推送、学生反馈评论的web app"},{"name":"Furniture_Management_System","url":"https://github.com/Davont/Furniture_Management_System","desc":"一个提供家具购买、下单、用户管理、订单管理、商户管理等功能的家具订单CMS系统"},{"name":"weapp-WQPS","url":"https://github.com/Davont/weapp-WQPS","desc":"一个展示型的微信小程序，旨在提供基于卫星传感网的水质监测系统的对外展示平台。"},{"name":"yiban_registration","url":"https://github.com/Davont/yiban_registration","desc":"一个面向社团提供新生加入社团的线上报名表"}]}],"Page":[{"title":"about","layout":"tag/about","date":"2019-12-30T18:57:30.000Z","_content":"# 教育背景 \n\n## 南京邮电大学\n* 2016/09-2020/07\n* 本科\n* 计算机科学与技术\n\n# 联系方式\n\n* Email:zhang980511@outlook.com\n* QQ:981417972","source":"about/index.md","raw":"---\ntitle: about\nlayout: tag/about\ndate: 2019-12-31 02:57:30\n---\n# 教育背景 \n\n## 南京邮电大学\n* 2016/09-2020/07\n* 本科\n* 计算机科学与技术\n\n# 联系方式\n\n* Email:zhang980511@outlook.com\n* QQ:981417972","updated":"2020-12-20T16:36:55.010Z","path":"about/index.html","comments":1,"_id":"ckrr9soia00011l5xa3qoeabb","content":"<h1 id=\"教育背景\"><a href=\"#教育背景\" class=\"headerlink\" title=\"教育背景\"></a>教育背景</h1><h2 id=\"南京邮电大学\"><a href=\"#南京邮电大学\" class=\"headerlink\" title=\"南京邮电大学\"></a>南京邮电大学</h2><ul>\n<li>2016/09-2020/07</li>\n<li>本科</li>\n<li>计算机科学与技术</li>\n</ul>\n<h1 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h1><ul>\n<li>Email:<a href=\"mailto:zhang980511@outlook.com\">zhang980511@outlook.com</a></li>\n<li>QQ:981417972</li>\n</ul>\n","site":{"data":{"projects":[{"name":"NJUPT_Esport","url":"https://github.com/Davont/NJUPT_Esport","desc":"一个为在校学生提供体育相关成绩查询、校新闻推送、学生反馈评论的web app"},{"name":"Furniture_Management_System","url":"https://github.com/Davont/Furniture_Management_System","desc":"一个提供家具购买、下单、用户管理、订单管理、商户管理等功能的家具订单CMS系统"},{"name":"weapp-WQPS","url":"https://github.com/Davont/weapp-WQPS","desc":"一个展示型的微信小程序，旨在提供基于卫星传感网的水质监测系统的对外展示平台。"},{"name":"yiban_registration","url":"https://github.com/Davont/yiban_registration","desc":"一个面向社团提供新生加入社团的线上报名表"}]}},"excerpt":"","more":"<h1 id=\"教育背景\"><a href=\"#教育背景\" class=\"headerlink\" title=\"教育背景\"></a>教育背景</h1><h2 id=\"南京邮电大学\"><a href=\"#南京邮电大学\" class=\"headerlink\" title=\"南京邮电大学\"></a>南京邮电大学</h2><ul>\n<li>2016/09-2020/07</li>\n<li>本科</li>\n<li>计算机科学与技术</li>\n</ul>\n<h1 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h1><ul>\n<li>Email:<a href=\"mailto:zhang980511@outlook.com\">zhang980511@outlook.com</a></li>\n<li>QQ:981417972</li>\n</ul>\n"},{"title":"tags","layout":"tag/about","date":"2019-12-30T18:57:23.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\nlayout: tag/about\ndate: 2019-12-31 02:57:23\n---\n","updated":"2020-12-20T16:36:55.010Z","path":"tags/index.html","comments":1,"_id":"ckrr9sol900211l5x0bnp7ykr","content":"","site":{"data":{"projects":[{"name":"NJUPT_Esport","url":"https://github.com/Davont/NJUPT_Esport","desc":"一个为在校学生提供体育相关成绩查询、校新闻推送、学生反馈评论的web app"},{"name":"Furniture_Management_System","url":"https://github.com/Davont/Furniture_Management_System","desc":"一个提供家具购买、下单、用户管理、订单管理、商户管理等功能的家具订单CMS系统"},{"name":"weapp-WQPS","url":"https://github.com/Davont/weapp-WQPS","desc":"一个展示型的微信小程序，旨在提供基于卫星传感网的水质监测系统的对外展示平台。"},{"name":"yiban_registration","url":"https://github.com/Davont/yiban_registration","desc":"一个面向社团提供新生加入社团的线上报名表"}]}},"excerpt":"","more":""}],"Post":[{"title":"在centOS7通过yum安装nginx","date":"2018-10-03T10:46:11.000Z","_content":"之前小白在服务器上安装nginx配置，费了老半天，第一是不懂服务器操作，主要是linux相关命令，没有本地ubantu图形化，也不太懂yum，systemctl命令。不过身为前端开发，不能局限于前端，要有爱折腾的心。\n## 下载阿里源\n```\nwget -O CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo\t# 下载阿里源的文件\n```\n\n## 安装Nginx\n> 通过yum search nginx可以知道是否已经添加源成功。\n```\nsudo yum install -y nginx\n```\n\n## 启动Nginx并设置开机自动运行\n```\nsudo systemctl start nginx.service\nsudo systemctl enable nginx.service\n```\n## 在浏览器上查看效果\n\n![nginx](http://pic.davontt.com/picGo/website.png)\n<center style=\"color:#AAAAAA\">在浏览器输入你的地址</center>\n\n## Nginx 配置信息和相关命令\n\n### 网站文件存放默认目录\n```\n/usr/share/nginx/html\n```\n\n### 网站默认站点配置\n```\n/etc/nginx/conf.d/default.conf\n```\n\n### 自定义Nginx站点配置文件存放目录\n```\n/etc/nginx/conf.d/\n```\n\n### Nginx全局配置\n```\n/etc/nginx/nginx.conf\n```\n\n### Nginx启动\n```\nsystemctl start nginx\n```\n\n### Nginx停止\n```\nsystemctl stop nginx\n```\n\n### Nginx重启\n```\nsystemctl restart nginx\n```\n\n### Nginx 查看状态\n```\nsystemctl status nginx.service\n```\n\n### Nginx 检查配置文件\n```\nnginx -t\n```\n","source":"_posts/centos7-nginx.md","raw":"---\ntitle: 在centOS7通过yum安装nginx\ndate: 2018-10-03 18:46:11\ntags: [Nginx,linux]\n---\n之前小白在服务器上安装nginx配置，费了老半天，第一是不懂服务器操作，主要是linux相关命令，没有本地ubantu图形化，也不太懂yum，systemctl命令。不过身为前端开发，不能局限于前端，要有爱折腾的心。\n## 下载阿里源\n```\nwget -O CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo\t# 下载阿里源的文件\n```\n\n## 安装Nginx\n> 通过yum search nginx可以知道是否已经添加源成功。\n```\nsudo yum install -y nginx\n```\n\n## 启动Nginx并设置开机自动运行\n```\nsudo systemctl start nginx.service\nsudo systemctl enable nginx.service\n```\n## 在浏览器上查看效果\n\n![nginx](http://pic.davontt.com/picGo/website.png)\n<center style=\"color:#AAAAAA\">在浏览器输入你的地址</center>\n\n## Nginx 配置信息和相关命令\n\n### 网站文件存放默认目录\n```\n/usr/share/nginx/html\n```\n\n### 网站默认站点配置\n```\n/etc/nginx/conf.d/default.conf\n```\n\n### 自定义Nginx站点配置文件存放目录\n```\n/etc/nginx/conf.d/\n```\n\n### Nginx全局配置\n```\n/etc/nginx/nginx.conf\n```\n\n### Nginx启动\n```\nsystemctl start nginx\n```\n\n### Nginx停止\n```\nsystemctl stop nginx\n```\n\n### Nginx重启\n```\nsystemctl restart nginx\n```\n\n### Nginx 查看状态\n```\nsystemctl status nginx.service\n```\n\n### Nginx 检查配置文件\n```\nnginx -t\n```\n","slug":"centos7-nginx","published":1,"updated":"2020-12-20T16:36:55.007Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrr9sohz00001l5x58j90lr4","content":"<p>之前小白在服务器上安装nginx配置，费了老半天，第一是不懂服务器操作，主要是linux相关命令，没有本地ubantu图形化，也不太懂yum，systemctl命令。不过身为前端开发，不能局限于前端，要有爱折腾的心。</p>\n<h2 id=\"下载阿里源\"><a href=\"#下载阿里源\" class=\"headerlink\" title=\"下载阿里源\"></a>下载阿里源</h2><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -O CentOS-Base.repo http:<span class=\"regexp\">//mi</span>rrors.aliyun.com<span class=\"regexp\">/repo/</span>Centos-<span class=\"number\">7</span>.repo\t<span class=\"comment\"># 下载阿里源的文件</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装Nginx\"><a href=\"#安装Nginx\" class=\"headerlink\" title=\"安装Nginx\"></a>安装Nginx</h2><blockquote>\n<p>通过yum search nginx可以知道是否已经添加源成功。</p>\n</blockquote>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum <span class=\"keyword\">install</span> -y nginx</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"启动Nginx并设置开机自动运行\"><a href=\"#启动Nginx并设置开机自动运行\" class=\"headerlink\" title=\"启动Nginx并设置开机自动运行\"></a>启动Nginx并设置开机自动运行</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">sudo</span> <span class=\"selector-tag\">systemctl</span> <span class=\"selector-tag\">start</span> <span class=\"selector-tag\">nginx</span><span class=\"selector-class\">.service</span></span><br><span class=\"line\"><span class=\"selector-tag\">sudo</span> <span class=\"selector-tag\">systemctl</span> <span class=\"selector-tag\">enable</span> <span class=\"selector-tag\">nginx</span><span class=\"selector-class\">.service</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"在浏览器上查看效果\"><a href=\"#在浏览器上查看效果\" class=\"headerlink\" title=\"在浏览器上查看效果\"></a>在浏览器上查看效果</h2><p><img src=\"http://pic.davontt.com/picGo/website.png\" alt=\"nginx\"></p>\n<center style=\"color:#AAAAAA\">在浏览器输入你的地址</center>\n\n<h2 id=\"Nginx-配置信息和相关命令\"><a href=\"#Nginx-配置信息和相关命令\" class=\"headerlink\" title=\"Nginx 配置信息和相关命令\"></a>Nginx 配置信息和相关命令</h2><h3 id=\"网站文件存放默认目录\"><a href=\"#网站文件存放默认目录\" class=\"headerlink\" title=\"网站文件存放默认目录\"></a>网站文件存放默认目录</h3><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">/usr/</span>share<span class=\"regexp\">/nginx/</span>html</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"网站默认站点配置\"><a href=\"#网站默认站点配置\" class=\"headerlink\" title=\"网站默认站点配置\"></a>网站默认站点配置</h3><figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">/etc/</span>nginx<span class=\"regexp\">/conf.d/</span><span class=\"keyword\">default</span>.conf</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"自定义Nginx站点配置文件存放目录\"><a href=\"#自定义Nginx站点配置文件存放目录\" class=\"headerlink\" title=\"自定义Nginx站点配置文件存放目录\"></a>自定义Nginx站点配置文件存放目录</h3><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">/etc/</span>nginx<span class=\"regexp\">/conf.d/</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Nginx全局配置\"><a href=\"#Nginx全局配置\" class=\"headerlink\" title=\"Nginx全局配置\"></a>Nginx全局配置</h3><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">/etc/</span>nginx<span class=\"regexp\">/nginx.conf</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Nginx启动\"><a href=\"#Nginx启动\" class=\"headerlink\" title=\"Nginx启动\"></a>Nginx启动</h3><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl <span class=\"literal\">start</span> nginx</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Nginx停止\"><a href=\"#Nginx停止\" class=\"headerlink\" title=\"Nginx停止\"></a>Nginx停止</h3><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl <span class=\"built_in\">stop</span> nginx</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Nginx重启\"><a href=\"#Nginx重启\" class=\"headerlink\" title=\"Nginx重启\"></a>Nginx重启</h3><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">systemctl restart nginx</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Nginx-查看状态\"><a href=\"#Nginx-查看状态\" class=\"headerlink\" title=\"Nginx 查看状态\"></a>Nginx 查看状态</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">systemctl</span> <span class=\"selector-tag\">status</span> <span class=\"selector-tag\">nginx</span><span class=\"selector-class\">.service</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Nginx-检查配置文件\"><a href=\"#Nginx-检查配置文件\" class=\"headerlink\" title=\"Nginx 检查配置文件\"></a>Nginx 检查配置文件</h3><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">nginx -t</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{"projects":[{"name":"NJUPT_Esport","url":"https://github.com/Davont/NJUPT_Esport","desc":"一个为在校学生提供体育相关成绩查询、校新闻推送、学生反馈评论的web app"},{"name":"Furniture_Management_System","url":"https://github.com/Davont/Furniture_Management_System","desc":"一个提供家具购买、下单、用户管理、订单管理、商户管理等功能的家具订单CMS系统"},{"name":"weapp-WQPS","url":"https://github.com/Davont/weapp-WQPS","desc":"一个展示型的微信小程序，旨在提供基于卫星传感网的水质监测系统的对外展示平台。"},{"name":"yiban_registration","url":"https://github.com/Davont/yiban_registration","desc":"一个面向社团提供新生加入社团的线上报名表"}]}},"excerpt":"","more":"<p>之前小白在服务器上安装nginx配置，费了老半天，第一是不懂服务器操作，主要是linux相关命令，没有本地ubantu图形化，也不太懂yum，systemctl命令。不过身为前端开发，不能局限于前端，要有爱折腾的心。</p>\n<h2 id=\"下载阿里源\"><a href=\"#下载阿里源\" class=\"headerlink\" title=\"下载阿里源\"></a>下载阿里源</h2><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -O CentOS-Base.repo http:<span class=\"regexp\">//mi</span>rrors.aliyun.com<span class=\"regexp\">/repo/</span>Centos-<span class=\"number\">7</span>.repo\t<span class=\"comment\"># 下载阿里源的文件</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装Nginx\"><a href=\"#安装Nginx\" class=\"headerlink\" title=\"安装Nginx\"></a>安装Nginx</h2><blockquote>\n<p>通过yum search nginx可以知道是否已经添加源成功。</p>\n</blockquote>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum <span class=\"keyword\">install</span> -y nginx</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"启动Nginx并设置开机自动运行\"><a href=\"#启动Nginx并设置开机自动运行\" class=\"headerlink\" title=\"启动Nginx并设置开机自动运行\"></a>启动Nginx并设置开机自动运行</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">sudo</span> <span class=\"selector-tag\">systemctl</span> <span class=\"selector-tag\">start</span> <span class=\"selector-tag\">nginx</span><span class=\"selector-class\">.service</span></span><br><span class=\"line\"><span class=\"selector-tag\">sudo</span> <span class=\"selector-tag\">systemctl</span> <span class=\"selector-tag\">enable</span> <span class=\"selector-tag\">nginx</span><span class=\"selector-class\">.service</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"在浏览器上查看效果\"><a href=\"#在浏览器上查看效果\" class=\"headerlink\" title=\"在浏览器上查看效果\"></a>在浏览器上查看效果</h2><p><img src=\"http://pic.davontt.com/picGo/website.png\" alt=\"nginx\"></p>\n<center style=\"color:#AAAAAA\">在浏览器输入你的地址</center>\n\n<h2 id=\"Nginx-配置信息和相关命令\"><a href=\"#Nginx-配置信息和相关命令\" class=\"headerlink\" title=\"Nginx 配置信息和相关命令\"></a>Nginx 配置信息和相关命令</h2><h3 id=\"网站文件存放默认目录\"><a href=\"#网站文件存放默认目录\" class=\"headerlink\" title=\"网站文件存放默认目录\"></a>网站文件存放默认目录</h3><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">/usr/</span>share<span class=\"regexp\">/nginx/</span>html</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"网站默认站点配置\"><a href=\"#网站默认站点配置\" class=\"headerlink\" title=\"网站默认站点配置\"></a>网站默认站点配置</h3><figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">/etc/</span>nginx<span class=\"regexp\">/conf.d/</span><span class=\"keyword\">default</span>.conf</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"自定义Nginx站点配置文件存放目录\"><a href=\"#自定义Nginx站点配置文件存放目录\" class=\"headerlink\" title=\"自定义Nginx站点配置文件存放目录\"></a>自定义Nginx站点配置文件存放目录</h3><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">/etc/</span>nginx<span class=\"regexp\">/conf.d/</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Nginx全局配置\"><a href=\"#Nginx全局配置\" class=\"headerlink\" title=\"Nginx全局配置\"></a>Nginx全局配置</h3><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">/etc/</span>nginx<span class=\"regexp\">/nginx.conf</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Nginx启动\"><a href=\"#Nginx启动\" class=\"headerlink\" title=\"Nginx启动\"></a>Nginx启动</h3><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl <span class=\"literal\">start</span> nginx</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Nginx停止\"><a href=\"#Nginx停止\" class=\"headerlink\" title=\"Nginx停止\"></a>Nginx停止</h3><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl <span class=\"built_in\">stop</span> nginx</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Nginx重启\"><a href=\"#Nginx重启\" class=\"headerlink\" title=\"Nginx重启\"></a>Nginx重启</h3><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">systemctl restart nginx</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Nginx-查看状态\"><a href=\"#Nginx-查看状态\" class=\"headerlink\" title=\"Nginx 查看状态\"></a>Nginx 查看状态</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">systemctl</span> <span class=\"selector-tag\">status</span> <span class=\"selector-tag\">nginx</span><span class=\"selector-class\">.service</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Nginx-检查配置文件\"><a href=\"#Nginx-检查配置文件\" class=\"headerlink\" title=\"Nginx 检查配置文件\"></a>Nginx 检查配置文件</h3><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">nginx -t</span></span><br></pre></td></tr></table></figure>\n"},{"title":"用githubPages+Hexo零基础搭建个人博客","date":"2017-07-16T13:28:02.000Z","_content":"\n# 行动前的准备工作\n\n## 一个想法\n\n在如今的后博客时代，写博客的人越来越少，搭建自己博客的人也越来越少，我看的一些教程也都是好几年以前的。而我搭建博客，写这个教程也有诸多原因。所以如果你要想建立一个博客，你首先得问自己：你为什么要建立一个博客？\n大家可以看看我之前写的一篇文章 [个人博客正式上线]()。\n等你想好了之后，以后的目标也就更明确了。\n\n## 搭建博客基本介绍以及相关名词的解释\n\n事实上，搭建博客有很多方法，也有很多框架。\n\n### 最简单粗暴的\n\n你完全可以自己买个服务器和域名，在服务器里放置你的博客文件，然后再关联到你的域名（当然，域名要解析过，国内域名还要备案）。然后等上一段时间，重新访问就可以了。但这种对新手特别不友好，写网页即你的博客页面需要前端知识，服务器操作需要你的后端知识，完成之后还需要你的运行和维护，如果你每次维护都是把文件拖拖拽拽到你服务器中，想必是极不好的。如果刚好你用的服务器是Linux，那么恭喜你，你又点进了Linux的大坑中，你得学各种命令语言……所以这种看起来是最简单的，实则是最麻烦的。（还好当时我用的是Windows服务器，虽然卡但有界面啊！）\n\n### WordPress博客平台\n\n这是一种傻瓜部署，也是许多人都追捧的一种框架，操作性好，支持手机端更改，动态部署，有PHP后端支持，有SQL数据库。只需输入账户密码等等，完全不需要懂代码。想了解多这里有传送门wordpress官网。（好像写WordPress更适合这篇文章的标题诶）\n\n### Github Pages\n\nGitHub Pages 是啥？讲道理标准的说法我也不会说。它是github发布的一个工具,便于创建自己的主页。（什么？github是什么？它是世界上最大的同性程序员社交网站）这里有github pages 发布时候的一篇文章。\n\n[_（我是传送门）_](https://blog.github.com/2008-12-18-github-pages/)。\n\n如果真要用我自己的话来说，相当于它既给了你一个小服务器，又给了你一个二级域名，而且这些都是免费的，还无限流量。就好像你把页面托管在github上，让更多的人来看。这也是为什么叫github pages。\n\n因此……….\n\n*   如果你有妹子，可以做一个狂炫酷霸拽的静态页面来讨好妹子。\n*   如果你想分享东西但不要求特别多的空间（github对一个项空间有要求,肯定没有百度云之类的大啦），而且觉得QQ空间，新浪微博等等社交平台太Low或不适合，那就用Github Pages\n*   想学前端技术，并且学了前端技术之后还想练练手，那么选github pages欢迎入坑。\n*   github pages 能玩出更多花样。[http://wiki.hotoo.me/](http://wiki.hotoo.me/)\n这是搭建在GH-pages上的个人知识管理的网站，丰富程度令人叹为观止。\n\n    ## 如果你想好用github pages了，那么请继续阅读下面的文章。\n\n### Hexo 和 jekyll\n好了， 既然已经选好用github pages了，那么下面又要面临一些选择了（人生总要面临诸多选择），那就是关于使用静态部署的方式，方式有很多，这里举两个最常用的 Hexo 和 jekyll。\nHexo 等会再说，我先介绍一下 jekyll，实际上它是一种模板转化引擎，\njekyll本身基于Ruby，它实际上也可以看成是一种模板引擎liquid的扩展。jekyll对liquid的主要扩展在于两点：\n*   内建专用于博客网站的对象，可以在模板中引用这些对象：page、site等。\n*   对liquid进行了扩展，方便构建博客网站\n恩…… jekyll确实好，可我还是不喜欢。因为它不怎么优雅，而且里面的主题也确实不怎么好看。你可以到jekyll的主题页面上看看。 [http://jekyllthemes.org/](http://jekyllthemes.org/)\n下面介绍一下我选用的Hexo了。用我学长的话说，Hexo的逼格更高一些。（恩，比较适合我）\n\n而Hexo当然还有其他的优点啦：\n\n*   Jeky基于Ruby实现，安装Jeky需要搭建Ruby环境，在Windows搭建Ruby环境并不是被推荐的，而 Hexo基于NodeJs实现，在Windows上安装NodeJs开发环境简单。\n*   比较直接的另一个原因是在网上查找了很多博客的主题，发现Jekyll官网提供的主题都不怎么好看(可能是个人原因)，而Hexo的主题看的比较顺眼。\n*   两者都支持Markdown语法，这点我非常喜欢。\n\n# Hexo部署过程\n\n## 安装Git Bush\n有人说过 Git是版本管理的未来，它的优点我不在赘述，相关资料也很多，大家可以上网查。\n要想使用Git，首先需要安装它的客户端，推荐在Linux下使用Git，这样会更方便。Windows下安装地址在这，直接点击右边的“Download for Windows”即可。[下载地址](https://git-scm.com/)\n\n![git](http://pic.davontt.com/picGo/gitDownload.png)\n<center style=\"color:#AAAAAA\">Git官网下载地址</center>\n\n## 安装Node.js\n到Node.js官网下载相应平台的最新版本，一路安装即可。\n\n![nodejs](http://pic.davontt.com/picGo/nodejsDownload.png)\n<center style=\"color:#AAAAAA\">node.js官网</center>\n\n## 注册GitHub账户\n这个无需多说\n\n## 检查SSH keys\n\n打开Git bush\n\n![git bush](http://pic.davontt.com/picGo/gitbush.png)\n<center style=\"color:#AAAAAA\">git bush 终端</center>\n\n首先我们需要检查你电脑上现有的ssh key\n\n输入：\n```\n$ cd ~/.ssh\n```\n\n如果显示“No such file or directory”，直接略过下面一步，否则继续。\n\n### 备份和移除原来的ssh key设置：\n```\n$ ls\nconfig\tid_rsa\tid_rsa.pub\tknown_hosts\n$ mkdir key_backup\n$ cp id_rsa* key_backup\n$ rm id_rsa*\n```\n\n\n### 生成新的SSH Key：\n\n```\n$ ssh-keygen -t rsa -C \"邮件地址@youremail.com\"\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/Users/your_user_directory/.ssh/id_rsa):<回车就好>\n```\n\n> 注：这里的邮件地址最好是你的github上注册的邮件地址。\n\n然后系统会要你输入加密串（Passphrase）：\n\n```\nEnter passphrase (empty for no passphrase):<输入加密串>\nEnter same passphrase again:<再次输入加密串>\n```\n\n> 注：当你输入密码的时候，你是看不到密码显示的，无需担心，直接输就是了。\n\n最后看到这样的界面：\n\n![](http://pic.davontt.com/picGo/ssh.png)\n<center style=\"color:#AAAAAA\">git bush 终端</center>\n\n### 添加SSH Key到GitHub：\n\n在本机设置SSH Key之后，需要添加到GitHub上，以完成SSH链接的设置。\n\n用文本编辑工具打开id_rsa.pub文件，如果看不到这个文件，你需要设置显示隐藏文件。准确的复制这个文件的内容，才能保证设置的成功。\n\n在GitHub的主页上点击设置按钮：\n\n\n![github](http://pic.davontt.com/picGo/github-setting.png)\n<center style=\"color:#AAAAAA\">github 主页</center>\n\n\n然后点左边的“SSH and GPG keys”\n\n在 title和key输入相应的内容（title随便起个有意义的名字即可）\n\n\n![ssh](http://pic.davontt.com/picGo/ssh2.png)\n<center style=\"color:#AAAAAA\">在github中设置ssh</center>\n\n\n完成后我们来验证一下是否成功，在命令行上输入：\n```text\n$ ssh -T git@github.com\n```\n\n\n然后在输入你之前设置的密码 回车一下，看到如下图:\n\n![ssh check](http://pic.davontt.com/picGo/ssh-check.png)\n<center style=\"color:#AAAAAA\">验证ssh是否成功</center>\n\n如果不是这张图，而是出现了这些文字：\n\n```\nThe authenticity of host 'github.com (207.97.227.239)' can't be established.\nRSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.\nAre you sure you want to continue connecting (yes/no)?\n```\n\n\n不要紧张，输入yes就好，然后会看到：\n\n```\nHi <em>username</em>! You've successfully authenticated, but GitHub does not provide shell access.\n```\n\n> 注：你的名字是你的github账户的name\n\n成功了\n\n现在你已经成功连接到github账户上了。\n\n## 正式安装Hexo\n\n*   先创建一个文件夹，名字必须为github上的仓库名称，（形如davont.github.io）这个文件夹是用来存放所有关于博客的内容，包括博客主题啦，用的图片，设置更改等等，现在假设这个文件夹叫做 A 。\n*   git 上命令\n\n```\n$ cd A\n```\n\n> 注：你创建A的位置要正确，如果这个文件A的位置在“我的文档”（WIn10改成用户名命名的文件），可以直接 cd A,一般“我的文档”位置在c盘/用户/&lt;你的用户名&gt;。如果A的位置不在“我的文档” ，则需要输入完整路径，即 cd 文件路径 。\n\n*   接着继续输入命令来安装hexo：\n\n```\n$ npm install hexo -g\n```\n\n安装后你可以输入:\n\n```\n$ hexo\n```\n\n来查看所有的hexo命令\n\n![instruction](http://pic.davontt.com/picGo/instruction.png)\n<center style=\"color:#AAAAAA\">hexo 指令</center>\n\n### 初始化博客\n\n输入命令：\n\n```\n$ hexo init\n```\n\n于是出现了如下的界面：\n\n![files](http://pic.davontt.com/picGo/files.png)\n<center style=\"color:#AAAAAA\">hexo init安装目录</center>\n\n解释一下：\n\n*   node_modules：是依赖包\n*   public：存放的是生成的页面\n*   scaffolds：命令生成文章等的模板\n*   source：用命令创建的各种文章\n*   themes：主题\n*   _config.yml：整个博客的配置\n*   db.json：source解析所得到的\n*   package.json：项目所需模块项目的配置信息\n\n做好这些前置工作之后接下来的就是各种配配配置了。\n\n### 配置博客主题等其他设置\n\n其实这个时候你的博客已经弄好了（毕竟初始化了嘛）。你要不信这时候可以在刚才的git终端输入：\n\n```\n$ hexo s\n```\n\n![hexo](http://pic.davontt.com/picGo/hexo-s.png)\n<center style=\"color:#AAAAAA\">hexo s 指令</center>\n\n然后在浏览器上输入网址：\n\n```\nhttp://localhost:4000/\n```\n\n打开即可看到你的初始化后的博客。\n\n这个本地地址是留给你调试测试用的，别忘了当你不想测试的时候用 Ctrl + C 来结束掉哦。\n\n是不是很兴奋？嗯哼？\n\n但这个还是最简陋的博客，名字，内容，装饰什么都没有。\n\n这时候我们可以给hexo 添加点主题\n作者用的是 Next 主题，读者可以在下面链接挑选自己喜欢的主题：\n\n[hexo主题](https://hexo.io/themes/)\n\n找到喜欢的下载下来，记住放到theme文件中哦！\n如果想要简洁点，一行代码就ok了，把你要下载主题的地址复制下来，在git终端输入:\n\n```\ngit clone https://github.com/iissnan/hexo-theme-next themes/next\n```\n\n（当然我这个网址是Next主题的下载地址）\n\n### 下面更换主题\n\n首先我们要修改博客的配置文件（注意，是整个博客的配置文件，也就是博客最底层目录下的`_config.yml`，因为之后还会用到，所以我们在此约定一下，将这个配置文件叫做`站点配置文件`，（这是从next的官方文档里学来的名称），找到`theme`选项，把主题切换为你刚刚下载的主题名称 .如下图,将原来的`landscape`删掉，改为`next`,然后保存即可。\n\n![theme](http://pic.davontt.com/picGo/theme.png)\n<center style=\"color:#AAAAAA\">更换主题 next</center>\n\n完成之后主题即可使用。\n\n### 调试\n\n之前在第一步之前我们已经用过调试，说是调试，也就相当于部署。\n\n```\n$ hexo s\n```\n\n然后在浏览器上输入网址：\n```\nhttp://localhost:4000/\n```\n\n即可看到刚刚部署的主题。\n(别忘了不用的时候 Ctrl + C)\n\n### 部署提交\n\n如果你对你的博客修改完毕，想发布到网上，这时候需要部署和提交。\n\n每当你有新的部署的时候，最后要清空一下之前的部署。\n\n```\n$ hexo clean\n```\n\n清理完毕后在进行部署提交\n\n```\n$ hexo g\n```\n\n```\n$ hexo d\n```\n\n期间可能会让你输入SSH，按照之前你设置的输入即可\n\n这时候打开你的网址域名\n\n(你的域名目前是由github提供的二级域名，这也是为什么之前要绑定github账号)\n\n这个二级域名的格式是这样的：\n\n你的id.github.io\n\n试试看，当你打开的时候，出现的界面会和你在本地服务器浏览的界面一样的！\n\n# 结语\n\ngithub pages虽然免费，但毕竟是国外的服务器，国内访问可以稍微缓慢，如果是土豪，可去买一个支持Node.js的国内云空间即可。总之github pages + hexo搭建博客还是挺能折腾人的。但毕竟免费，而且身为技术人员不就是该具备折腾的精神吗？\n","source":"_posts/buildGitPages-1.md","raw":"---\ntitle: 用githubPages+Hexo零基础搭建个人博客\ndate: 2017-7-16 21:28:02\ntags: 博客搭建\n---\n\n# 行动前的准备工作\n\n## 一个想法\n\n在如今的后博客时代，写博客的人越来越少，搭建自己博客的人也越来越少，我看的一些教程也都是好几年以前的。而我搭建博客，写这个教程也有诸多原因。所以如果你要想建立一个博客，你首先得问自己：你为什么要建立一个博客？\n大家可以看看我之前写的一篇文章 [个人博客正式上线]()。\n等你想好了之后，以后的目标也就更明确了。\n\n## 搭建博客基本介绍以及相关名词的解释\n\n事实上，搭建博客有很多方法，也有很多框架。\n\n### 最简单粗暴的\n\n你完全可以自己买个服务器和域名，在服务器里放置你的博客文件，然后再关联到你的域名（当然，域名要解析过，国内域名还要备案）。然后等上一段时间，重新访问就可以了。但这种对新手特别不友好，写网页即你的博客页面需要前端知识，服务器操作需要你的后端知识，完成之后还需要你的运行和维护，如果你每次维护都是把文件拖拖拽拽到你服务器中，想必是极不好的。如果刚好你用的服务器是Linux，那么恭喜你，你又点进了Linux的大坑中，你得学各种命令语言……所以这种看起来是最简单的，实则是最麻烦的。（还好当时我用的是Windows服务器，虽然卡但有界面啊！）\n\n### WordPress博客平台\n\n这是一种傻瓜部署，也是许多人都追捧的一种框架，操作性好，支持手机端更改，动态部署，有PHP后端支持，有SQL数据库。只需输入账户密码等等，完全不需要懂代码。想了解多这里有传送门wordpress官网。（好像写WordPress更适合这篇文章的标题诶）\n\n### Github Pages\n\nGitHub Pages 是啥？讲道理标准的说法我也不会说。它是github发布的一个工具,便于创建自己的主页。（什么？github是什么？它是世界上最大的同性程序员社交网站）这里有github pages 发布时候的一篇文章。\n\n[_（我是传送门）_](https://blog.github.com/2008-12-18-github-pages/)。\n\n如果真要用我自己的话来说，相当于它既给了你一个小服务器，又给了你一个二级域名，而且这些都是免费的，还无限流量。就好像你把页面托管在github上，让更多的人来看。这也是为什么叫github pages。\n\n因此……….\n\n*   如果你有妹子，可以做一个狂炫酷霸拽的静态页面来讨好妹子。\n*   如果你想分享东西但不要求特别多的空间（github对一个项空间有要求,肯定没有百度云之类的大啦），而且觉得QQ空间，新浪微博等等社交平台太Low或不适合，那就用Github Pages\n*   想学前端技术，并且学了前端技术之后还想练练手，那么选github pages欢迎入坑。\n*   github pages 能玩出更多花样。[http://wiki.hotoo.me/](http://wiki.hotoo.me/)\n这是搭建在GH-pages上的个人知识管理的网站，丰富程度令人叹为观止。\n\n    ## 如果你想好用github pages了，那么请继续阅读下面的文章。\n\n### Hexo 和 jekyll\n好了， 既然已经选好用github pages了，那么下面又要面临一些选择了（人生总要面临诸多选择），那就是关于使用静态部署的方式，方式有很多，这里举两个最常用的 Hexo 和 jekyll。\nHexo 等会再说，我先介绍一下 jekyll，实际上它是一种模板转化引擎，\njekyll本身基于Ruby，它实际上也可以看成是一种模板引擎liquid的扩展。jekyll对liquid的主要扩展在于两点：\n*   内建专用于博客网站的对象，可以在模板中引用这些对象：page、site等。\n*   对liquid进行了扩展，方便构建博客网站\n恩…… jekyll确实好，可我还是不喜欢。因为它不怎么优雅，而且里面的主题也确实不怎么好看。你可以到jekyll的主题页面上看看。 [http://jekyllthemes.org/](http://jekyllthemes.org/)\n下面介绍一下我选用的Hexo了。用我学长的话说，Hexo的逼格更高一些。（恩，比较适合我）\n\n而Hexo当然还有其他的优点啦：\n\n*   Jeky基于Ruby实现，安装Jeky需要搭建Ruby环境，在Windows搭建Ruby环境并不是被推荐的，而 Hexo基于NodeJs实现，在Windows上安装NodeJs开发环境简单。\n*   比较直接的另一个原因是在网上查找了很多博客的主题，发现Jekyll官网提供的主题都不怎么好看(可能是个人原因)，而Hexo的主题看的比较顺眼。\n*   两者都支持Markdown语法，这点我非常喜欢。\n\n# Hexo部署过程\n\n## 安装Git Bush\n有人说过 Git是版本管理的未来，它的优点我不在赘述，相关资料也很多，大家可以上网查。\n要想使用Git，首先需要安装它的客户端，推荐在Linux下使用Git，这样会更方便。Windows下安装地址在这，直接点击右边的“Download for Windows”即可。[下载地址](https://git-scm.com/)\n\n![git](http://pic.davontt.com/picGo/gitDownload.png)\n<center style=\"color:#AAAAAA\">Git官网下载地址</center>\n\n## 安装Node.js\n到Node.js官网下载相应平台的最新版本，一路安装即可。\n\n![nodejs](http://pic.davontt.com/picGo/nodejsDownload.png)\n<center style=\"color:#AAAAAA\">node.js官网</center>\n\n## 注册GitHub账户\n这个无需多说\n\n## 检查SSH keys\n\n打开Git bush\n\n![git bush](http://pic.davontt.com/picGo/gitbush.png)\n<center style=\"color:#AAAAAA\">git bush 终端</center>\n\n首先我们需要检查你电脑上现有的ssh key\n\n输入：\n```\n$ cd ~/.ssh\n```\n\n如果显示“No such file or directory”，直接略过下面一步，否则继续。\n\n### 备份和移除原来的ssh key设置：\n```\n$ ls\nconfig\tid_rsa\tid_rsa.pub\tknown_hosts\n$ mkdir key_backup\n$ cp id_rsa* key_backup\n$ rm id_rsa*\n```\n\n\n### 生成新的SSH Key：\n\n```\n$ ssh-keygen -t rsa -C \"邮件地址@youremail.com\"\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/Users/your_user_directory/.ssh/id_rsa):<回车就好>\n```\n\n> 注：这里的邮件地址最好是你的github上注册的邮件地址。\n\n然后系统会要你输入加密串（Passphrase）：\n\n```\nEnter passphrase (empty for no passphrase):<输入加密串>\nEnter same passphrase again:<再次输入加密串>\n```\n\n> 注：当你输入密码的时候，你是看不到密码显示的，无需担心，直接输就是了。\n\n最后看到这样的界面：\n\n![](http://pic.davontt.com/picGo/ssh.png)\n<center style=\"color:#AAAAAA\">git bush 终端</center>\n\n### 添加SSH Key到GitHub：\n\n在本机设置SSH Key之后，需要添加到GitHub上，以完成SSH链接的设置。\n\n用文本编辑工具打开id_rsa.pub文件，如果看不到这个文件，你需要设置显示隐藏文件。准确的复制这个文件的内容，才能保证设置的成功。\n\n在GitHub的主页上点击设置按钮：\n\n\n![github](http://pic.davontt.com/picGo/github-setting.png)\n<center style=\"color:#AAAAAA\">github 主页</center>\n\n\n然后点左边的“SSH and GPG keys”\n\n在 title和key输入相应的内容（title随便起个有意义的名字即可）\n\n\n![ssh](http://pic.davontt.com/picGo/ssh2.png)\n<center style=\"color:#AAAAAA\">在github中设置ssh</center>\n\n\n完成后我们来验证一下是否成功，在命令行上输入：\n```text\n$ ssh -T git@github.com\n```\n\n\n然后在输入你之前设置的密码 回车一下，看到如下图:\n\n![ssh check](http://pic.davontt.com/picGo/ssh-check.png)\n<center style=\"color:#AAAAAA\">验证ssh是否成功</center>\n\n如果不是这张图，而是出现了这些文字：\n\n```\nThe authenticity of host 'github.com (207.97.227.239)' can't be established.\nRSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.\nAre you sure you want to continue connecting (yes/no)?\n```\n\n\n不要紧张，输入yes就好，然后会看到：\n\n```\nHi <em>username</em>! You've successfully authenticated, but GitHub does not provide shell access.\n```\n\n> 注：你的名字是你的github账户的name\n\n成功了\n\n现在你已经成功连接到github账户上了。\n\n## 正式安装Hexo\n\n*   先创建一个文件夹，名字必须为github上的仓库名称，（形如davont.github.io）这个文件夹是用来存放所有关于博客的内容，包括博客主题啦，用的图片，设置更改等等，现在假设这个文件夹叫做 A 。\n*   git 上命令\n\n```\n$ cd A\n```\n\n> 注：你创建A的位置要正确，如果这个文件A的位置在“我的文档”（WIn10改成用户名命名的文件），可以直接 cd A,一般“我的文档”位置在c盘/用户/&lt;你的用户名&gt;。如果A的位置不在“我的文档” ，则需要输入完整路径，即 cd 文件路径 。\n\n*   接着继续输入命令来安装hexo：\n\n```\n$ npm install hexo -g\n```\n\n安装后你可以输入:\n\n```\n$ hexo\n```\n\n来查看所有的hexo命令\n\n![instruction](http://pic.davontt.com/picGo/instruction.png)\n<center style=\"color:#AAAAAA\">hexo 指令</center>\n\n### 初始化博客\n\n输入命令：\n\n```\n$ hexo init\n```\n\n于是出现了如下的界面：\n\n![files](http://pic.davontt.com/picGo/files.png)\n<center style=\"color:#AAAAAA\">hexo init安装目录</center>\n\n解释一下：\n\n*   node_modules：是依赖包\n*   public：存放的是生成的页面\n*   scaffolds：命令生成文章等的模板\n*   source：用命令创建的各种文章\n*   themes：主题\n*   _config.yml：整个博客的配置\n*   db.json：source解析所得到的\n*   package.json：项目所需模块项目的配置信息\n\n做好这些前置工作之后接下来的就是各种配配配置了。\n\n### 配置博客主题等其他设置\n\n其实这个时候你的博客已经弄好了（毕竟初始化了嘛）。你要不信这时候可以在刚才的git终端输入：\n\n```\n$ hexo s\n```\n\n![hexo](http://pic.davontt.com/picGo/hexo-s.png)\n<center style=\"color:#AAAAAA\">hexo s 指令</center>\n\n然后在浏览器上输入网址：\n\n```\nhttp://localhost:4000/\n```\n\n打开即可看到你的初始化后的博客。\n\n这个本地地址是留给你调试测试用的，别忘了当你不想测试的时候用 Ctrl + C 来结束掉哦。\n\n是不是很兴奋？嗯哼？\n\n但这个还是最简陋的博客，名字，内容，装饰什么都没有。\n\n这时候我们可以给hexo 添加点主题\n作者用的是 Next 主题，读者可以在下面链接挑选自己喜欢的主题：\n\n[hexo主题](https://hexo.io/themes/)\n\n找到喜欢的下载下来，记住放到theme文件中哦！\n如果想要简洁点，一行代码就ok了，把你要下载主题的地址复制下来，在git终端输入:\n\n```\ngit clone https://github.com/iissnan/hexo-theme-next themes/next\n```\n\n（当然我这个网址是Next主题的下载地址）\n\n### 下面更换主题\n\n首先我们要修改博客的配置文件（注意，是整个博客的配置文件，也就是博客最底层目录下的`_config.yml`，因为之后还会用到，所以我们在此约定一下，将这个配置文件叫做`站点配置文件`，（这是从next的官方文档里学来的名称），找到`theme`选项，把主题切换为你刚刚下载的主题名称 .如下图,将原来的`landscape`删掉，改为`next`,然后保存即可。\n\n![theme](http://pic.davontt.com/picGo/theme.png)\n<center style=\"color:#AAAAAA\">更换主题 next</center>\n\n完成之后主题即可使用。\n\n### 调试\n\n之前在第一步之前我们已经用过调试，说是调试，也就相当于部署。\n\n```\n$ hexo s\n```\n\n然后在浏览器上输入网址：\n```\nhttp://localhost:4000/\n```\n\n即可看到刚刚部署的主题。\n(别忘了不用的时候 Ctrl + C)\n\n### 部署提交\n\n如果你对你的博客修改完毕，想发布到网上，这时候需要部署和提交。\n\n每当你有新的部署的时候，最后要清空一下之前的部署。\n\n```\n$ hexo clean\n```\n\n清理完毕后在进行部署提交\n\n```\n$ hexo g\n```\n\n```\n$ hexo d\n```\n\n期间可能会让你输入SSH，按照之前你设置的输入即可\n\n这时候打开你的网址域名\n\n(你的域名目前是由github提供的二级域名，这也是为什么之前要绑定github账号)\n\n这个二级域名的格式是这样的：\n\n你的id.github.io\n\n试试看，当你打开的时候，出现的界面会和你在本地服务器浏览的界面一样的！\n\n# 结语\n\ngithub pages虽然免费，但毕竟是国外的服务器，国内访问可以稍微缓慢，如果是土豪，可去买一个支持Node.js的国内云空间即可。总之github pages + hexo搭建博客还是挺能折腾人的。但毕竟免费，而且身为技术人员不就是该具备折腾的精神吗？\n","slug":"buildGitPages-1","published":1,"updated":"2020-12-20T16:36:55.006Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrr9soie00021l5xb39qgbey","content":"<h1 id=\"行动前的准备工作\"><a href=\"#行动前的准备工作\" class=\"headerlink\" title=\"行动前的准备工作\"></a>行动前的准备工作</h1><h2 id=\"一个想法\"><a href=\"#一个想法\" class=\"headerlink\" title=\"一个想法\"></a>一个想法</h2><p>在如今的后博客时代，写博客的人越来越少，搭建自己博客的人也越来越少，我看的一些教程也都是好几年以前的。而我搭建博客，写这个教程也有诸多原因。所以如果你要想建立一个博客，你首先得问自己：你为什么要建立一个博客？<br>大家可以看看我之前写的一篇文章 <a href=\"\">个人博客正式上线</a>。<br>等你想好了之后，以后的目标也就更明确了。</p>\n<h2 id=\"搭建博客基本介绍以及相关名词的解释\"><a href=\"#搭建博客基本介绍以及相关名词的解释\" class=\"headerlink\" title=\"搭建博客基本介绍以及相关名词的解释\"></a>搭建博客基本介绍以及相关名词的解释</h2><p>事实上，搭建博客有很多方法，也有很多框架。</p>\n<h3 id=\"最简单粗暴的\"><a href=\"#最简单粗暴的\" class=\"headerlink\" title=\"最简单粗暴的\"></a>最简单粗暴的</h3><p>你完全可以自己买个服务器和域名，在服务器里放置你的博客文件，然后再关联到你的域名（当然，域名要解析过，国内域名还要备案）。然后等上一段时间，重新访问就可以了。但这种对新手特别不友好，写网页即你的博客页面需要前端知识，服务器操作需要你的后端知识，完成之后还需要你的运行和维护，如果你每次维护都是把文件拖拖拽拽到你服务器中，想必是极不好的。如果刚好你用的服务器是Linux，那么恭喜你，你又点进了Linux的大坑中，你得学各种命令语言……所以这种看起来是最简单的，实则是最麻烦的。（还好当时我用的是Windows服务器，虽然卡但有界面啊！）</p>\n<h3 id=\"WordPress博客平台\"><a href=\"#WordPress博客平台\" class=\"headerlink\" title=\"WordPress博客平台\"></a>WordPress博客平台</h3><p>这是一种傻瓜部署，也是许多人都追捧的一种框架，操作性好，支持手机端更改，动态部署，有PHP后端支持，有SQL数据库。只需输入账户密码等等，完全不需要懂代码。想了解多这里有传送门wordpress官网。（好像写WordPress更适合这篇文章的标题诶）</p>\n<h3 id=\"Github-Pages\"><a href=\"#Github-Pages\" class=\"headerlink\" title=\"Github Pages\"></a>Github Pages</h3><p>GitHub Pages 是啥？讲道理标准的说法我也不会说。它是github发布的一个工具,便于创建自己的主页。（什么？github是什么？它是世界上最大的同性程序员社交网站）这里有github pages 发布时候的一篇文章。</p>\n<p><a href=\"https://blog.github.com/2008-12-18-github-pages/\" target=\"_blank\" rel=\"noopener\"><em>（我是传送门）</em></a>。</p>\n<p>如果真要用我自己的话来说，相当于它既给了你一个小服务器，又给了你一个二级域名，而且这些都是免费的，还无限流量。就好像你把页面托管在github上，让更多的人来看。这也是为什么叫github pages。</p>\n<p>因此……….</p>\n<ul>\n<li><p>如果你有妹子，可以做一个狂炫酷霸拽的静态页面来讨好妹子。</p>\n</li>\n<li><p>如果你想分享东西但不要求特别多的空间（github对一个项空间有要求,肯定没有百度云之类的大啦），而且觉得QQ空间，新浪微博等等社交平台太Low或不适合，那就用Github Pages</p>\n</li>\n<li><p>想学前端技术，并且学了前端技术之后还想练练手，那么选github pages欢迎入坑。</p>\n</li>\n<li><p>github pages 能玩出更多花样。<a href=\"http://wiki.hotoo.me/\" target=\"_blank\" rel=\"noopener\">http://wiki.hotoo.me/</a><br>这是搭建在GH-pages上的个人知识管理的网站，丰富程度令人叹为观止。</p>\n<h2 id=\"如果你想好用github-pages了，那么请继续阅读下面的文章。\"><a href=\"#如果你想好用github-pages了，那么请继续阅读下面的文章。\" class=\"headerlink\" title=\"如果你想好用github pages了，那么请继续阅读下面的文章。\"></a>如果你想好用github pages了，那么请继续阅读下面的文章。</h2></li>\n</ul>\n<h3 id=\"Hexo-和-jekyll\"><a href=\"#Hexo-和-jekyll\" class=\"headerlink\" title=\"Hexo 和 jekyll\"></a>Hexo 和 jekyll</h3><p>好了， 既然已经选好用github pages了，那么下面又要面临一些选择了（人生总要面临诸多选择），那就是关于使用静态部署的方式，方式有很多，这里举两个最常用的 Hexo 和 jekyll。<br>Hexo 等会再说，我先介绍一下 jekyll，实际上它是一种模板转化引擎，<br>jekyll本身基于Ruby，它实际上也可以看成是一种模板引擎liquid的扩展。jekyll对liquid的主要扩展在于两点：</p>\n<ul>\n<li>内建专用于博客网站的对象，可以在模板中引用这些对象：page、site等。</li>\n<li>对liquid进行了扩展，方便构建博客网站<br>恩…… jekyll确实好，可我还是不喜欢。因为它不怎么优雅，而且里面的主题也确实不怎么好看。你可以到jekyll的主题页面上看看。 <a href=\"http://jekyllthemes.org/\" target=\"_blank\" rel=\"noopener\">http://jekyllthemes.org/</a><br>下面介绍一下我选用的Hexo了。用我学长的话说，Hexo的逼格更高一些。（恩，比较适合我）</li>\n</ul>\n<p>而Hexo当然还有其他的优点啦：</p>\n<ul>\n<li>Jeky基于Ruby实现，安装Jeky需要搭建Ruby环境，在Windows搭建Ruby环境并不是被推荐的，而 Hexo基于NodeJs实现，在Windows上安装NodeJs开发环境简单。</li>\n<li>比较直接的另一个原因是在网上查找了很多博客的主题，发现Jekyll官网提供的主题都不怎么好看(可能是个人原因)，而Hexo的主题看的比较顺眼。</li>\n<li>两者都支持Markdown语法，这点我非常喜欢。</li>\n</ul>\n<h1 id=\"Hexo部署过程\"><a href=\"#Hexo部署过程\" class=\"headerlink\" title=\"Hexo部署过程\"></a>Hexo部署过程</h1><h2 id=\"安装Git-Bush\"><a href=\"#安装Git-Bush\" class=\"headerlink\" title=\"安装Git Bush\"></a>安装Git Bush</h2><p>有人说过 Git是版本管理的未来，它的优点我不在赘述，相关资料也很多，大家可以上网查。<br>要想使用Git，首先需要安装它的客户端，推荐在Linux下使用Git，这样会更方便。Windows下安装地址在这，直接点击右边的“Download for Windows”即可。<a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"noopener\">下载地址</a></p>\n<p><img src=\"http://pic.davontt.com/picGo/gitDownload.png\" alt=\"git\"></p>\n<center style=\"color:#AAAAAA\">Git官网下载地址</center>\n\n<h2 id=\"安装Node-js\"><a href=\"#安装Node-js\" class=\"headerlink\" title=\"安装Node.js\"></a>安装Node.js</h2><p>到Node.js官网下载相应平台的最新版本，一路安装即可。</p>\n<p><img src=\"http://pic.davontt.com/picGo/nodejsDownload.png\" alt=\"nodejs\"></p>\n<center style=\"color:#AAAAAA\">node.js官网</center>\n\n<h2 id=\"注册GitHub账户\"><a href=\"#注册GitHub账户\" class=\"headerlink\" title=\"注册GitHub账户\"></a>注册GitHub账户</h2><p>这个无需多说</p>\n<h2 id=\"检查SSH-keys\"><a href=\"#检查SSH-keys\" class=\"headerlink\" title=\"检查SSH keys\"></a>检查SSH keys</h2><p>打开Git bush</p>\n<p><img src=\"http://pic.davontt.com/picGo/gitbush.png\" alt=\"git bush\"></p>\n<center style=\"color:#AAAAAA\">git bush 终端</center>\n\n<p>首先我们需要检查你电脑上现有的ssh key</p>\n<p>输入：</p>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"keyword\">cd</span> ~<span class=\"string\">/.ssh</span></span><br></pre></td></tr></table></figure>\n\n<p>如果显示“No such file or directory”，直接略过下面一步，否则继续。</p>\n<h3 id=\"备份和移除原来的ssh-key设置：\"><a href=\"#备份和移除原来的ssh-key设置：\" class=\"headerlink\" title=\"备份和移除原来的ssh key设置：\"></a>备份和移除原来的ssh key设置：</h3><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ls</span><br><span class=\"line\">config\tid_rsa\tid_rsa.pub\tknown_hosts</span><br><span class=\"line\">$ mkdir key_backup</span><br><span class=\"line\">$ cp id_rsa* key_backup</span><br><span class=\"line\">$ rm id_rsa*</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"生成新的SSH-Key：\"><a href=\"#生成新的SSH-Key：\" class=\"headerlink\" title=\"生成新的SSH Key：\"></a>生成新的SSH Key：</h3><figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen -t rsa -C <span class=\"string\">\"邮件地址@youremail.com\"</span></span><br><span class=\"line\">Generating <span class=\"keyword\">public</span>/<span class=\"keyword\">private</span> rsa <span class=\"built_in\">key</span> pair.</span><br><span class=\"line\">Enter file in which to <span class=\"built_in\">save</span> the <span class=\"built_in\">key</span> (/Users/your_user_directory/.ssh/id_rsa):&lt;回车就好&gt;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注：这里的邮件地址最好是你的github上注册的邮件地址。</p>\n</blockquote>\n<p>然后系统会要你输入加密串（Passphrase）：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Enter passphrase (empty for no passphrase):<span class=\"tag\">&lt;<span class=\"name\">输入加密串</span>&gt;</span></span><br><span class=\"line\">Enter same passphrase again:<span class=\"tag\">&lt;<span class=\"name\">再次输入加密串</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注：当你输入密码的时候，你是看不到密码显示的，无需担心，直接输就是了。</p>\n</blockquote>\n<p>最后看到这样的界面：</p>\n<p><img src=\"http://pic.davontt.com/picGo/ssh.png\" alt=\"\"></p>\n<center style=\"color:#AAAAAA\">git bush 终端</center>\n\n<h3 id=\"添加SSH-Key到GitHub：\"><a href=\"#添加SSH-Key到GitHub：\" class=\"headerlink\" title=\"添加SSH Key到GitHub：\"></a>添加SSH Key到GitHub：</h3><p>在本机设置SSH Key之后，需要添加到GitHub上，以完成SSH链接的设置。</p>\n<p>用文本编辑工具打开id_rsa.pub文件，如果看不到这个文件，你需要设置显示隐藏文件。准确的复制这个文件的内容，才能保证设置的成功。</p>\n<p>在GitHub的主页上点击设置按钮：</p>\n<p><img src=\"http://pic.davontt.com/picGo/github-setting.png\" alt=\"github\"></p>\n<center style=\"color:#AAAAAA\">github 主页</center>\n\n\n<p>然后点左边的“SSH and GPG keys”</p>\n<p>在 title和key输入相应的内容（title随便起个有意义的名字即可）</p>\n<p><img src=\"http://pic.davontt.com/picGo/ssh2.png\" alt=\"ssh\"></p>\n<center style=\"color:#AAAAAA\">在github中设置ssh</center>\n\n\n<p>完成后我们来验证一下是否成功，在命令行上输入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure>\n\n\n<p>然后在输入你之前设置的密码 回车一下，看到如下图:</p>\n<p><img src=\"http://pic.davontt.com/picGo/ssh-check.png\" alt=\"ssh check\"></p>\n<center style=\"color:#AAAAAA\">验证ssh是否成功</center>\n\n<p>如果不是这张图，而是出现了这些文字：</p>\n<figure class=\"highlight vbnet\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The authenticity <span class=\"keyword\">of</span> host <span class=\"comment\">'github.com (207.97.227.239)' can't be established.</span></span><br><span class=\"line\">RSA <span class=\"keyword\">key</span> fingerprint <span class=\"keyword\">is</span> <span class=\"number\">16</span>:<span class=\"number\">27</span>:ac:a5:<span class=\"number\">76</span>:<span class=\"number\">28</span>:<span class=\"number\">2</span>d:<span class=\"number\">36</span>:<span class=\"number\">63</span>:<span class=\"number\">1</span>b:<span class=\"number\">56</span>:<span class=\"number\">4</span>d:eb:df:a6:<span class=\"number\">48.</span></span><br><span class=\"line\">Are you sure you want <span class=\"keyword\">to</span> <span class=\"keyword\">continue</span> connecting (yes/no)?</span><br></pre></td></tr></table></figure>\n\n\n<p>不要紧张，输入yes就好，然后会看到：</p>\n<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hi &lt;em&gt;username&lt;/em&gt;! You<span class=\"symbol\">'ve</span> successfully authenticated, but GitHub does <span class=\"keyword\">not</span> provide shell <span class=\"keyword\">access</span>.</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注：你的名字是你的github账户的name</p>\n</blockquote>\n<p>成功了</p>\n<p>现在你已经成功连接到github账户上了。</p>\n<h2 id=\"正式安装Hexo\"><a href=\"#正式安装Hexo\" class=\"headerlink\" title=\"正式安装Hexo\"></a>正式安装Hexo</h2><ul>\n<li>先创建一个文件夹，名字必须为github上的仓库名称，（形如davont.github.io）这个文件夹是用来存放所有关于博客的内容，包括博客主题啦，用的图片，设置更改等等，现在假设这个文件夹叫做 A 。</li>\n<li>git 上命令</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> A</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注：你创建A的位置要正确，如果这个文件A的位置在“我的文档”（WIn10改成用户名命名的文件），可以直接 cd A,一般“我的文档”位置在c盘/用户/&lt;你的用户名&gt;。如果A的位置不在“我的文档” ，则需要输入完整路径，即 cd 文件路径 。</p>\n</blockquote>\n<ul>\n<li>接着继续输入命令来安装hexo：</li>\n</ul>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm <span class=\"keyword\">install</span> hexo -g</span><br></pre></td></tr></table></figure>\n\n<p>安装后你可以输入:</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>hexo</span><br></pre></td></tr></table></figure>\n\n<p>来查看所有的hexo命令</p>\n<p><img src=\"http://pic.davontt.com/picGo/instruction.png\" alt=\"instruction\"></p>\n<center style=\"color:#AAAAAA\">hexo 指令</center>\n\n<h3 id=\"初始化博客\"><a href=\"#初始化博客\" class=\"headerlink\" title=\"初始化博客\"></a>初始化博客</h3><p>输入命令：</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>hexo init</span><br></pre></td></tr></table></figure>\n\n<p>于是出现了如下的界面：</p>\n<p><img src=\"http://pic.davontt.com/picGo/files.png\" alt=\"files\"></p>\n<center style=\"color:#AAAAAA\">hexo init安装目录</center>\n\n<p>解释一下：</p>\n<ul>\n<li>node_modules：是依赖包</li>\n<li>public：存放的是生成的页面</li>\n<li>scaffolds：命令生成文章等的模板</li>\n<li>source：用命令创建的各种文章</li>\n<li>themes：主题</li>\n<li>_config.yml：整个博客的配置</li>\n<li>db.json：source解析所得到的</li>\n<li>package.json：项目所需模块项目的配置信息</li>\n</ul>\n<p>做好这些前置工作之后接下来的就是各种配配配置了。</p>\n<h3 id=\"配置博客主题等其他设置\"><a href=\"#配置博客主题等其他设置\" class=\"headerlink\" title=\"配置博客主题等其他设置\"></a>配置博客主题等其他设置</h3><p>其实这个时候你的博客已经弄好了（毕竟初始化了嘛）。你要不信这时候可以在刚才的git终端输入：</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>hexo s</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://pic.davontt.com/picGo/hexo-s.png\" alt=\"hexo\"></p>\n<center style=\"color:#AAAAAA\">hexo s 指令</center>\n\n<p>然后在浏览器上输入网址：</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">http:</span><span class=\"comment\">//localhost:4000/</span></span><br></pre></td></tr></table></figure>\n\n<p>打开即可看到你的初始化后的博客。</p>\n<p>这个本地地址是留给你调试测试用的，别忘了当你不想测试的时候用 Ctrl + C 来结束掉哦。</p>\n<p>是不是很兴奋？嗯哼？</p>\n<p>但这个还是最简陋的博客，名字，内容，装饰什么都没有。</p>\n<p>这时候我们可以给hexo 添加点主题<br>作者用的是 Next 主题，读者可以在下面链接挑选自己喜欢的主题：</p>\n<p><a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">hexo主题</a></p>\n<p>找到喜欢的下载下来，记住放到theme文件中哦！<br>如果想要简洁点，一行代码就ok了，把你要下载主题的地址复制下来，在git终端输入:</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone http<span class=\"variable\">s:</span>//github.<span class=\"keyword\">com</span>/iissnan/hexo-theme-<span class=\"keyword\">next</span> themes/<span class=\"keyword\">next</span></span><br></pre></td></tr></table></figure>\n\n<p>（当然我这个网址是Next主题的下载地址）</p>\n<h3 id=\"下面更换主题\"><a href=\"#下面更换主题\" class=\"headerlink\" title=\"下面更换主题\"></a>下面更换主题</h3><p>首先我们要修改博客的配置文件（注意，是整个博客的配置文件，也就是博客最底层目录下的<code>_config.yml</code>，因为之后还会用到，所以我们在此约定一下，将这个配置文件叫做<code>站点配置文件</code>，（这是从next的官方文档里学来的名称），找到<code>theme</code>选项，把主题切换为你刚刚下载的主题名称 .如下图,将原来的<code>landscape</code>删掉，改为<code>next</code>,然后保存即可。</p>\n<p><img src=\"http://pic.davontt.com/picGo/theme.png\" alt=\"theme\"></p>\n<center style=\"color:#AAAAAA\">更换主题 next</center>\n\n<p>完成之后主题即可使用。</p>\n<h3 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h3><p>之前在第一步之前我们已经用过调试，说是调试，也就相当于部署。</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>hexo s</span><br></pre></td></tr></table></figure>\n\n<p>然后在浏览器上输入网址：</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">http:</span><span class=\"comment\">//localhost:4000/</span></span><br></pre></td></tr></table></figure>\n\n<p>即可看到刚刚部署的主题。<br>(别忘了不用的时候 Ctrl + C)</p>\n<h3 id=\"部署提交\"><a href=\"#部署提交\" class=\"headerlink\" title=\"部署提交\"></a>部署提交</h3><p>如果你对你的博客修改完毕，想发布到网上，这时候需要部署和提交。</p>\n<p>每当你有新的部署的时候，最后要清空一下之前的部署。</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>hexo clean</span><br></pre></td></tr></table></figure>\n\n<p>清理完毕后在进行部署提交</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>hexo g</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>hexo d</span><br></pre></td></tr></table></figure>\n\n<p>期间可能会让你输入SSH，按照之前你设置的输入即可</p>\n<p>这时候打开你的网址域名</p>\n<p>(你的域名目前是由github提供的二级域名，这也是为什么之前要绑定github账号)</p>\n<p>这个二级域名的格式是这样的：</p>\n<p>你的id.github.io</p>\n<p>试试看，当你打开的时候，出现的界面会和你在本地服务器浏览的界面一样的！</p>\n<h1 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h1><p>github pages虽然免费，但毕竟是国外的服务器，国内访问可以稍微缓慢，如果是土豪，可去买一个支持Node.js的国内云空间即可。总之github pages + hexo搭建博客还是挺能折腾人的。但毕竟免费，而且身为技术人员不就是该具备折腾的精神吗？</p>\n","site":{"data":{"projects":[{"name":"NJUPT_Esport","url":"https://github.com/Davont/NJUPT_Esport","desc":"一个为在校学生提供体育相关成绩查询、校新闻推送、学生反馈评论的web app"},{"name":"Furniture_Management_System","url":"https://github.com/Davont/Furniture_Management_System","desc":"一个提供家具购买、下单、用户管理、订单管理、商户管理等功能的家具订单CMS系统"},{"name":"weapp-WQPS","url":"https://github.com/Davont/weapp-WQPS","desc":"一个展示型的微信小程序，旨在提供基于卫星传感网的水质监测系统的对外展示平台。"},{"name":"yiban_registration","url":"https://github.com/Davont/yiban_registration","desc":"一个面向社团提供新生加入社团的线上报名表"}]}},"excerpt":"","more":"<h1 id=\"行动前的准备工作\"><a href=\"#行动前的准备工作\" class=\"headerlink\" title=\"行动前的准备工作\"></a>行动前的准备工作</h1><h2 id=\"一个想法\"><a href=\"#一个想法\" class=\"headerlink\" title=\"一个想法\"></a>一个想法</h2><p>在如今的后博客时代，写博客的人越来越少，搭建自己博客的人也越来越少，我看的一些教程也都是好几年以前的。而我搭建博客，写这个教程也有诸多原因。所以如果你要想建立一个博客，你首先得问自己：你为什么要建立一个博客？<br>大家可以看看我之前写的一篇文章 <a href=\"\">个人博客正式上线</a>。<br>等你想好了之后，以后的目标也就更明确了。</p>\n<h2 id=\"搭建博客基本介绍以及相关名词的解释\"><a href=\"#搭建博客基本介绍以及相关名词的解释\" class=\"headerlink\" title=\"搭建博客基本介绍以及相关名词的解释\"></a>搭建博客基本介绍以及相关名词的解释</h2><p>事实上，搭建博客有很多方法，也有很多框架。</p>\n<h3 id=\"最简单粗暴的\"><a href=\"#最简单粗暴的\" class=\"headerlink\" title=\"最简单粗暴的\"></a>最简单粗暴的</h3><p>你完全可以自己买个服务器和域名，在服务器里放置你的博客文件，然后再关联到你的域名（当然，域名要解析过，国内域名还要备案）。然后等上一段时间，重新访问就可以了。但这种对新手特别不友好，写网页即你的博客页面需要前端知识，服务器操作需要你的后端知识，完成之后还需要你的运行和维护，如果你每次维护都是把文件拖拖拽拽到你服务器中，想必是极不好的。如果刚好你用的服务器是Linux，那么恭喜你，你又点进了Linux的大坑中，你得学各种命令语言……所以这种看起来是最简单的，实则是最麻烦的。（还好当时我用的是Windows服务器，虽然卡但有界面啊！）</p>\n<h3 id=\"WordPress博客平台\"><a href=\"#WordPress博客平台\" class=\"headerlink\" title=\"WordPress博客平台\"></a>WordPress博客平台</h3><p>这是一种傻瓜部署，也是许多人都追捧的一种框架，操作性好，支持手机端更改，动态部署，有PHP后端支持，有SQL数据库。只需输入账户密码等等，完全不需要懂代码。想了解多这里有传送门wordpress官网。（好像写WordPress更适合这篇文章的标题诶）</p>\n<h3 id=\"Github-Pages\"><a href=\"#Github-Pages\" class=\"headerlink\" title=\"Github Pages\"></a>Github Pages</h3><p>GitHub Pages 是啥？讲道理标准的说法我也不会说。它是github发布的一个工具,便于创建自己的主页。（什么？github是什么？它是世界上最大的同性程序员社交网站）这里有github pages 发布时候的一篇文章。</p>\n<p><a href=\"https://blog.github.com/2008-12-18-github-pages/\" target=\"_blank\" rel=\"noopener\"><em>（我是传送门）</em></a>。</p>\n<p>如果真要用我自己的话来说，相当于它既给了你一个小服务器，又给了你一个二级域名，而且这些都是免费的，还无限流量。就好像你把页面托管在github上，让更多的人来看。这也是为什么叫github pages。</p>\n<p>因此……….</p>\n<ul>\n<li><p>如果你有妹子，可以做一个狂炫酷霸拽的静态页面来讨好妹子。</p>\n</li>\n<li><p>如果你想分享东西但不要求特别多的空间（github对一个项空间有要求,肯定没有百度云之类的大啦），而且觉得QQ空间，新浪微博等等社交平台太Low或不适合，那就用Github Pages</p>\n</li>\n<li><p>想学前端技术，并且学了前端技术之后还想练练手，那么选github pages欢迎入坑。</p>\n</li>\n<li><p>github pages 能玩出更多花样。<a href=\"http://wiki.hotoo.me/\" target=\"_blank\" rel=\"noopener\">http://wiki.hotoo.me/</a><br>这是搭建在GH-pages上的个人知识管理的网站，丰富程度令人叹为观止。</p>\n<h2 id=\"如果你想好用github-pages了，那么请继续阅读下面的文章。\"><a href=\"#如果你想好用github-pages了，那么请继续阅读下面的文章。\" class=\"headerlink\" title=\"如果你想好用github pages了，那么请继续阅读下面的文章。\"></a>如果你想好用github pages了，那么请继续阅读下面的文章。</h2></li>\n</ul>\n<h3 id=\"Hexo-和-jekyll\"><a href=\"#Hexo-和-jekyll\" class=\"headerlink\" title=\"Hexo 和 jekyll\"></a>Hexo 和 jekyll</h3><p>好了， 既然已经选好用github pages了，那么下面又要面临一些选择了（人生总要面临诸多选择），那就是关于使用静态部署的方式，方式有很多，这里举两个最常用的 Hexo 和 jekyll。<br>Hexo 等会再说，我先介绍一下 jekyll，实际上它是一种模板转化引擎，<br>jekyll本身基于Ruby，它实际上也可以看成是一种模板引擎liquid的扩展。jekyll对liquid的主要扩展在于两点：</p>\n<ul>\n<li>内建专用于博客网站的对象，可以在模板中引用这些对象：page、site等。</li>\n<li>对liquid进行了扩展，方便构建博客网站<br>恩…… jekyll确实好，可我还是不喜欢。因为它不怎么优雅，而且里面的主题也确实不怎么好看。你可以到jekyll的主题页面上看看。 <a href=\"http://jekyllthemes.org/\" target=\"_blank\" rel=\"noopener\">http://jekyllthemes.org/</a><br>下面介绍一下我选用的Hexo了。用我学长的话说，Hexo的逼格更高一些。（恩，比较适合我）</li>\n</ul>\n<p>而Hexo当然还有其他的优点啦：</p>\n<ul>\n<li>Jeky基于Ruby实现，安装Jeky需要搭建Ruby环境，在Windows搭建Ruby环境并不是被推荐的，而 Hexo基于NodeJs实现，在Windows上安装NodeJs开发环境简单。</li>\n<li>比较直接的另一个原因是在网上查找了很多博客的主题，发现Jekyll官网提供的主题都不怎么好看(可能是个人原因)，而Hexo的主题看的比较顺眼。</li>\n<li>两者都支持Markdown语法，这点我非常喜欢。</li>\n</ul>\n<h1 id=\"Hexo部署过程\"><a href=\"#Hexo部署过程\" class=\"headerlink\" title=\"Hexo部署过程\"></a>Hexo部署过程</h1><h2 id=\"安装Git-Bush\"><a href=\"#安装Git-Bush\" class=\"headerlink\" title=\"安装Git Bush\"></a>安装Git Bush</h2><p>有人说过 Git是版本管理的未来，它的优点我不在赘述，相关资料也很多，大家可以上网查。<br>要想使用Git，首先需要安装它的客户端，推荐在Linux下使用Git，这样会更方便。Windows下安装地址在这，直接点击右边的“Download for Windows”即可。<a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"noopener\">下载地址</a></p>\n<p><img src=\"http://pic.davontt.com/picGo/gitDownload.png\" alt=\"git\"></p>\n<center style=\"color:#AAAAAA\">Git官网下载地址</center>\n\n<h2 id=\"安装Node-js\"><a href=\"#安装Node-js\" class=\"headerlink\" title=\"安装Node.js\"></a>安装Node.js</h2><p>到Node.js官网下载相应平台的最新版本，一路安装即可。</p>\n<p><img src=\"http://pic.davontt.com/picGo/nodejsDownload.png\" alt=\"nodejs\"></p>\n<center style=\"color:#AAAAAA\">node.js官网</center>\n\n<h2 id=\"注册GitHub账户\"><a href=\"#注册GitHub账户\" class=\"headerlink\" title=\"注册GitHub账户\"></a>注册GitHub账户</h2><p>这个无需多说</p>\n<h2 id=\"检查SSH-keys\"><a href=\"#检查SSH-keys\" class=\"headerlink\" title=\"检查SSH keys\"></a>检查SSH keys</h2><p>打开Git bush</p>\n<p><img src=\"http://pic.davontt.com/picGo/gitbush.png\" alt=\"git bush\"></p>\n<center style=\"color:#AAAAAA\">git bush 终端</center>\n\n<p>首先我们需要检查你电脑上现有的ssh key</p>\n<p>输入：</p>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"keyword\">cd</span> ~<span class=\"string\">/.ssh</span></span><br></pre></td></tr></table></figure>\n\n<p>如果显示“No such file or directory”，直接略过下面一步，否则继续。</p>\n<h3 id=\"备份和移除原来的ssh-key设置：\"><a href=\"#备份和移除原来的ssh-key设置：\" class=\"headerlink\" title=\"备份和移除原来的ssh key设置：\"></a>备份和移除原来的ssh key设置：</h3><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ls</span><br><span class=\"line\">config\tid_rsa\tid_rsa.pub\tknown_hosts</span><br><span class=\"line\">$ mkdir key_backup</span><br><span class=\"line\">$ cp id_rsa* key_backup</span><br><span class=\"line\">$ rm id_rsa*</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"生成新的SSH-Key：\"><a href=\"#生成新的SSH-Key：\" class=\"headerlink\" title=\"生成新的SSH Key：\"></a>生成新的SSH Key：</h3><figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen -t rsa -C <span class=\"string\">\"邮件地址@youremail.com\"</span></span><br><span class=\"line\">Generating <span class=\"keyword\">public</span>/<span class=\"keyword\">private</span> rsa <span class=\"built_in\">key</span> pair.</span><br><span class=\"line\">Enter file in which to <span class=\"built_in\">save</span> the <span class=\"built_in\">key</span> (/Users/your_user_directory/.ssh/id_rsa):&lt;回车就好&gt;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注：这里的邮件地址最好是你的github上注册的邮件地址。</p>\n</blockquote>\n<p>然后系统会要你输入加密串（Passphrase）：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Enter passphrase (empty for no passphrase):<span class=\"tag\">&lt;<span class=\"name\">输入加密串</span>&gt;</span></span><br><span class=\"line\">Enter same passphrase again:<span class=\"tag\">&lt;<span class=\"name\">再次输入加密串</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注：当你输入密码的时候，你是看不到密码显示的，无需担心，直接输就是了。</p>\n</blockquote>\n<p>最后看到这样的界面：</p>\n<p><img src=\"http://pic.davontt.com/picGo/ssh.png\" alt=\"\"></p>\n<center style=\"color:#AAAAAA\">git bush 终端</center>\n\n<h3 id=\"添加SSH-Key到GitHub：\"><a href=\"#添加SSH-Key到GitHub：\" class=\"headerlink\" title=\"添加SSH Key到GitHub：\"></a>添加SSH Key到GitHub：</h3><p>在本机设置SSH Key之后，需要添加到GitHub上，以完成SSH链接的设置。</p>\n<p>用文本编辑工具打开id_rsa.pub文件，如果看不到这个文件，你需要设置显示隐藏文件。准确的复制这个文件的内容，才能保证设置的成功。</p>\n<p>在GitHub的主页上点击设置按钮：</p>\n<p><img src=\"http://pic.davontt.com/picGo/github-setting.png\" alt=\"github\"></p>\n<center style=\"color:#AAAAAA\">github 主页</center>\n\n\n<p>然后点左边的“SSH and GPG keys”</p>\n<p>在 title和key输入相应的内容（title随便起个有意义的名字即可）</p>\n<p><img src=\"http://pic.davontt.com/picGo/ssh2.png\" alt=\"ssh\"></p>\n<center style=\"color:#AAAAAA\">在github中设置ssh</center>\n\n\n<p>完成后我们来验证一下是否成功，在命令行上输入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure>\n\n\n<p>然后在输入你之前设置的密码 回车一下，看到如下图:</p>\n<p><img src=\"http://pic.davontt.com/picGo/ssh-check.png\" alt=\"ssh check\"></p>\n<center style=\"color:#AAAAAA\">验证ssh是否成功</center>\n\n<p>如果不是这张图，而是出现了这些文字：</p>\n<figure class=\"highlight vbnet\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The authenticity <span class=\"keyword\">of</span> host <span class=\"comment\">'github.com (207.97.227.239)' can't be established.</span></span><br><span class=\"line\">RSA <span class=\"keyword\">key</span> fingerprint <span class=\"keyword\">is</span> <span class=\"number\">16</span>:<span class=\"number\">27</span>:ac:a5:<span class=\"number\">76</span>:<span class=\"number\">28</span>:<span class=\"number\">2</span>d:<span class=\"number\">36</span>:<span class=\"number\">63</span>:<span class=\"number\">1</span>b:<span class=\"number\">56</span>:<span class=\"number\">4</span>d:eb:df:a6:<span class=\"number\">48.</span></span><br><span class=\"line\">Are you sure you want <span class=\"keyword\">to</span> <span class=\"keyword\">continue</span> connecting (yes/no)?</span><br></pre></td></tr></table></figure>\n\n\n<p>不要紧张，输入yes就好，然后会看到：</p>\n<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hi &lt;em&gt;username&lt;/em&gt;! You<span class=\"symbol\">'ve</span> successfully authenticated, but GitHub does <span class=\"keyword\">not</span> provide shell <span class=\"keyword\">access</span>.</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注：你的名字是你的github账户的name</p>\n</blockquote>\n<p>成功了</p>\n<p>现在你已经成功连接到github账户上了。</p>\n<h2 id=\"正式安装Hexo\"><a href=\"#正式安装Hexo\" class=\"headerlink\" title=\"正式安装Hexo\"></a>正式安装Hexo</h2><ul>\n<li>先创建一个文件夹，名字必须为github上的仓库名称，（形如davont.github.io）这个文件夹是用来存放所有关于博客的内容，包括博客主题啦，用的图片，设置更改等等，现在假设这个文件夹叫做 A 。</li>\n<li>git 上命令</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> A</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注：你创建A的位置要正确，如果这个文件A的位置在“我的文档”（WIn10改成用户名命名的文件），可以直接 cd A,一般“我的文档”位置在c盘/用户/&lt;你的用户名&gt;。如果A的位置不在“我的文档” ，则需要输入完整路径，即 cd 文件路径 。</p>\n</blockquote>\n<ul>\n<li>接着继续输入命令来安装hexo：</li>\n</ul>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm <span class=\"keyword\">install</span> hexo -g</span><br></pre></td></tr></table></figure>\n\n<p>安装后你可以输入:</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>hexo</span><br></pre></td></tr></table></figure>\n\n<p>来查看所有的hexo命令</p>\n<p><img src=\"http://pic.davontt.com/picGo/instruction.png\" alt=\"instruction\"></p>\n<center style=\"color:#AAAAAA\">hexo 指令</center>\n\n<h3 id=\"初始化博客\"><a href=\"#初始化博客\" class=\"headerlink\" title=\"初始化博客\"></a>初始化博客</h3><p>输入命令：</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>hexo init</span><br></pre></td></tr></table></figure>\n\n<p>于是出现了如下的界面：</p>\n<p><img src=\"http://pic.davontt.com/picGo/files.png\" alt=\"files\"></p>\n<center style=\"color:#AAAAAA\">hexo init安装目录</center>\n\n<p>解释一下：</p>\n<ul>\n<li>node_modules：是依赖包</li>\n<li>public：存放的是生成的页面</li>\n<li>scaffolds：命令生成文章等的模板</li>\n<li>source：用命令创建的各种文章</li>\n<li>themes：主题</li>\n<li>_config.yml：整个博客的配置</li>\n<li>db.json：source解析所得到的</li>\n<li>package.json：项目所需模块项目的配置信息</li>\n</ul>\n<p>做好这些前置工作之后接下来的就是各种配配配置了。</p>\n<h3 id=\"配置博客主题等其他设置\"><a href=\"#配置博客主题等其他设置\" class=\"headerlink\" title=\"配置博客主题等其他设置\"></a>配置博客主题等其他设置</h3><p>其实这个时候你的博客已经弄好了（毕竟初始化了嘛）。你要不信这时候可以在刚才的git终端输入：</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>hexo s</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://pic.davontt.com/picGo/hexo-s.png\" alt=\"hexo\"></p>\n<center style=\"color:#AAAAAA\">hexo s 指令</center>\n\n<p>然后在浏览器上输入网址：</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">http:</span><span class=\"comment\">//localhost:4000/</span></span><br></pre></td></tr></table></figure>\n\n<p>打开即可看到你的初始化后的博客。</p>\n<p>这个本地地址是留给你调试测试用的，别忘了当你不想测试的时候用 Ctrl + C 来结束掉哦。</p>\n<p>是不是很兴奋？嗯哼？</p>\n<p>但这个还是最简陋的博客，名字，内容，装饰什么都没有。</p>\n<p>这时候我们可以给hexo 添加点主题<br>作者用的是 Next 主题，读者可以在下面链接挑选自己喜欢的主题：</p>\n<p><a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">hexo主题</a></p>\n<p>找到喜欢的下载下来，记住放到theme文件中哦！<br>如果想要简洁点，一行代码就ok了，把你要下载主题的地址复制下来，在git终端输入:</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone http<span class=\"variable\">s:</span>//github.<span class=\"keyword\">com</span>/iissnan/hexo-theme-<span class=\"keyword\">next</span> themes/<span class=\"keyword\">next</span></span><br></pre></td></tr></table></figure>\n\n<p>（当然我这个网址是Next主题的下载地址）</p>\n<h3 id=\"下面更换主题\"><a href=\"#下面更换主题\" class=\"headerlink\" title=\"下面更换主题\"></a>下面更换主题</h3><p>首先我们要修改博客的配置文件（注意，是整个博客的配置文件，也就是博客最底层目录下的<code>_config.yml</code>，因为之后还会用到，所以我们在此约定一下，将这个配置文件叫做<code>站点配置文件</code>，（这是从next的官方文档里学来的名称），找到<code>theme</code>选项，把主题切换为你刚刚下载的主题名称 .如下图,将原来的<code>landscape</code>删掉，改为<code>next</code>,然后保存即可。</p>\n<p><img src=\"http://pic.davontt.com/picGo/theme.png\" alt=\"theme\"></p>\n<center style=\"color:#AAAAAA\">更换主题 next</center>\n\n<p>完成之后主题即可使用。</p>\n<h3 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h3><p>之前在第一步之前我们已经用过调试，说是调试，也就相当于部署。</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>hexo s</span><br></pre></td></tr></table></figure>\n\n<p>然后在浏览器上输入网址：</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">http:</span><span class=\"comment\">//localhost:4000/</span></span><br></pre></td></tr></table></figure>\n\n<p>即可看到刚刚部署的主题。<br>(别忘了不用的时候 Ctrl + C)</p>\n<h3 id=\"部署提交\"><a href=\"#部署提交\" class=\"headerlink\" title=\"部署提交\"></a>部署提交</h3><p>如果你对你的博客修改完毕，想发布到网上，这时候需要部署和提交。</p>\n<p>每当你有新的部署的时候，最后要清空一下之前的部署。</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>hexo clean</span><br></pre></td></tr></table></figure>\n\n<p>清理完毕后在进行部署提交</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>hexo g</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>hexo d</span><br></pre></td></tr></table></figure>\n\n<p>期间可能会让你输入SSH，按照之前你设置的输入即可</p>\n<p>这时候打开你的网址域名</p>\n<p>(你的域名目前是由github提供的二级域名，这也是为什么之前要绑定github账号)</p>\n<p>这个二级域名的格式是这样的：</p>\n<p>你的id.github.io</p>\n<p>试试看，当你打开的时候，出现的界面会和你在本地服务器浏览的界面一样的！</p>\n<h1 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h1><p>github pages虽然免费，但毕竟是国外的服务器，国内访问可以稍微缓慢，如果是土豪，可去买一个支持Node.js的国内云空间即可。总之github pages + hexo搭建博客还是挺能折腾人的。但毕竟免费，而且身为技术人员不就是该具备折腾的精神吗？</p>\n"},{"title":"《浪掷》——大学生活有感","date":"2018-01-04T18:43:03.000Z","_content":"# 前言\n大学生活已过一半，有好有坏，现在你可能会感觉有点后悔，如果当初没加入学生会，直接加入科协搞技术多好，如果只专心学习，提高绩点，争取保研，那也是不错的选择。如果大二没去参加实验室项目，而是花更多时间陪前女友，现在会不会是另一种结果。但不管怎样，不过你选择做了什么，你都会后悔，就像张晓风的《浪掷》。\n\n# 正文\n\n开学的时候，我要他们把自己形容一下，因为我是他们的导师，想多知道他们一点。\n\n大一的孩子，新从成功岭下来，从某一点上看来，也只像高四罢了，他们倒是很合作，一个一个把自己尽其所能的描述了一番。\n\n等他们说完了，我忽然觉得惊讶不可置信，他们中间照我来看分成两类，有一类说“我从前爱玩，不太用功，从现在起，我想要好好读点书”，另一类说：“我从前就只知道读书，从现在起我要好好参加些社团，或者去郊游。”\n\n奇怪的是，两者都有轻微的追悔和遗憾。\n\n我于是想起一段三十多年前的旧事，那时流行一首电影插曲（大约是叫《渔光曲》吧），阿姨舅舅都热心播唱，我虽小，听到“月儿弯弯照九州”觉得是可以同意的，却对其中另一句大为疑惑。\n\n“舅舅，为什么要唱‘小妹妹青春水里流’呢？”\n\n“因为她是渔家女嘛，渔家女打鱼不能上学，当然就浪费青春啦！”\n\n我当时只知道自己心里立刻不服气起来，但因年纪太小，不会说理由，不知怎么吵，只好不说话，但心中那股不服倒也可怕，可以埋藏三十多年。\n\n等读中学听到“春色恼人”，又不死心的去问，春天这么好，为什么反而好到令人生恼，别人也答不上来，那讨厌的甚至眨眨狎邪的眼光，暗示春天给人的恼和“性”有关。但事情一定不是这样的，一定另有一个道理，那道理我隐约知道，却说不出来。\n\n更大以后，读《浮士德》，那些埋藏许久的问句都汇拢过来，我隐隐知道那里有番解释了。\n\n年老的浮士德，对着满屋子自己做了一生的学问，在典籍册页的阴影中他乍乍瞥见窗外的四月，歌声传来，是庆祝复活节的喧哗队伍。那一霎间，他懊悔了，他觉得自己的一生都抛掷了，他以为只要再让他年轻一次，一切都会改观。中国元杂剧里老旦上场照例都要说一句“花有重开日，人无再少年”，说得淡然而确定，也不知看戏的人惊不惊动。而浮士德却以灵魂押注，换来第二度的少年以及因少年才“可能拥有的种种可能”。可怜的浮士德，学究天人，却不知道生命是一桩太好的东西，好到你无论选择什么方式度过，都像是一种浪费。\n\n生命有如一枚神话世界里的珍珠，出于砂砾，归于砂砾，晶光莹润的只是中间这一段短短的幻象啊！然而，使我们颠之倒之甘之苦之的不正是这短短的一段吗？珍珠和生命还有另一个类同之处，那就是你倾家荡产去买一粒珍珠是可以的，但反过来你要拿珍珠换衣换食却是荒廖的，就连镶成珠坠挂在美人胸前也是无奈的，无非使两者合作一场“慢动作的人老珠黄”罢了。珍珠只是它圆灿含彩的自己，你只能束手无策的看着它，你只能欢喜或喟然——因为你及时赶上了它出于砂砾且必然还原为砂砾之间的这一段灿然。\n\n而浮士德不知道——或者执意不知道，他要的是另一次“可能”，像一个不知是由于技术不好或是运气不好的赌徒，总以为只要再让他玩一盘，他准能翻本。三十多年前想跟舅舅辩的一句话我现在终于懂得该怎么说了，打渔的女子如果算是浪掷青春的话，挑柴的女子岂不也是吗？读书的名义虽好听，而令人眼目为之昏耗，脊骨为之佝偻，还不该算是青春的虚掷吗？此外，一场刻骨的爱情就不算烟云过眼吗？一番功名利禄就不算滚滚尘埃吗？不是啊，青春太好，好到你无论怎么过都觉浪掷，回头一看，都要生悔。\n\n“春色恼人”那句话现在也懂了，世上的事最不怕的应该就是“兵来有将可挡，水来有土能掩”，只要有对策就不怕对方出招。怕就怕在一个人正心心地和现实生活斗阵，打成平手之际，忽然阵外冒出一个叫宇宙大化的对手，他斜里杀出一记叫“春天”的绝招，身为人类的我们真是措手不及。对着排天倒海而来的桃红柳绿，对着蚀骨的花香，夺魂的阳光，生命的豪奢绝艳怎能不令我们张皇无措，当此之际，真是不做什么既要懊悔——做了什么也要懊悔。春色之叫人气恼跺脚，就是气在我们无招以对回头来想我导师班上的学生，聪明颖悟，却不免一半为自己的用功后悔，一半为自己的爱玩后悔——只因太年轻啊，只因年轻啊，以为只要换一个方式，一切就扭转过来而无憾了。孩子们，不是啊，真的不是这样的！生命太完美，青春太完美，甚至连一场匆匆的春天都太完美，完美到像喜庆节日里一个孩子手上的气球，飞了会哭，破了会哭，就连一日日空瘪下去也是要令人哀哭的啊！\n\n所以，年轻的孩子，连这个简单的道理你难道也看不出来吗？生命是一个大债主，我们怎么混都是他的积欠户，既然如此，干脆宽下心来，来个“债多不愁”吧！既然青春是一场“无论做什么都觉是浪掷”的憾意，何不反过来想想，那么，也几乎等于“无论诚恳的做了什么都不必言悔”，因为你或读书或玩，或作战，或打渔，恰恰好就是另一个人叹气说他遗憾没做成的。\n\n——然而，是这样的吗？不是这样的吗？在生命的面前我可以大发职业病做一个把别人都看作孩子的教师吗？抑或我仍然只是一个太年轻的蒙童，一个不信不服欲有所辩而又语焉不详的蒙童呢？\n\n摘自《张晓风精选集》，北京燕山出版社，2010年版\n\n","source":"_posts/freshman.md","raw":"---\ntitle: 《浪掷》——大学生活有感\ndate: 2018-01-05 02:43:03\ntags: 随笔\n---\n# 前言\n大学生活已过一半，有好有坏，现在你可能会感觉有点后悔，如果当初没加入学生会，直接加入科协搞技术多好，如果只专心学习，提高绩点，争取保研，那也是不错的选择。如果大二没去参加实验室项目，而是花更多时间陪前女友，现在会不会是另一种结果。但不管怎样，不过你选择做了什么，你都会后悔，就像张晓风的《浪掷》。\n\n# 正文\n\n开学的时候，我要他们把自己形容一下，因为我是他们的导师，想多知道他们一点。\n\n大一的孩子，新从成功岭下来，从某一点上看来，也只像高四罢了，他们倒是很合作，一个一个把自己尽其所能的描述了一番。\n\n等他们说完了，我忽然觉得惊讶不可置信，他们中间照我来看分成两类，有一类说“我从前爱玩，不太用功，从现在起，我想要好好读点书”，另一类说：“我从前就只知道读书，从现在起我要好好参加些社团，或者去郊游。”\n\n奇怪的是，两者都有轻微的追悔和遗憾。\n\n我于是想起一段三十多年前的旧事，那时流行一首电影插曲（大约是叫《渔光曲》吧），阿姨舅舅都热心播唱，我虽小，听到“月儿弯弯照九州”觉得是可以同意的，却对其中另一句大为疑惑。\n\n“舅舅，为什么要唱‘小妹妹青春水里流’呢？”\n\n“因为她是渔家女嘛，渔家女打鱼不能上学，当然就浪费青春啦！”\n\n我当时只知道自己心里立刻不服气起来，但因年纪太小，不会说理由，不知怎么吵，只好不说话，但心中那股不服倒也可怕，可以埋藏三十多年。\n\n等读中学听到“春色恼人”，又不死心的去问，春天这么好，为什么反而好到令人生恼，别人也答不上来，那讨厌的甚至眨眨狎邪的眼光，暗示春天给人的恼和“性”有关。但事情一定不是这样的，一定另有一个道理，那道理我隐约知道，却说不出来。\n\n更大以后，读《浮士德》，那些埋藏许久的问句都汇拢过来，我隐隐知道那里有番解释了。\n\n年老的浮士德，对着满屋子自己做了一生的学问，在典籍册页的阴影中他乍乍瞥见窗外的四月，歌声传来，是庆祝复活节的喧哗队伍。那一霎间，他懊悔了，他觉得自己的一生都抛掷了，他以为只要再让他年轻一次，一切都会改观。中国元杂剧里老旦上场照例都要说一句“花有重开日，人无再少年”，说得淡然而确定，也不知看戏的人惊不惊动。而浮士德却以灵魂押注，换来第二度的少年以及因少年才“可能拥有的种种可能”。可怜的浮士德，学究天人，却不知道生命是一桩太好的东西，好到你无论选择什么方式度过，都像是一种浪费。\n\n生命有如一枚神话世界里的珍珠，出于砂砾，归于砂砾，晶光莹润的只是中间这一段短短的幻象啊！然而，使我们颠之倒之甘之苦之的不正是这短短的一段吗？珍珠和生命还有另一个类同之处，那就是你倾家荡产去买一粒珍珠是可以的，但反过来你要拿珍珠换衣换食却是荒廖的，就连镶成珠坠挂在美人胸前也是无奈的，无非使两者合作一场“慢动作的人老珠黄”罢了。珍珠只是它圆灿含彩的自己，你只能束手无策的看着它，你只能欢喜或喟然——因为你及时赶上了它出于砂砾且必然还原为砂砾之间的这一段灿然。\n\n而浮士德不知道——或者执意不知道，他要的是另一次“可能”，像一个不知是由于技术不好或是运气不好的赌徒，总以为只要再让他玩一盘，他准能翻本。三十多年前想跟舅舅辩的一句话我现在终于懂得该怎么说了，打渔的女子如果算是浪掷青春的话，挑柴的女子岂不也是吗？读书的名义虽好听，而令人眼目为之昏耗，脊骨为之佝偻，还不该算是青春的虚掷吗？此外，一场刻骨的爱情就不算烟云过眼吗？一番功名利禄就不算滚滚尘埃吗？不是啊，青春太好，好到你无论怎么过都觉浪掷，回头一看，都要生悔。\n\n“春色恼人”那句话现在也懂了，世上的事最不怕的应该就是“兵来有将可挡，水来有土能掩”，只要有对策就不怕对方出招。怕就怕在一个人正心心地和现实生活斗阵，打成平手之际，忽然阵外冒出一个叫宇宙大化的对手，他斜里杀出一记叫“春天”的绝招，身为人类的我们真是措手不及。对着排天倒海而来的桃红柳绿，对着蚀骨的花香，夺魂的阳光，生命的豪奢绝艳怎能不令我们张皇无措，当此之际，真是不做什么既要懊悔——做了什么也要懊悔。春色之叫人气恼跺脚，就是气在我们无招以对回头来想我导师班上的学生，聪明颖悟，却不免一半为自己的用功后悔，一半为自己的爱玩后悔——只因太年轻啊，只因年轻啊，以为只要换一个方式，一切就扭转过来而无憾了。孩子们，不是啊，真的不是这样的！生命太完美，青春太完美，甚至连一场匆匆的春天都太完美，完美到像喜庆节日里一个孩子手上的气球，飞了会哭，破了会哭，就连一日日空瘪下去也是要令人哀哭的啊！\n\n所以，年轻的孩子，连这个简单的道理你难道也看不出来吗？生命是一个大债主，我们怎么混都是他的积欠户，既然如此，干脆宽下心来，来个“债多不愁”吧！既然青春是一场“无论做什么都觉是浪掷”的憾意，何不反过来想想，那么，也几乎等于“无论诚恳的做了什么都不必言悔”，因为你或读书或玩，或作战，或打渔，恰恰好就是另一个人叹气说他遗憾没做成的。\n\n——然而，是这样的吗？不是这样的吗？在生命的面前我可以大发职业病做一个把别人都看作孩子的教师吗？抑或我仍然只是一个太年轻的蒙童，一个不信不服欲有所辩而又语焉不详的蒙童呢？\n\n摘自《张晓风精选集》，北京燕山出版社，2010年版\n\n","slug":"freshman","published":1,"updated":"2020-12-20T16:36:55.007Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrr9soil00041l5xftjmgr4u","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>大学生活已过一半，有好有坏，现在你可能会感觉有点后悔，如果当初没加入学生会，直接加入科协搞技术多好，如果只专心学习，提高绩点，争取保研，那也是不错的选择。如果大二没去参加实验室项目，而是花更多时间陪前女友，现在会不会是另一种结果。但不管怎样，不过你选择做了什么，你都会后悔，就像张晓风的《浪掷》。</p>\n<h1 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h1><p>开学的时候，我要他们把自己形容一下，因为我是他们的导师，想多知道他们一点。</p>\n<p>大一的孩子，新从成功岭下来，从某一点上看来，也只像高四罢了，他们倒是很合作，一个一个把自己尽其所能的描述了一番。</p>\n<p>等他们说完了，我忽然觉得惊讶不可置信，他们中间照我来看分成两类，有一类说“我从前爱玩，不太用功，从现在起，我想要好好读点书”，另一类说：“我从前就只知道读书，从现在起我要好好参加些社团，或者去郊游。”</p>\n<p>奇怪的是，两者都有轻微的追悔和遗憾。</p>\n<p>我于是想起一段三十多年前的旧事，那时流行一首电影插曲（大约是叫《渔光曲》吧），阿姨舅舅都热心播唱，我虽小，听到“月儿弯弯照九州”觉得是可以同意的，却对其中另一句大为疑惑。</p>\n<p>“舅舅，为什么要唱‘小妹妹青春水里流’呢？”</p>\n<p>“因为她是渔家女嘛，渔家女打鱼不能上学，当然就浪费青春啦！”</p>\n<p>我当时只知道自己心里立刻不服气起来，但因年纪太小，不会说理由，不知怎么吵，只好不说话，但心中那股不服倒也可怕，可以埋藏三十多年。</p>\n<p>等读中学听到“春色恼人”，又不死心的去问，春天这么好，为什么反而好到令人生恼，别人也答不上来，那讨厌的甚至眨眨狎邪的眼光，暗示春天给人的恼和“性”有关。但事情一定不是这样的，一定另有一个道理，那道理我隐约知道，却说不出来。</p>\n<p>更大以后，读《浮士德》，那些埋藏许久的问句都汇拢过来，我隐隐知道那里有番解释了。</p>\n<p>年老的浮士德，对着满屋子自己做了一生的学问，在典籍册页的阴影中他乍乍瞥见窗外的四月，歌声传来，是庆祝复活节的喧哗队伍。那一霎间，他懊悔了，他觉得自己的一生都抛掷了，他以为只要再让他年轻一次，一切都会改观。中国元杂剧里老旦上场照例都要说一句“花有重开日，人无再少年”，说得淡然而确定，也不知看戏的人惊不惊动。而浮士德却以灵魂押注，换来第二度的少年以及因少年才“可能拥有的种种可能”。可怜的浮士德，学究天人，却不知道生命是一桩太好的东西，好到你无论选择什么方式度过，都像是一种浪费。</p>\n<p>生命有如一枚神话世界里的珍珠，出于砂砾，归于砂砾，晶光莹润的只是中间这一段短短的幻象啊！然而，使我们颠之倒之甘之苦之的不正是这短短的一段吗？珍珠和生命还有另一个类同之处，那就是你倾家荡产去买一粒珍珠是可以的，但反过来你要拿珍珠换衣换食却是荒廖的，就连镶成珠坠挂在美人胸前也是无奈的，无非使两者合作一场“慢动作的人老珠黄”罢了。珍珠只是它圆灿含彩的自己，你只能束手无策的看着它，你只能欢喜或喟然——因为你及时赶上了它出于砂砾且必然还原为砂砾之间的这一段灿然。</p>\n<p>而浮士德不知道——或者执意不知道，他要的是另一次“可能”，像一个不知是由于技术不好或是运气不好的赌徒，总以为只要再让他玩一盘，他准能翻本。三十多年前想跟舅舅辩的一句话我现在终于懂得该怎么说了，打渔的女子如果算是浪掷青春的话，挑柴的女子岂不也是吗？读书的名义虽好听，而令人眼目为之昏耗，脊骨为之佝偻，还不该算是青春的虚掷吗？此外，一场刻骨的爱情就不算烟云过眼吗？一番功名利禄就不算滚滚尘埃吗？不是啊，青春太好，好到你无论怎么过都觉浪掷，回头一看，都要生悔。</p>\n<p>“春色恼人”那句话现在也懂了，世上的事最不怕的应该就是“兵来有将可挡，水来有土能掩”，只要有对策就不怕对方出招。怕就怕在一个人正心心地和现实生活斗阵，打成平手之际，忽然阵外冒出一个叫宇宙大化的对手，他斜里杀出一记叫“春天”的绝招，身为人类的我们真是措手不及。对着排天倒海而来的桃红柳绿，对着蚀骨的花香，夺魂的阳光，生命的豪奢绝艳怎能不令我们张皇无措，当此之际，真是不做什么既要懊悔——做了什么也要懊悔。春色之叫人气恼跺脚，就是气在我们无招以对回头来想我导师班上的学生，聪明颖悟，却不免一半为自己的用功后悔，一半为自己的爱玩后悔——只因太年轻啊，只因年轻啊，以为只要换一个方式，一切就扭转过来而无憾了。孩子们，不是啊，真的不是这样的！生命太完美，青春太完美，甚至连一场匆匆的春天都太完美，完美到像喜庆节日里一个孩子手上的气球，飞了会哭，破了会哭，就连一日日空瘪下去也是要令人哀哭的啊！</p>\n<p>所以，年轻的孩子，连这个简单的道理你难道也看不出来吗？生命是一个大债主，我们怎么混都是他的积欠户，既然如此，干脆宽下心来，来个“债多不愁”吧！既然青春是一场“无论做什么都觉是浪掷”的憾意，何不反过来想想，那么，也几乎等于“无论诚恳的做了什么都不必言悔”，因为你或读书或玩，或作战，或打渔，恰恰好就是另一个人叹气说他遗憾没做成的。</p>\n<p>——然而，是这样的吗？不是这样的吗？在生命的面前我可以大发职业病做一个把别人都看作孩子的教师吗？抑或我仍然只是一个太年轻的蒙童，一个不信不服欲有所辩而又语焉不详的蒙童呢？</p>\n<p>摘自《张晓风精选集》，北京燕山出版社，2010年版</p>\n","site":{"data":{"projects":[{"name":"NJUPT_Esport","url":"https://github.com/Davont/NJUPT_Esport","desc":"一个为在校学生提供体育相关成绩查询、校新闻推送、学生反馈评论的web app"},{"name":"Furniture_Management_System","url":"https://github.com/Davont/Furniture_Management_System","desc":"一个提供家具购买、下单、用户管理、订单管理、商户管理等功能的家具订单CMS系统"},{"name":"weapp-WQPS","url":"https://github.com/Davont/weapp-WQPS","desc":"一个展示型的微信小程序，旨在提供基于卫星传感网的水质监测系统的对外展示平台。"},{"name":"yiban_registration","url":"https://github.com/Davont/yiban_registration","desc":"一个面向社团提供新生加入社团的线上报名表"}]}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>大学生活已过一半，有好有坏，现在你可能会感觉有点后悔，如果当初没加入学生会，直接加入科协搞技术多好，如果只专心学习，提高绩点，争取保研，那也是不错的选择。如果大二没去参加实验室项目，而是花更多时间陪前女友，现在会不会是另一种结果。但不管怎样，不过你选择做了什么，你都会后悔，就像张晓风的《浪掷》。</p>\n<h1 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h1><p>开学的时候，我要他们把自己形容一下，因为我是他们的导师，想多知道他们一点。</p>\n<p>大一的孩子，新从成功岭下来，从某一点上看来，也只像高四罢了，他们倒是很合作，一个一个把自己尽其所能的描述了一番。</p>\n<p>等他们说完了，我忽然觉得惊讶不可置信，他们中间照我来看分成两类，有一类说“我从前爱玩，不太用功，从现在起，我想要好好读点书”，另一类说：“我从前就只知道读书，从现在起我要好好参加些社团，或者去郊游。”</p>\n<p>奇怪的是，两者都有轻微的追悔和遗憾。</p>\n<p>我于是想起一段三十多年前的旧事，那时流行一首电影插曲（大约是叫《渔光曲》吧），阿姨舅舅都热心播唱，我虽小，听到“月儿弯弯照九州”觉得是可以同意的，却对其中另一句大为疑惑。</p>\n<p>“舅舅，为什么要唱‘小妹妹青春水里流’呢？”</p>\n<p>“因为她是渔家女嘛，渔家女打鱼不能上学，当然就浪费青春啦！”</p>\n<p>我当时只知道自己心里立刻不服气起来，但因年纪太小，不会说理由，不知怎么吵，只好不说话，但心中那股不服倒也可怕，可以埋藏三十多年。</p>\n<p>等读中学听到“春色恼人”，又不死心的去问，春天这么好，为什么反而好到令人生恼，别人也答不上来，那讨厌的甚至眨眨狎邪的眼光，暗示春天给人的恼和“性”有关。但事情一定不是这样的，一定另有一个道理，那道理我隐约知道，却说不出来。</p>\n<p>更大以后，读《浮士德》，那些埋藏许久的问句都汇拢过来，我隐隐知道那里有番解释了。</p>\n<p>年老的浮士德，对着满屋子自己做了一生的学问，在典籍册页的阴影中他乍乍瞥见窗外的四月，歌声传来，是庆祝复活节的喧哗队伍。那一霎间，他懊悔了，他觉得自己的一生都抛掷了，他以为只要再让他年轻一次，一切都会改观。中国元杂剧里老旦上场照例都要说一句“花有重开日，人无再少年”，说得淡然而确定，也不知看戏的人惊不惊动。而浮士德却以灵魂押注，换来第二度的少年以及因少年才“可能拥有的种种可能”。可怜的浮士德，学究天人，却不知道生命是一桩太好的东西，好到你无论选择什么方式度过，都像是一种浪费。</p>\n<p>生命有如一枚神话世界里的珍珠，出于砂砾，归于砂砾，晶光莹润的只是中间这一段短短的幻象啊！然而，使我们颠之倒之甘之苦之的不正是这短短的一段吗？珍珠和生命还有另一个类同之处，那就是你倾家荡产去买一粒珍珠是可以的，但反过来你要拿珍珠换衣换食却是荒廖的，就连镶成珠坠挂在美人胸前也是无奈的，无非使两者合作一场“慢动作的人老珠黄”罢了。珍珠只是它圆灿含彩的自己，你只能束手无策的看着它，你只能欢喜或喟然——因为你及时赶上了它出于砂砾且必然还原为砂砾之间的这一段灿然。</p>\n<p>而浮士德不知道——或者执意不知道，他要的是另一次“可能”，像一个不知是由于技术不好或是运气不好的赌徒，总以为只要再让他玩一盘，他准能翻本。三十多年前想跟舅舅辩的一句话我现在终于懂得该怎么说了，打渔的女子如果算是浪掷青春的话，挑柴的女子岂不也是吗？读书的名义虽好听，而令人眼目为之昏耗，脊骨为之佝偻，还不该算是青春的虚掷吗？此外，一场刻骨的爱情就不算烟云过眼吗？一番功名利禄就不算滚滚尘埃吗？不是啊，青春太好，好到你无论怎么过都觉浪掷，回头一看，都要生悔。</p>\n<p>“春色恼人”那句话现在也懂了，世上的事最不怕的应该就是“兵来有将可挡，水来有土能掩”，只要有对策就不怕对方出招。怕就怕在一个人正心心地和现实生活斗阵，打成平手之际，忽然阵外冒出一个叫宇宙大化的对手，他斜里杀出一记叫“春天”的绝招，身为人类的我们真是措手不及。对着排天倒海而来的桃红柳绿，对着蚀骨的花香，夺魂的阳光，生命的豪奢绝艳怎能不令我们张皇无措，当此之际，真是不做什么既要懊悔——做了什么也要懊悔。春色之叫人气恼跺脚，就是气在我们无招以对回头来想我导师班上的学生，聪明颖悟，却不免一半为自己的用功后悔，一半为自己的爱玩后悔——只因太年轻啊，只因年轻啊，以为只要换一个方式，一切就扭转过来而无憾了。孩子们，不是啊，真的不是这样的！生命太完美，青春太完美，甚至连一场匆匆的春天都太完美，完美到像喜庆节日里一个孩子手上的气球，飞了会哭，破了会哭，就连一日日空瘪下去也是要令人哀哭的啊！</p>\n<p>所以，年轻的孩子，连这个简单的道理你难道也看不出来吗？生命是一个大债主，我们怎么混都是他的积欠户，既然如此，干脆宽下心来，来个“债多不愁”吧！既然青春是一场“无论做什么都觉是浪掷”的憾意，何不反过来想想，那么，也几乎等于“无论诚恳的做了什么都不必言悔”，因为你或读书或玩，或作战，或打渔，恰恰好就是另一个人叹气说他遗憾没做成的。</p>\n<p>——然而，是这样的吗？不是这样的吗？在生命的面前我可以大发职业病做一个把别人都看作孩子的教师吗？抑或我仍然只是一个太年轻的蒙童，一个不信不服欲有所辩而又语焉不详的蒙童呢？</p>\n<p>摘自《张晓风精选集》，北京燕山出版社，2010年版</p>\n"},{"title":"阿里云+centOS7 端口设置","date":"2018-10-04T11:41:35.000Z","_content":"# 前言\n对于刚买了阿里云服务器的小白，想用它实现自己的页面展示。但在搭建的过程中，难免会有些低级错误，比如“我什么都搭建好了，为什么登陆网址打不开呢”、“怎么又报错，明明按照教程来的？”、“是不是我电脑有什么毛病啊？”等等，今天，又学到了，原来我的端口一直没开放，以及阿里云的安全组没有设置。\n\n# 阿里云安全组设置\n\n## 购买时默认安全组\n不知道安全组的用户在新购服务器上部署网站，常常会发现不能正常访问。这是因为在购买阿里云ECS服务器的时候，阿里云默认安全组只放行了ICMP协议、SSH 22端口、RDP 3389端口三个端口，访问网站的80或443端口并没有放行。如果需要网站访问，那么用户在购买ECS服务器的时候需要勾选http80端口和https 443端口\n\n## 购买后配置安全组\n首先，需要在阿里云的控制台找到对应的ecs服务器实例。点击这个实例的管理进入实例的详情界面，然后进入本实例的安全组，再点击配置规则。\n\n![aliyun](http://pic.davontt.com/picGo/port.png)\n<center style=\"color:#AAAAAA\">配置安全组</center>\n\n点击添加安全组规则。\n![aliyun](http://pic.davontt.com/picGo/port2.png)\n<center style=\"color:#AAAAAA\">添加安全组规则</center>\n\n现在这台服务器是专用网络的，那这边的网卡类型的话就内网。\n- 协议类型，我们选择自定义的TCP；\n- 端口范围，这里要求填写的是一个范围，所以我们要写80/80。\n- 授权对象，这里我们要让所有人都可以访问，所以我们要写0.0.0.0/0\n- 优先级，填一到一百的数字，数字越小，优先级越高好了。\n\n点击确定我们在安全组里的80端口就已经打开了。其实，安全组还用于设置内网互通拦截特定的IP和端口，只允许特定的IP来登录服务器，或者只允许读取访问公网上的某个特定的IP。\n\n## 常见默认端口\n\n- 22：SSH（安全登录）、SCP（文件传输）、端口号重定向\n- 21：FTP（文件传输）协议代理服务器常用端口\n- 39000/40000：FTP被动模式常用端口\n- 80/8080/3128/8081/9098：HTTP协议代理服务器常用端口号\n- 1080：SOCKS代理协议服务器常用端口号\n- 23：Telnet（不安全的文本传送）\n- 69(udp)：TFTP（Trivial File Transfer Protocol）\n- 25：SMTP Simple Mail Transfer Protocol（E-mail），默认端口号\n\n# 端口设置\n\n- CentOS 7 默认关闭80端口，永久开启80端口命令如下：\n\n```\nfirewall-cmd --zone=public --add-port=80/tcp --permanent\n```\n```\n#命令含义\n--zone #作用域 \n--add-port=80/tcp #添加端口，格式为：端口/通讯协议 \n--permanent #永久生效\n```\n- 重启防火墙\n```\nsystemctl restart firewalld.service\n```\n- 查看监听(Listen)的端口\n```\nnetstat -lntp\n```\n\n- 检查80端口被哪个进程占用\n```\nnetstat -lnp | grep 80\n```\n","source":"_posts/centos7-setting.md","raw":"---\ntitle: 阿里云+centOS7 端口设置\ndate: 2018-10-04 19:41:35\ntags: linux\n---\n# 前言\n对于刚买了阿里云服务器的小白，想用它实现自己的页面展示。但在搭建的过程中，难免会有些低级错误，比如“我什么都搭建好了，为什么登陆网址打不开呢”、“怎么又报错，明明按照教程来的？”、“是不是我电脑有什么毛病啊？”等等，今天，又学到了，原来我的端口一直没开放，以及阿里云的安全组没有设置。\n\n# 阿里云安全组设置\n\n## 购买时默认安全组\n不知道安全组的用户在新购服务器上部署网站，常常会发现不能正常访问。这是因为在购买阿里云ECS服务器的时候，阿里云默认安全组只放行了ICMP协议、SSH 22端口、RDP 3389端口三个端口，访问网站的80或443端口并没有放行。如果需要网站访问，那么用户在购买ECS服务器的时候需要勾选http80端口和https 443端口\n\n## 购买后配置安全组\n首先，需要在阿里云的控制台找到对应的ecs服务器实例。点击这个实例的管理进入实例的详情界面，然后进入本实例的安全组，再点击配置规则。\n\n![aliyun](http://pic.davontt.com/picGo/port.png)\n<center style=\"color:#AAAAAA\">配置安全组</center>\n\n点击添加安全组规则。\n![aliyun](http://pic.davontt.com/picGo/port2.png)\n<center style=\"color:#AAAAAA\">添加安全组规则</center>\n\n现在这台服务器是专用网络的，那这边的网卡类型的话就内网。\n- 协议类型，我们选择自定义的TCP；\n- 端口范围，这里要求填写的是一个范围，所以我们要写80/80。\n- 授权对象，这里我们要让所有人都可以访问，所以我们要写0.0.0.0/0\n- 优先级，填一到一百的数字，数字越小，优先级越高好了。\n\n点击确定我们在安全组里的80端口就已经打开了。其实，安全组还用于设置内网互通拦截特定的IP和端口，只允许特定的IP来登录服务器，或者只允许读取访问公网上的某个特定的IP。\n\n## 常见默认端口\n\n- 22：SSH（安全登录）、SCP（文件传输）、端口号重定向\n- 21：FTP（文件传输）协议代理服务器常用端口\n- 39000/40000：FTP被动模式常用端口\n- 80/8080/3128/8081/9098：HTTP协议代理服务器常用端口号\n- 1080：SOCKS代理协议服务器常用端口号\n- 23：Telnet（不安全的文本传送）\n- 69(udp)：TFTP（Trivial File Transfer Protocol）\n- 25：SMTP Simple Mail Transfer Protocol（E-mail），默认端口号\n\n# 端口设置\n\n- CentOS 7 默认关闭80端口，永久开启80端口命令如下：\n\n```\nfirewall-cmd --zone=public --add-port=80/tcp --permanent\n```\n```\n#命令含义\n--zone #作用域 \n--add-port=80/tcp #添加端口，格式为：端口/通讯协议 \n--permanent #永久生效\n```\n- 重启防火墙\n```\nsystemctl restart firewalld.service\n```\n- 查看监听(Listen)的端口\n```\nnetstat -lntp\n```\n\n- 检查80端口被哪个进程占用\n```\nnetstat -lnp | grep 80\n```\n","slug":"centos7-setting","published":1,"updated":"2020-12-20T16:36:55.007Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrr9soio00051l5x4aewetyi","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>对于刚买了阿里云服务器的小白，想用它实现自己的页面展示。但在搭建的过程中，难免会有些低级错误，比如“我什么都搭建好了，为什么登陆网址打不开呢”、“怎么又报错，明明按照教程来的？”、“是不是我电脑有什么毛病啊？”等等，今天，又学到了，原来我的端口一直没开放，以及阿里云的安全组没有设置。</p>\n<h1 id=\"阿里云安全组设置\"><a href=\"#阿里云安全组设置\" class=\"headerlink\" title=\"阿里云安全组设置\"></a>阿里云安全组设置</h1><h2 id=\"购买时默认安全组\"><a href=\"#购买时默认安全组\" class=\"headerlink\" title=\"购买时默认安全组\"></a>购买时默认安全组</h2><p>不知道安全组的用户在新购服务器上部署网站，常常会发现不能正常访问。这是因为在购买阿里云ECS服务器的时候，阿里云默认安全组只放行了ICMP协议、SSH 22端口、RDP 3389端口三个端口，访问网站的80或443端口并没有放行。如果需要网站访问，那么用户在购买ECS服务器的时候需要勾选http80端口和https 443端口</p>\n<h2 id=\"购买后配置安全组\"><a href=\"#购买后配置安全组\" class=\"headerlink\" title=\"购买后配置安全组\"></a>购买后配置安全组</h2><p>首先，需要在阿里云的控制台找到对应的ecs服务器实例。点击这个实例的管理进入实例的详情界面，然后进入本实例的安全组，再点击配置规则。</p>\n<p><img src=\"http://pic.davontt.com/picGo/port.png\" alt=\"aliyun\"></p>\n<center style=\"color:#AAAAAA\">配置安全组</center>\n\n<p>点击添加安全组规则。<br><img src=\"http://pic.davontt.com/picGo/port2.png\" alt=\"aliyun\"></p>\n<center style=\"color:#AAAAAA\">添加安全组规则</center>\n\n<p>现在这台服务器是专用网络的，那这边的网卡类型的话就内网。</p>\n<ul>\n<li>协议类型，我们选择自定义的TCP；</li>\n<li>端口范围，这里要求填写的是一个范围，所以我们要写80/80。</li>\n<li>授权对象，这里我们要让所有人都可以访问，所以我们要写0.0.0.0/0</li>\n<li>优先级，填一到一百的数字，数字越小，优先级越高好了。</li>\n</ul>\n<p>点击确定我们在安全组里的80端口就已经打开了。其实，安全组还用于设置内网互通拦截特定的IP和端口，只允许特定的IP来登录服务器，或者只允许读取访问公网上的某个特定的IP。</p>\n<h2 id=\"常见默认端口\"><a href=\"#常见默认端口\" class=\"headerlink\" title=\"常见默认端口\"></a>常见默认端口</h2><ul>\n<li>22：SSH（安全登录）、SCP（文件传输）、端口号重定向</li>\n<li>21：FTP（文件传输）协议代理服务器常用端口</li>\n<li>39000/40000：FTP被动模式常用端口</li>\n<li>80/8080/3128/8081/9098：HTTP协议代理服务器常用端口号</li>\n<li>1080：SOCKS代理协议服务器常用端口号</li>\n<li>23：Telnet（不安全的文本传送）</li>\n<li>69(udp)：TFTP（Trivial File Transfer Protocol）</li>\n<li>25：SMTP Simple Mail Transfer Protocol（E-mail），默认端口号</li>\n</ul>\n<h1 id=\"端口设置\"><a href=\"#端口设置\" class=\"headerlink\" title=\"端口设置\"></a>端口设置</h1><ul>\n<li>CentOS 7 默认关闭80端口，永久开启80端口命令如下：</li>\n</ul>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd <span class=\"attribute\">--zone</span>=public <span class=\"attribute\">--add-port</span>=80/tcp --permanent</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight dsconfig\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#命令含义</span></span><br><span class=\"line\"><span class=\"built_in\">--zone</span> <span class=\"comment\">#作用域 </span></span><br><span class=\"line\"><span class=\"built_in\">--add-port=80/tcp</span> <span class=\"comment\">#添加端口，格式为：端口/通讯协议 </span></span><br><span class=\"line\"><span class=\"built_in\">--permanent</span> <span class=\"comment\">#永久生效</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>重启防火墙</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">systemctl</span> <span class=\"selector-tag\">restart</span> <span class=\"selector-tag\">firewalld</span><span class=\"selector-class\">.service</span></span><br></pre></td></tr></table></figure></li>\n<li><p>查看监听(Listen)的端口</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">netstat -lntp</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>检查80端口被哪个进程占用</p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -lnp <span class=\"string\">| grep 80</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{"projects":[{"name":"NJUPT_Esport","url":"https://github.com/Davont/NJUPT_Esport","desc":"一个为在校学生提供体育相关成绩查询、校新闻推送、学生反馈评论的web app"},{"name":"Furniture_Management_System","url":"https://github.com/Davont/Furniture_Management_System","desc":"一个提供家具购买、下单、用户管理、订单管理、商户管理等功能的家具订单CMS系统"},{"name":"weapp-WQPS","url":"https://github.com/Davont/weapp-WQPS","desc":"一个展示型的微信小程序，旨在提供基于卫星传感网的水质监测系统的对外展示平台。"},{"name":"yiban_registration","url":"https://github.com/Davont/yiban_registration","desc":"一个面向社团提供新生加入社团的线上报名表"}]}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>对于刚买了阿里云服务器的小白，想用它实现自己的页面展示。但在搭建的过程中，难免会有些低级错误，比如“我什么都搭建好了，为什么登陆网址打不开呢”、“怎么又报错，明明按照教程来的？”、“是不是我电脑有什么毛病啊？”等等，今天，又学到了，原来我的端口一直没开放，以及阿里云的安全组没有设置。</p>\n<h1 id=\"阿里云安全组设置\"><a href=\"#阿里云安全组设置\" class=\"headerlink\" title=\"阿里云安全组设置\"></a>阿里云安全组设置</h1><h2 id=\"购买时默认安全组\"><a href=\"#购买时默认安全组\" class=\"headerlink\" title=\"购买时默认安全组\"></a>购买时默认安全组</h2><p>不知道安全组的用户在新购服务器上部署网站，常常会发现不能正常访问。这是因为在购买阿里云ECS服务器的时候，阿里云默认安全组只放行了ICMP协议、SSH 22端口、RDP 3389端口三个端口，访问网站的80或443端口并没有放行。如果需要网站访问，那么用户在购买ECS服务器的时候需要勾选http80端口和https 443端口</p>\n<h2 id=\"购买后配置安全组\"><a href=\"#购买后配置安全组\" class=\"headerlink\" title=\"购买后配置安全组\"></a>购买后配置安全组</h2><p>首先，需要在阿里云的控制台找到对应的ecs服务器实例。点击这个实例的管理进入实例的详情界面，然后进入本实例的安全组，再点击配置规则。</p>\n<p><img src=\"http://pic.davontt.com/picGo/port.png\" alt=\"aliyun\"></p>\n<center style=\"color:#AAAAAA\">配置安全组</center>\n\n<p>点击添加安全组规则。<br><img src=\"http://pic.davontt.com/picGo/port2.png\" alt=\"aliyun\"></p>\n<center style=\"color:#AAAAAA\">添加安全组规则</center>\n\n<p>现在这台服务器是专用网络的，那这边的网卡类型的话就内网。</p>\n<ul>\n<li>协议类型，我们选择自定义的TCP；</li>\n<li>端口范围，这里要求填写的是一个范围，所以我们要写80/80。</li>\n<li>授权对象，这里我们要让所有人都可以访问，所以我们要写0.0.0.0/0</li>\n<li>优先级，填一到一百的数字，数字越小，优先级越高好了。</li>\n</ul>\n<p>点击确定我们在安全组里的80端口就已经打开了。其实，安全组还用于设置内网互通拦截特定的IP和端口，只允许特定的IP来登录服务器，或者只允许读取访问公网上的某个特定的IP。</p>\n<h2 id=\"常见默认端口\"><a href=\"#常见默认端口\" class=\"headerlink\" title=\"常见默认端口\"></a>常见默认端口</h2><ul>\n<li>22：SSH（安全登录）、SCP（文件传输）、端口号重定向</li>\n<li>21：FTP（文件传输）协议代理服务器常用端口</li>\n<li>39000/40000：FTP被动模式常用端口</li>\n<li>80/8080/3128/8081/9098：HTTP协议代理服务器常用端口号</li>\n<li>1080：SOCKS代理协议服务器常用端口号</li>\n<li>23：Telnet（不安全的文本传送）</li>\n<li>69(udp)：TFTP（Trivial File Transfer Protocol）</li>\n<li>25：SMTP Simple Mail Transfer Protocol（E-mail），默认端口号</li>\n</ul>\n<h1 id=\"端口设置\"><a href=\"#端口设置\" class=\"headerlink\" title=\"端口设置\"></a>端口设置</h1><ul>\n<li>CentOS 7 默认关闭80端口，永久开启80端口命令如下：</li>\n</ul>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd <span class=\"attribute\">--zone</span>=public <span class=\"attribute\">--add-port</span>=80/tcp --permanent</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight dsconfig\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#命令含义</span></span><br><span class=\"line\"><span class=\"built_in\">--zone</span> <span class=\"comment\">#作用域 </span></span><br><span class=\"line\"><span class=\"built_in\">--add-port=80/tcp</span> <span class=\"comment\">#添加端口，格式为：端口/通讯协议 </span></span><br><span class=\"line\"><span class=\"built_in\">--permanent</span> <span class=\"comment\">#永久生效</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>重启防火墙</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">systemctl</span> <span class=\"selector-tag\">restart</span> <span class=\"selector-tag\">firewalld</span><span class=\"selector-class\">.service</span></span><br></pre></td></tr></table></figure></li>\n<li><p>查看监听(Listen)的端口</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">netstat -lntp</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>检查80端口被哪个进程占用</p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -lnp <span class=\"string\">| grep 80</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n"},{"title":"域名绑定以及Hexo的NexT主题相关参数配置","date":"2017-07-30T12:04:44.000Z","_content":"## 域名\n\n### 购买域名（未收商家广告费一分一毛）\n\n*   域名的话，确实有免费的，不过比较麻烦而且并不是永久免费。如果你想在以后搞个大新闻的话，还是建议买个域名，而且一般第一年买的域名也比较便宜。在此我列两个个比较有名的域名注册公司：[新网](http://www.xinnet.com/)、[万网](https://wanwang.aliyun.com/)。\n\n*   其实你也可以通过其他平台来购买，比如腾讯云、阿里云。其他的诸如京东云，坚果云，我没了解过，不过大差不差吧。\n> 备注:腾讯云服务器学生机真的便宜，一个月一块钱，而且域名后缀为cn的享有学生价1块钱一年（仅限第一年）。阿里云服务器一个月10块，但速度比腾讯云块，而且自我感觉逼格更高。（万网就是阿里旗下的）\n\n*   至于怎么购买的话，构思一个自己喜欢的域名，然后后缀选择恰当的就行了。别忘了购买之后要解析域名，别忘了解析后要等一段时间才会更新。\n> 最好选择国外的域名后缀，国内的要备案，忒麻烦。国外例如用.me就挺好。\n\n### 域名绑定\n\n在你hexo文件的中找到source文件，在文件中创建一个CNAME文件，不要加后缀，然后用编辑器打开CNAME文件，里面添加你的域名即可（不要加http://）\n\n> 如果没有编辑器（最好还是下一个例如vscode，vim，notepad++，Sublime Text），可以创建一个txt文档，里面加上你的域名，然后把txt后缀给去掉。\n\n![domain](http://pic.davontt.com/picGo/domain.png)\n<center style=\"color:#AAAAAA\">新建文件CNAME</center>\n\n例如我的域名是 davont.com , 以后就不用输入 davont.github.io\n\n![domain](http://pic.davontt.com/picGo/domain2.png)\n<center style=\"color:#AAAAAA\">写上自己的域名</center>\n\n填写完了之后再重新部署到github pages上（部署简写命令hexo d -g)\n\n> 如果输入你的域名后，打不开界面，可能是你的域名没有解析，这个要到你购买域名的网站上去域名解析，网站若不提供去DNSpod.如果解析完成仍打不开的话，得需要等一段时间,一天左右，国际DNS更新要24小时。\n\n## NexT主题配置\n\n### 参考文档\n\n首先，我推荐两个官方参考文档。\n\n[Hexo (我是传送门)](https://hexo.io/zh-cn/)\n\n[Next (我是传送门)](http://theme-next.iissnan.com/)\n\n其实这两个文档已解决基本问题，有什么要求直接按照文档去改。\n\n*   如果改博客整体框架例如博客名称、作者、网址、目录等等，那么直接在你的博客文件家目录找到_config.yml文件（中文名叫做站点配置文件），编辑即可。（当然需要编辑器打开啦）\n\n\n如果想在NexT主题里更改，在theme中找到next，然后在next找到_config.yml文件，编辑即可。\n\n\n### 基本操作\n\nblog目录下的_config.yml里有很多配置项，先解释几个初学者最在意的：\n\n*   title: 博客主页标题\n*   url: 你的博客网址，例如[http://yoursite.com](http://yoursite.com)\n*   permalink: 每篇文章的URL链接格式，例如:year/:month/:title/，注意不要漏掉最后的/\n*   date_format: 每篇文章日期的格式，如YYYY-MM-DD会显示2014-01-01，具体格式设置方法参考\n*   moment.js\n*   per_page: 每页显示的文章数量\n\n修改_config.yml要格外注意，每项冒号后面都加一个空格，另外不要出现tab。\n\n### 语言设置\n> language: zh-Hans\n\n### NexT 主题更换\n\nNexT 主题目前提供了3中风格类似，但是又有点不同的主题风格，可以通过修改 主题配置文件 中的 Scheme 值来启用其中一种风格，例如我的博客用的是 Pisces 分栏风格，只要把另外两个用#注释掉即可\n\n```\n#Schemes\n\n#scheme: Muse\n\n#scheme: Mist\nscheme: Pisces\n\n```\n\n### 发布新文章\n\n在终端输入:\n\n```\n$ hexo new &quot;文章名称&quot;\n```\n\n之后在source/_posts目录下面，多了一个以md后缀的文件，文件名就是你刚刚设置的文章名称\n\n打开之后我们会看到：\n\n```\n---\n\ntitle: new article\n\ndate: 2014-11-01 20:10:33\n\ntags:\n\n---\n```\n\n文件的开头是属性，采用统一的yaml格式，用三条短横线分隔。下面是文章正文。\n\n文章的正文支持markdown格式，建议你先学习一下它的语法。markdown不像html似的一大堆标签，很简单，只有几个符号。\n\n新建、删除或修改文章后，不需要重启hexo server，刷新一下即可预览。","source":"_posts/domainSetting.md","raw":"---\ntitle: 域名绑定以及Hexo的NexT主题相关参数配置\ndate: 2017-07-30 20:04:44\ntags: 博客搭建\n---\n## 域名\n\n### 购买域名（未收商家广告费一分一毛）\n\n*   域名的话，确实有免费的，不过比较麻烦而且并不是永久免费。如果你想在以后搞个大新闻的话，还是建议买个域名，而且一般第一年买的域名也比较便宜。在此我列两个个比较有名的域名注册公司：[新网](http://www.xinnet.com/)、[万网](https://wanwang.aliyun.com/)。\n\n*   其实你也可以通过其他平台来购买，比如腾讯云、阿里云。其他的诸如京东云，坚果云，我没了解过，不过大差不差吧。\n> 备注:腾讯云服务器学生机真的便宜，一个月一块钱，而且域名后缀为cn的享有学生价1块钱一年（仅限第一年）。阿里云服务器一个月10块，但速度比腾讯云块，而且自我感觉逼格更高。（万网就是阿里旗下的）\n\n*   至于怎么购买的话，构思一个自己喜欢的域名，然后后缀选择恰当的就行了。别忘了购买之后要解析域名，别忘了解析后要等一段时间才会更新。\n> 最好选择国外的域名后缀，国内的要备案，忒麻烦。国外例如用.me就挺好。\n\n### 域名绑定\n\n在你hexo文件的中找到source文件，在文件中创建一个CNAME文件，不要加后缀，然后用编辑器打开CNAME文件，里面添加你的域名即可（不要加http://）\n\n> 如果没有编辑器（最好还是下一个例如vscode，vim，notepad++，Sublime Text），可以创建一个txt文档，里面加上你的域名，然后把txt后缀给去掉。\n\n![domain](http://pic.davontt.com/picGo/domain.png)\n<center style=\"color:#AAAAAA\">新建文件CNAME</center>\n\n例如我的域名是 davont.com , 以后就不用输入 davont.github.io\n\n![domain](http://pic.davontt.com/picGo/domain2.png)\n<center style=\"color:#AAAAAA\">写上自己的域名</center>\n\n填写完了之后再重新部署到github pages上（部署简写命令hexo d -g)\n\n> 如果输入你的域名后，打不开界面，可能是你的域名没有解析，这个要到你购买域名的网站上去域名解析，网站若不提供去DNSpod.如果解析完成仍打不开的话，得需要等一段时间,一天左右，国际DNS更新要24小时。\n\n## NexT主题配置\n\n### 参考文档\n\n首先，我推荐两个官方参考文档。\n\n[Hexo (我是传送门)](https://hexo.io/zh-cn/)\n\n[Next (我是传送门)](http://theme-next.iissnan.com/)\n\n其实这两个文档已解决基本问题，有什么要求直接按照文档去改。\n\n*   如果改博客整体框架例如博客名称、作者、网址、目录等等，那么直接在你的博客文件家目录找到_config.yml文件（中文名叫做站点配置文件），编辑即可。（当然需要编辑器打开啦）\n\n\n如果想在NexT主题里更改，在theme中找到next，然后在next找到_config.yml文件，编辑即可。\n\n\n### 基本操作\n\nblog目录下的_config.yml里有很多配置项，先解释几个初学者最在意的：\n\n*   title: 博客主页标题\n*   url: 你的博客网址，例如[http://yoursite.com](http://yoursite.com)\n*   permalink: 每篇文章的URL链接格式，例如:year/:month/:title/，注意不要漏掉最后的/\n*   date_format: 每篇文章日期的格式，如YYYY-MM-DD会显示2014-01-01，具体格式设置方法参考\n*   moment.js\n*   per_page: 每页显示的文章数量\n\n修改_config.yml要格外注意，每项冒号后面都加一个空格，另外不要出现tab。\n\n### 语言设置\n> language: zh-Hans\n\n### NexT 主题更换\n\nNexT 主题目前提供了3中风格类似，但是又有点不同的主题风格，可以通过修改 主题配置文件 中的 Scheme 值来启用其中一种风格，例如我的博客用的是 Pisces 分栏风格，只要把另外两个用#注释掉即可\n\n```\n#Schemes\n\n#scheme: Muse\n\n#scheme: Mist\nscheme: Pisces\n\n```\n\n### 发布新文章\n\n在终端输入:\n\n```\n$ hexo new &quot;文章名称&quot;\n```\n\n之后在source/_posts目录下面，多了一个以md后缀的文件，文件名就是你刚刚设置的文章名称\n\n打开之后我们会看到：\n\n```\n---\n\ntitle: new article\n\ndate: 2014-11-01 20:10:33\n\ntags:\n\n---\n```\n\n文件的开头是属性，采用统一的yaml格式，用三条短横线分隔。下面是文章正文。\n\n文章的正文支持markdown格式，建议你先学习一下它的语法。markdown不像html似的一大堆标签，很简单，只有几个符号。\n\n新建、删除或修改文章后，不需要重启hexo server，刷新一下即可预览。","slug":"domainSetting","published":1,"updated":"2020-12-20T16:36:55.007Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrr9soir00061l5xf6qseaek","content":"<h2 id=\"域名\"><a href=\"#域名\" class=\"headerlink\" title=\"域名\"></a>域名</h2><h3 id=\"购买域名（未收商家广告费一分一毛）\"><a href=\"#购买域名（未收商家广告费一分一毛）\" class=\"headerlink\" title=\"购买域名（未收商家广告费一分一毛）\"></a>购买域名（未收商家广告费一分一毛）</h3><ul>\n<li><p>域名的话，确实有免费的，不过比较麻烦而且并不是永久免费。如果你想在以后搞个大新闻的话，还是建议买个域名，而且一般第一年买的域名也比较便宜。在此我列两个个比较有名的域名注册公司：<a href=\"http://www.xinnet.com/\" target=\"_blank\" rel=\"noopener\">新网</a>、<a href=\"https://wanwang.aliyun.com/\" target=\"_blank\" rel=\"noopener\">万网</a>。</p>\n</li>\n<li><p>其实你也可以通过其他平台来购买，比如腾讯云、阿里云。其他的诸如京东云，坚果云，我没了解过，不过大差不差吧。</p>\n<blockquote>\n<p>备注:腾讯云服务器学生机真的便宜，一个月一块钱，而且域名后缀为cn的享有学生价1块钱一年（仅限第一年）。阿里云服务器一个月10块，但速度比腾讯云块，而且自我感觉逼格更高。（万网就是阿里旗下的）</p>\n</blockquote>\n</li>\n<li><p>至于怎么购买的话，构思一个自己喜欢的域名，然后后缀选择恰当的就行了。别忘了购买之后要解析域名，别忘了解析后要等一段时间才会更新。</p>\n<blockquote>\n<p>最好选择国外的域名后缀，国内的要备案，忒麻烦。国外例如用.me就挺好。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"域名绑定\"><a href=\"#域名绑定\" class=\"headerlink\" title=\"域名绑定\"></a>域名绑定</h3><p>在你hexo文件的中找到source文件，在文件中创建一个CNAME文件，不要加后缀，然后用编辑器打开CNAME文件，里面添加你的域名即可（不要加http://）</p>\n<blockquote>\n<p>如果没有编辑器（最好还是下一个例如vscode，vim，notepad++，Sublime Text），可以创建一个txt文档，里面加上你的域名，然后把txt后缀给去掉。</p>\n</blockquote>\n<p><img src=\"http://pic.davontt.com/picGo/domain.png\" alt=\"domain\"></p>\n<center style=\"color:#AAAAAA\">新建文件CNAME</center>\n\n<p>例如我的域名是 davont.com , 以后就不用输入 davont.github.io</p>\n<p><img src=\"http://pic.davontt.com/picGo/domain2.png\" alt=\"domain\"></p>\n<center style=\"color:#AAAAAA\">写上自己的域名</center>\n\n<p>填写完了之后再重新部署到github pages上（部署简写命令hexo d -g)</p>\n<blockquote>\n<p>如果输入你的域名后，打不开界面，可能是你的域名没有解析，这个要到你购买域名的网站上去域名解析，网站若不提供去DNSpod.如果解析完成仍打不开的话，得需要等一段时间,一天左右，国际DNS更新要24小时。</p>\n</blockquote>\n<h2 id=\"NexT主题配置\"><a href=\"#NexT主题配置\" class=\"headerlink\" title=\"NexT主题配置\"></a>NexT主题配置</h2><h3 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h3><p>首先，我推荐两个官方参考文档。</p>\n<p><a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"noopener\">Hexo (我是传送门)</a></p>\n<p><a href=\"http://theme-next.iissnan.com/\" target=\"_blank\" rel=\"noopener\">Next (我是传送门)</a></p>\n<p>其实这两个文档已解决基本问题，有什么要求直接按照文档去改。</p>\n<ul>\n<li>如果改博客整体框架例如博客名称、作者、网址、目录等等，那么直接在你的博客文件家目录找到_config.yml文件（中文名叫做站点配置文件），编辑即可。（当然需要编辑器打开啦）</li>\n</ul>\n<p>如果想在NexT主题里更改，在theme中找到next，然后在next找到_config.yml文件，编辑即可。</p>\n<h3 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h3><p>blog目录下的_config.yml里有很多配置项，先解释几个初学者最在意的：</p>\n<ul>\n<li>title: 博客主页标题</li>\n<li>url: 你的博客网址，例如<a href=\"http://yoursite.com\">http://yoursite.com</a></li>\n<li>permalink: 每篇文章的URL链接格式，例如:year/:month/:title/，注意不要漏掉最后的/</li>\n<li>date_format: 每篇文章日期的格式，如YYYY-MM-DD会显示2014-01-01，具体格式设置方法参考</li>\n<li>moment.js</li>\n<li>per_page: 每页显示的文章数量</li>\n</ul>\n<p>修改_config.yml要格外注意，每项冒号后面都加一个空格，另外不要出现tab。</p>\n<h3 id=\"语言设置\"><a href=\"#语言设置\" class=\"headerlink\" title=\"语言设置\"></a>语言设置</h3><blockquote>\n<p>language: zh-Hans</p>\n</blockquote>\n<h3 id=\"NexT-主题更换\"><a href=\"#NexT-主题更换\" class=\"headerlink\" title=\"NexT 主题更换\"></a>NexT 主题更换</h3><p>NexT 主题目前提供了3中风格类似，但是又有点不同的主题风格，可以通过修改 主题配置文件 中的 Scheme 值来启用其中一种风格，例如我的博客用的是 Pisces 分栏风格，只要把另外两个用#注释掉即可</p>\n<figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#Schemes</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#scheme: Muse</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#scheme: Mist</span></span><br><span class=\"line\">scheme: Pisces</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"发布新文章\"><a href=\"#发布新文章\" class=\"headerlink\" title=\"发布新文章\"></a>发布新文章</h3><p>在终端输入:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"symbol\">&amp;quot;</span>文章名称<span class=\"symbol\">&amp;quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>之后在source/_posts目录下面，多了一个以md后缀的文件，文件名就是你刚刚设置的文章名称</p>\n<p>打开之后我们会看到：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">new</span> <span class=\"string\">article</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2014</span><span class=\"number\">-11</span><span class=\"number\">-01</span> <span class=\"number\">20</span><span class=\"string\">:10:33</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">tags:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\n\n<p>文件的开头是属性，采用统一的yaml格式，用三条短横线分隔。下面是文章正文。</p>\n<p>文章的正文支持markdown格式，建议你先学习一下它的语法。markdown不像html似的一大堆标签，很简单，只有几个符号。</p>\n<p>新建、删除或修改文章后，不需要重启hexo server，刷新一下即可预览。</p>\n","site":{"data":{"projects":[{"name":"NJUPT_Esport","url":"https://github.com/Davont/NJUPT_Esport","desc":"一个为在校学生提供体育相关成绩查询、校新闻推送、学生反馈评论的web app"},{"name":"Furniture_Management_System","url":"https://github.com/Davont/Furniture_Management_System","desc":"一个提供家具购买、下单、用户管理、订单管理、商户管理等功能的家具订单CMS系统"},{"name":"weapp-WQPS","url":"https://github.com/Davont/weapp-WQPS","desc":"一个展示型的微信小程序，旨在提供基于卫星传感网的水质监测系统的对外展示平台。"},{"name":"yiban_registration","url":"https://github.com/Davont/yiban_registration","desc":"一个面向社团提供新生加入社团的线上报名表"}]}},"excerpt":"","more":"<h2 id=\"域名\"><a href=\"#域名\" class=\"headerlink\" title=\"域名\"></a>域名</h2><h3 id=\"购买域名（未收商家广告费一分一毛）\"><a href=\"#购买域名（未收商家广告费一分一毛）\" class=\"headerlink\" title=\"购买域名（未收商家广告费一分一毛）\"></a>购买域名（未收商家广告费一分一毛）</h3><ul>\n<li><p>域名的话，确实有免费的，不过比较麻烦而且并不是永久免费。如果你想在以后搞个大新闻的话，还是建议买个域名，而且一般第一年买的域名也比较便宜。在此我列两个个比较有名的域名注册公司：<a href=\"http://www.xinnet.com/\" target=\"_blank\" rel=\"noopener\">新网</a>、<a href=\"https://wanwang.aliyun.com/\" target=\"_blank\" rel=\"noopener\">万网</a>。</p>\n</li>\n<li><p>其实你也可以通过其他平台来购买，比如腾讯云、阿里云。其他的诸如京东云，坚果云，我没了解过，不过大差不差吧。</p>\n<blockquote>\n<p>备注:腾讯云服务器学生机真的便宜，一个月一块钱，而且域名后缀为cn的享有学生价1块钱一年（仅限第一年）。阿里云服务器一个月10块，但速度比腾讯云块，而且自我感觉逼格更高。（万网就是阿里旗下的）</p>\n</blockquote>\n</li>\n<li><p>至于怎么购买的话，构思一个自己喜欢的域名，然后后缀选择恰当的就行了。别忘了购买之后要解析域名，别忘了解析后要等一段时间才会更新。</p>\n<blockquote>\n<p>最好选择国外的域名后缀，国内的要备案，忒麻烦。国外例如用.me就挺好。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"域名绑定\"><a href=\"#域名绑定\" class=\"headerlink\" title=\"域名绑定\"></a>域名绑定</h3><p>在你hexo文件的中找到source文件，在文件中创建一个CNAME文件，不要加后缀，然后用编辑器打开CNAME文件，里面添加你的域名即可（不要加http://）</p>\n<blockquote>\n<p>如果没有编辑器（最好还是下一个例如vscode，vim，notepad++，Sublime Text），可以创建一个txt文档，里面加上你的域名，然后把txt后缀给去掉。</p>\n</blockquote>\n<p><img src=\"http://pic.davontt.com/picGo/domain.png\" alt=\"domain\"></p>\n<center style=\"color:#AAAAAA\">新建文件CNAME</center>\n\n<p>例如我的域名是 davont.com , 以后就不用输入 davont.github.io</p>\n<p><img src=\"http://pic.davontt.com/picGo/domain2.png\" alt=\"domain\"></p>\n<center style=\"color:#AAAAAA\">写上自己的域名</center>\n\n<p>填写完了之后再重新部署到github pages上（部署简写命令hexo d -g)</p>\n<blockquote>\n<p>如果输入你的域名后，打不开界面，可能是你的域名没有解析，这个要到你购买域名的网站上去域名解析，网站若不提供去DNSpod.如果解析完成仍打不开的话，得需要等一段时间,一天左右，国际DNS更新要24小时。</p>\n</blockquote>\n<h2 id=\"NexT主题配置\"><a href=\"#NexT主题配置\" class=\"headerlink\" title=\"NexT主题配置\"></a>NexT主题配置</h2><h3 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h3><p>首先，我推荐两个官方参考文档。</p>\n<p><a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"noopener\">Hexo (我是传送门)</a></p>\n<p><a href=\"http://theme-next.iissnan.com/\" target=\"_blank\" rel=\"noopener\">Next (我是传送门)</a></p>\n<p>其实这两个文档已解决基本问题，有什么要求直接按照文档去改。</p>\n<ul>\n<li>如果改博客整体框架例如博客名称、作者、网址、目录等等，那么直接在你的博客文件家目录找到_config.yml文件（中文名叫做站点配置文件），编辑即可。（当然需要编辑器打开啦）</li>\n</ul>\n<p>如果想在NexT主题里更改，在theme中找到next，然后在next找到_config.yml文件，编辑即可。</p>\n<h3 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h3><p>blog目录下的_config.yml里有很多配置项，先解释几个初学者最在意的：</p>\n<ul>\n<li>title: 博客主页标题</li>\n<li>url: 你的博客网址，例如<a href=\"http://yoursite.com\">http://yoursite.com</a></li>\n<li>permalink: 每篇文章的URL链接格式，例如:year/:month/:title/，注意不要漏掉最后的/</li>\n<li>date_format: 每篇文章日期的格式，如YYYY-MM-DD会显示2014-01-01，具体格式设置方法参考</li>\n<li>moment.js</li>\n<li>per_page: 每页显示的文章数量</li>\n</ul>\n<p>修改_config.yml要格外注意，每项冒号后面都加一个空格，另外不要出现tab。</p>\n<h3 id=\"语言设置\"><a href=\"#语言设置\" class=\"headerlink\" title=\"语言设置\"></a>语言设置</h3><blockquote>\n<p>language: zh-Hans</p>\n</blockquote>\n<h3 id=\"NexT-主题更换\"><a href=\"#NexT-主题更换\" class=\"headerlink\" title=\"NexT 主题更换\"></a>NexT 主题更换</h3><p>NexT 主题目前提供了3中风格类似，但是又有点不同的主题风格，可以通过修改 主题配置文件 中的 Scheme 值来启用其中一种风格，例如我的博客用的是 Pisces 分栏风格，只要把另外两个用#注释掉即可</p>\n<figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#Schemes</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#scheme: Muse</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#scheme: Mist</span></span><br><span class=\"line\">scheme: Pisces</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"发布新文章\"><a href=\"#发布新文章\" class=\"headerlink\" title=\"发布新文章\"></a>发布新文章</h3><p>在终端输入:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"symbol\">&amp;quot;</span>文章名称<span class=\"symbol\">&amp;quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>之后在source/_posts目录下面，多了一个以md后缀的文件，文件名就是你刚刚设置的文章名称</p>\n<p>打开之后我们会看到：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">new</span> <span class=\"string\">article</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2014</span><span class=\"number\">-11</span><span class=\"number\">-01</span> <span class=\"number\">20</span><span class=\"string\">:10:33</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">tags:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\n\n<p>文件的开头是属性，采用统一的yaml格式，用三条短横线分隔。下面是文章正文。</p>\n<p>文章的正文支持markdown格式，建议你先学习一下它的语法。markdown不像html似的一大堆标签，很简单，只有几个符号。</p>\n<p>新建、删除或修改文章后，不需要重启hexo server，刷新一下即可预览。</p>\n"},{"title":"变量提升(函数提升)与let、const","date":"2019-02-21T09:19:45.000Z","_content":"## 前言\n在ES6之前，JavaScript没有块级作用域的说法（一对花括号{}为一个块级作用域），只有全局作用域和函数作用域。变量提升即将变量声明提升到它所在作用域的最开始的部分。\n\n按照正常的编程逻辑来说，变量或者函数，都应该先声明，再调用。\n\n就像这样：\n\n```js\nvar a;\na = 1;\nconsole.log(a)\n```\n但是JavaScript再处理程序时，会将当前作用域内所有的变量声明提升到程序的顶部，所以如果程序长成这样，也是可以运行的。\n```js\na = 1;\nconsole.log(a);\nvar a;\n```\n因为在执行上面程序之前，变量a的声明被提升到了程序的顶部。\n\n因此，在JavaScript中，可以先使用变量，再声明变量。\n\n按照runoob给的定义：\n*变量提升：函数声明和变量声明总是会被解释器悄悄地被\"提升\"到方法体的最顶部。*\n\n> 只有声明的变量才会有变量提升，初始化的不会有。\n## 变量声明\n这里要复习一下变量声明的基础知识。\n\n==变量声明==\n```js\nvar a;\na = 1;\n```\n==变量初始化==\n```js\nvar a = 1;\n```\n所以以下两端代码，是完全不同的两个输出结果。\n\n```js\nvar a = 1;\nb = 2;\nconsole.log(a + b)\nvar b;\n```\n输出3，变量a经过了初始化，变量b被提升了，所以输出1 + 2。\n\n```js\nvar a = 1;\nconsole.log(a + b)\nvar b = 2\n```\n输出NaN，变量a经过了初始化，输出 1 + b，变量b也经过了初始化，所以不存在变量提升，所以在执行1+b的时候，b的值是undefined，1 + undefined = NaN，因此输出NaN。\n\n## let\nES6中的let命令用于替代ES5中的var命令，因为变量提升会使整个代码看上去很奇怪。\n\n从2018年中旬开始，我已经在项目中逐渐使用let来代替var了，并且最新版本的webStorm中，当你使用var来声明一个变量的时候，编辑器都会报warnings，并提示你要使用let来代替var。\n\n按照[ 阮一峰ES6教程]( 阮一峰ES6教程)的话说，let命令改变了语法的行为，它所声明的变量一定要在声明后使用，否则报错。\n\n来看一段代码：\n```js\na = 1;\nconsole.log(a)\nlet a;\n```\n报错：Uncaught ReferenceError: Cannot access 'a' before initialization\n\n意思为：在a未初始化之前无法调用。\n\n所以我们需要这么写：\n```js\nlet a = 1;\nconsole.log(a) // 1\n```\n故 let命令不存在变量提升。\n题外话： 有心的读者可以看看这篇文章：https://www.jianshu.com/p/0f49c88cf169\n作者对let const的变量提升产生了质疑。\n\n**let不可以重复声明，会提示我们:**\n```js\nlet x = 10;let x = 20; \n// Uncaught SyntaxError: Identifier 'x' has already been declared\n```\n当我们在全局声明var的时候，我们可以通过window来获取这个变量，但是let不可以，\n你可以将let变量看其处在一个无形的作用域内。\n我觉得在大部分时候都应该优先使用let,<不敢说任何时候，总怕来个例外..>。\n\n## const\n刚才同样的代码，用const输出如下：\n\n```js\na = 1;\nconsole.log(a)\nconst a;\n```\n报错：Uncaught SyntaxError: Missing initializer in const declaration\n\n意思为： 语法错误，在const声明时未进行初始化。\n\n按照[阮一峰ES6教程](http://es6.ruanyifeng.com/#docs/let)的话说， const在声明时就一定要渲染，\n\n上面的代码有几个错误，首先const生成的是常量，不能被修改，所以函数第一行就是错误的。其次const必须在声明时就初始化，所以第三行也是错误的。\n\n换一下写法\n\n```js\nconsole.log(a)\nconst a = 1;\n```\n报错：Uncaught ReferenceError: Cannot access 'a' before initialization\n\n和let报错一样，这说明const同样不存在变量提升。\n\n## 暂时性死区\n只要块级作用域内存在let命令，它所声明的变量就“绑定”（binding）这个区域，不再受外部的影响。\n\n```js\nvar tmp = 123;\n\nif (true) {\n    tmp = 'abc'; // Uncaught ReferenceError: Cannot access 'tmp' before initialization\n    let tmp;\n}\n```\n上面代码中，存在全局变量tmp，但是块级作用域内let又声明了一个局部变量tmp，导致后者绑定这个块级作用域，所以在let声明变量前，对tmp赋值会报错。\n\nES6明确规定，如果区块中存在let和const命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。\n\n总之，在代码块内，使用let命令声明变量之前，该变量都是不可用的。这在语法上，称为“暂时性死区”（temporal dead zone，简称TDZ）。\n\n引用：https://www.cnblogs.com/ricoliu/p/6149912.html\n\n## 暂时性死区\n\n只要块级作用域内存在let命令，它所声明的变量就“绑定”（binding）这个区域，不再受外部的影响。\n\n> ES6明确规定，如果区块中存在let和const命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。\n\n\n## 函数提升\n\njs中创建函数有两种方式：函数声明式和函数字面量式。只有函数声明才存在函数提升。\n```js\na()\nvar a = function() {\n    console.log(1)\n}\n```\n\n报错，因为是字面量式，所以不存在函数提升。\n\n```js\na();\nfunction a() {\n    console.log(1)\n}\n```\n输出1，因为是函数声明式，所以存在函数提升。\n根据刚才的文章，这里应该非常容易理解。\n\n## 函数提升和变量提升的优先级\n\n根据官方书籍《你不知道的javascript》（上卷）中写道：\n“函数会首先被提升，然后才是变量”。\n\n所以我们看看下面的代码。\n\n\n```js\nconsole.log(a);    \nconsole.log(a());    \nvar a = 3;\n\nfunction a() {\n        console.log(10) \n}\nconsole.log(a)   \na = 6;\nconsole.log(a());  \n```\n\n由此可见，该函数的执行过程是：\n1、 提升函数a()\n2、提升变量a = 6\n3、输出a 因为a为函数声明未被变量声明替代，所以输出了a的代码\n4、输出a()，因为a是个函数，所以执行了a()\n5、重新声明a = 3 ， a被覆盖。\n6、输出a 因为a = 3，所以输出3。\n7、输出a()，因为a已经被3覆盖，已经不是一个函数，所以输出a is not a function.\n\n由此可见函数提升要比变量提升的优先级要高一些，且不会被变量声明覆盖，但是会被变量赋值之后覆盖。\n\n引用：https://www.cnblogs.com/oxiaojiano/p/7918967.html\n\n## 练习\n\n**代码1**\n\n```\nconsole.log(foo);\nfunction foo(){\n    console.log(\"函数声明\");\n}\nvar foo = \"变量\";\n```\n\n输出为\n\n```\nfunction foo(){\n    console.log(\"函数声明\");\n}\n```\n\n代码实际为:\n```\nfunction foo(){\n    console.log(\"函数声明\");\n}\nvar foo;\nconsole.log(foo);   \nfoo = \"变量\";\n```\n**函数提升优先级比变量提升要高，且不会被变量声明覆盖，但是会被变量赋值覆盖。\n在最后再加上打印就能看到函数已经被覆盖了。**\n\n**代码2**\n\n```js\n方式一\n\nvar a = 4;\n\nfunction a(){\n\nreturn 6\n\n}\n\nconsole.log(a) // 4\n\nconsole.log(a()) // a is not a function\n\n方式二\n\nfunction a(){\n\nreturn 6\n\n}\n\nvar a =4;\n\nconsole.log(a) // 4\n\nconsole.log(a()) // a is not a function\n```\n同一个标识符的情况下，变量声明与函数声明都会提升；函数声明会覆盖变量声明，但不会覆盖变量赋值，即：如果声明变量的同时初始化或赋值那么变量优先级高于函数。\n\n**代码3**\n```js\nvar x = 1,   // 全局window\n  y = 0,\n  z = 0;\nfunction add(x) {\n  return (x = x + 1);\n}\ny = add(x); // 同名函数调用最后一个，覆盖之前\nfunction add(x) {\n  return (x = x + 3);\n}\nz = add(x);\n//运行结果   x:1 y:4 z:4\n**代码4**\n```js\n      function a(a) {\n        console.log(a);\n        a = 2;\n        console.log(b);\n        var b = 3;\n        console.log(a);\n      }\n      a(1);\n      console.log(a);\n```\n结果：\n![代码4结果](http://pic.davontt.com/picGo/es6-变量提升.png)\n\n**代码5**\n```js\nvar a=1;\nfunction test(){\n    console.log(a);\n    var a=1;\n}\ntest();\n```\n根据变量声明提升和变量搜索机制，函数test（）应为\n\n```js\nfunction test(){\n    var a;\n    console.log(a);//此时由于a并咩有被赋值，所以也就是undefined\n        a=1;\n \n}\n```\n**代码6\n**\n\n\n```js\nvar b=2;\nfunction test2(){\n    window.b=3;\n    console.log(b);//值为3\n}\ntest2();\n```\n任何通过附加在window上的变量都相当于声明一个全局变量，或者是给全局变量赋值\n\n**代码7**\n\n```js\nc=5; \nfunction test3(){\n    window.c=3;\n    console.log(c);\n    var c;\n    console.log(window.c);\n}\ntest3();\n```\n根据变量声明提升和变量搜索机制：\n```js\nc=5;//声明一个全局变量c \nfunction test3(){\n        var c;//变量声明提升，声明一个局部变量\n    window.c=3;//改变全局变量c的值\n    console.log(c);//由于此时的c是一个局部变量c，并且没有被赋值 c就是undefined    \n    console.log(window.c);//此时的c就是一个全局变量c，也就是值为3\n}\ntest3();\n```\n**代码8**\n```js\nfunction hah(number){\n\n        var a=\"show\";\n\n        while(number!=0){\n\n            alert(a);//show\n\n            var a=4;\n\n            alert(a);//4\n\n            number--;\n\n        }\n\n    }\n\n   hah(1);   \n```\n为什么这里的a 弹出的是show?\n\n因为在ES6之前，JavaScript没有块级作用域，只有全局作用域和函数作用域。\n\n变量提升的本质是将变量声明提升到它所在作用域的最开始的部分。\n\n浏览器环境 window 是全局作用域，函数 function 包裹的是函数作用域。\n\nwhile 不是函数，它没有作用域。所以，在条件为 true 的时候相当于：\n\n\n```js\nfunction hah(number){\n\n        var a=\"show\";\n\n        alert(a);//show\n\n        var a=4;\n\n        alert(a);//4\n\n        number--;\n\n    }\n\n hah(1);  \n\n```\n\n再进一步分解，就是：\n\n\n```js\nfunction hah(number){\n\n    var a;\n\n    var a;\n\n    a = \"show\";\n\n    alert(a);//show\n\n    a=4;\n\n    alert(a);//4\n\n    number--;\n\n}\n\nhah(1);  \n\n```\n代码9\n```js\nvar a=[];\nfor(var i=0;i<6;i++){\n   a[i]=function (){\n\tconsole.log(i)\n}\n}\na[3]();//6\n```\n解释：上面的代码中，变量i是var声明的，在全局范围内都有效。所以每一次循环，新的i值都会覆盖旧值，导致最后输出的是最后一轮的i值。\n如果使用let，声明的变量仅在块级作用域内有效，最后将输出3.\n**for循环,其实是一系列从上到下的块级区域组成的代码最终的简化实现.**\n实际可由下组成：\n```js\n      var a = [];\n      {\n        var i = 0;\n        a[i] = function() {\n          console.log(i);\n        };\n      }\n      {\n        var i = 1;\n        a[i] = function() {\n          console.log(i);\n        };\n      }\n      {\n        var i = 2;\n        a[i] = function() {\n          console.log(i);\n        };\n      }\n      {\n        var i = 3;\n        a[i] = function() {\n          console.log(i);\n        };\n      }\n      {\n        var i = 4;\n        a[i] = function() {\n          console.log(i);\n        };\n      }\n      {\n        var i = 5;\n        a[i] = function() {\n          console.log(i);\n        };\n      }\n      var i = 6;\n      a[3]();\n```\n","source":"_posts/es6-variables.md","raw":"---\ntitle: 变量提升(函数提升)与let、const\ndate: 2019-02-21 17:19:45\ntags: [js,es6]\n---\n## 前言\n在ES6之前，JavaScript没有块级作用域的说法（一对花括号{}为一个块级作用域），只有全局作用域和函数作用域。变量提升即将变量声明提升到它所在作用域的最开始的部分。\n\n按照正常的编程逻辑来说，变量或者函数，都应该先声明，再调用。\n\n就像这样：\n\n```js\nvar a;\na = 1;\nconsole.log(a)\n```\n但是JavaScript再处理程序时，会将当前作用域内所有的变量声明提升到程序的顶部，所以如果程序长成这样，也是可以运行的。\n```js\na = 1;\nconsole.log(a);\nvar a;\n```\n因为在执行上面程序之前，变量a的声明被提升到了程序的顶部。\n\n因此，在JavaScript中，可以先使用变量，再声明变量。\n\n按照runoob给的定义：\n*变量提升：函数声明和变量声明总是会被解释器悄悄地被\"提升\"到方法体的最顶部。*\n\n> 只有声明的变量才会有变量提升，初始化的不会有。\n## 变量声明\n这里要复习一下变量声明的基础知识。\n\n==变量声明==\n```js\nvar a;\na = 1;\n```\n==变量初始化==\n```js\nvar a = 1;\n```\n所以以下两端代码，是完全不同的两个输出结果。\n\n```js\nvar a = 1;\nb = 2;\nconsole.log(a + b)\nvar b;\n```\n输出3，变量a经过了初始化，变量b被提升了，所以输出1 + 2。\n\n```js\nvar a = 1;\nconsole.log(a + b)\nvar b = 2\n```\n输出NaN，变量a经过了初始化，输出 1 + b，变量b也经过了初始化，所以不存在变量提升，所以在执行1+b的时候，b的值是undefined，1 + undefined = NaN，因此输出NaN。\n\n## let\nES6中的let命令用于替代ES5中的var命令，因为变量提升会使整个代码看上去很奇怪。\n\n从2018年中旬开始，我已经在项目中逐渐使用let来代替var了，并且最新版本的webStorm中，当你使用var来声明一个变量的时候，编辑器都会报warnings，并提示你要使用let来代替var。\n\n按照[ 阮一峰ES6教程]( 阮一峰ES6教程)的话说，let命令改变了语法的行为，它所声明的变量一定要在声明后使用，否则报错。\n\n来看一段代码：\n```js\na = 1;\nconsole.log(a)\nlet a;\n```\n报错：Uncaught ReferenceError: Cannot access 'a' before initialization\n\n意思为：在a未初始化之前无法调用。\n\n所以我们需要这么写：\n```js\nlet a = 1;\nconsole.log(a) // 1\n```\n故 let命令不存在变量提升。\n题外话： 有心的读者可以看看这篇文章：https://www.jianshu.com/p/0f49c88cf169\n作者对let const的变量提升产生了质疑。\n\n**let不可以重复声明，会提示我们:**\n```js\nlet x = 10;let x = 20; \n// Uncaught SyntaxError: Identifier 'x' has already been declared\n```\n当我们在全局声明var的时候，我们可以通过window来获取这个变量，但是let不可以，\n你可以将let变量看其处在一个无形的作用域内。\n我觉得在大部分时候都应该优先使用let,<不敢说任何时候，总怕来个例外..>。\n\n## const\n刚才同样的代码，用const输出如下：\n\n```js\na = 1;\nconsole.log(a)\nconst a;\n```\n报错：Uncaught SyntaxError: Missing initializer in const declaration\n\n意思为： 语法错误，在const声明时未进行初始化。\n\n按照[阮一峰ES6教程](http://es6.ruanyifeng.com/#docs/let)的话说， const在声明时就一定要渲染，\n\n上面的代码有几个错误，首先const生成的是常量，不能被修改，所以函数第一行就是错误的。其次const必须在声明时就初始化，所以第三行也是错误的。\n\n换一下写法\n\n```js\nconsole.log(a)\nconst a = 1;\n```\n报错：Uncaught ReferenceError: Cannot access 'a' before initialization\n\n和let报错一样，这说明const同样不存在变量提升。\n\n## 暂时性死区\n只要块级作用域内存在let命令，它所声明的变量就“绑定”（binding）这个区域，不再受外部的影响。\n\n```js\nvar tmp = 123;\n\nif (true) {\n    tmp = 'abc'; // Uncaught ReferenceError: Cannot access 'tmp' before initialization\n    let tmp;\n}\n```\n上面代码中，存在全局变量tmp，但是块级作用域内let又声明了一个局部变量tmp，导致后者绑定这个块级作用域，所以在let声明变量前，对tmp赋值会报错。\n\nES6明确规定，如果区块中存在let和const命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。\n\n总之，在代码块内，使用let命令声明变量之前，该变量都是不可用的。这在语法上，称为“暂时性死区”（temporal dead zone，简称TDZ）。\n\n引用：https://www.cnblogs.com/ricoliu/p/6149912.html\n\n## 暂时性死区\n\n只要块级作用域内存在let命令，它所声明的变量就“绑定”（binding）这个区域，不再受外部的影响。\n\n> ES6明确规定，如果区块中存在let和const命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。\n\n\n## 函数提升\n\njs中创建函数有两种方式：函数声明式和函数字面量式。只有函数声明才存在函数提升。\n```js\na()\nvar a = function() {\n    console.log(1)\n}\n```\n\n报错，因为是字面量式，所以不存在函数提升。\n\n```js\na();\nfunction a() {\n    console.log(1)\n}\n```\n输出1，因为是函数声明式，所以存在函数提升。\n根据刚才的文章，这里应该非常容易理解。\n\n## 函数提升和变量提升的优先级\n\n根据官方书籍《你不知道的javascript》（上卷）中写道：\n“函数会首先被提升，然后才是变量”。\n\n所以我们看看下面的代码。\n\n\n```js\nconsole.log(a);    \nconsole.log(a());    \nvar a = 3;\n\nfunction a() {\n        console.log(10) \n}\nconsole.log(a)   \na = 6;\nconsole.log(a());  \n```\n\n由此可见，该函数的执行过程是：\n1、 提升函数a()\n2、提升变量a = 6\n3、输出a 因为a为函数声明未被变量声明替代，所以输出了a的代码\n4、输出a()，因为a是个函数，所以执行了a()\n5、重新声明a = 3 ， a被覆盖。\n6、输出a 因为a = 3，所以输出3。\n7、输出a()，因为a已经被3覆盖，已经不是一个函数，所以输出a is not a function.\n\n由此可见函数提升要比变量提升的优先级要高一些，且不会被变量声明覆盖，但是会被变量赋值之后覆盖。\n\n引用：https://www.cnblogs.com/oxiaojiano/p/7918967.html\n\n## 练习\n\n**代码1**\n\n```\nconsole.log(foo);\nfunction foo(){\n    console.log(\"函数声明\");\n}\nvar foo = \"变量\";\n```\n\n输出为\n\n```\nfunction foo(){\n    console.log(\"函数声明\");\n}\n```\n\n代码实际为:\n```\nfunction foo(){\n    console.log(\"函数声明\");\n}\nvar foo;\nconsole.log(foo);   \nfoo = \"变量\";\n```\n**函数提升优先级比变量提升要高，且不会被变量声明覆盖，但是会被变量赋值覆盖。\n在最后再加上打印就能看到函数已经被覆盖了。**\n\n**代码2**\n\n```js\n方式一\n\nvar a = 4;\n\nfunction a(){\n\nreturn 6\n\n}\n\nconsole.log(a) // 4\n\nconsole.log(a()) // a is not a function\n\n方式二\n\nfunction a(){\n\nreturn 6\n\n}\n\nvar a =4;\n\nconsole.log(a) // 4\n\nconsole.log(a()) // a is not a function\n```\n同一个标识符的情况下，变量声明与函数声明都会提升；函数声明会覆盖变量声明，但不会覆盖变量赋值，即：如果声明变量的同时初始化或赋值那么变量优先级高于函数。\n\n**代码3**\n```js\nvar x = 1,   // 全局window\n  y = 0,\n  z = 0;\nfunction add(x) {\n  return (x = x + 1);\n}\ny = add(x); // 同名函数调用最后一个，覆盖之前\nfunction add(x) {\n  return (x = x + 3);\n}\nz = add(x);\n//运行结果   x:1 y:4 z:4\n**代码4**\n```js\n      function a(a) {\n        console.log(a);\n        a = 2;\n        console.log(b);\n        var b = 3;\n        console.log(a);\n      }\n      a(1);\n      console.log(a);\n```\n结果：\n![代码4结果](http://pic.davontt.com/picGo/es6-变量提升.png)\n\n**代码5**\n```js\nvar a=1;\nfunction test(){\n    console.log(a);\n    var a=1;\n}\ntest();\n```\n根据变量声明提升和变量搜索机制，函数test（）应为\n\n```js\nfunction test(){\n    var a;\n    console.log(a);//此时由于a并咩有被赋值，所以也就是undefined\n        a=1;\n \n}\n```\n**代码6\n**\n\n\n```js\nvar b=2;\nfunction test2(){\n    window.b=3;\n    console.log(b);//值为3\n}\ntest2();\n```\n任何通过附加在window上的变量都相当于声明一个全局变量，或者是给全局变量赋值\n\n**代码7**\n\n```js\nc=5; \nfunction test3(){\n    window.c=3;\n    console.log(c);\n    var c;\n    console.log(window.c);\n}\ntest3();\n```\n根据变量声明提升和变量搜索机制：\n```js\nc=5;//声明一个全局变量c \nfunction test3(){\n        var c;//变量声明提升，声明一个局部变量\n    window.c=3;//改变全局变量c的值\n    console.log(c);//由于此时的c是一个局部变量c，并且没有被赋值 c就是undefined    \n    console.log(window.c);//此时的c就是一个全局变量c，也就是值为3\n}\ntest3();\n```\n**代码8**\n```js\nfunction hah(number){\n\n        var a=\"show\";\n\n        while(number!=0){\n\n            alert(a);//show\n\n            var a=4;\n\n            alert(a);//4\n\n            number--;\n\n        }\n\n    }\n\n   hah(1);   \n```\n为什么这里的a 弹出的是show?\n\n因为在ES6之前，JavaScript没有块级作用域，只有全局作用域和函数作用域。\n\n变量提升的本质是将变量声明提升到它所在作用域的最开始的部分。\n\n浏览器环境 window 是全局作用域，函数 function 包裹的是函数作用域。\n\nwhile 不是函数，它没有作用域。所以，在条件为 true 的时候相当于：\n\n\n```js\nfunction hah(number){\n\n        var a=\"show\";\n\n        alert(a);//show\n\n        var a=4;\n\n        alert(a);//4\n\n        number--;\n\n    }\n\n hah(1);  \n\n```\n\n再进一步分解，就是：\n\n\n```js\nfunction hah(number){\n\n    var a;\n\n    var a;\n\n    a = \"show\";\n\n    alert(a);//show\n\n    a=4;\n\n    alert(a);//4\n\n    number--;\n\n}\n\nhah(1);  \n\n```\n代码9\n```js\nvar a=[];\nfor(var i=0;i<6;i++){\n   a[i]=function (){\n\tconsole.log(i)\n}\n}\na[3]();//6\n```\n解释：上面的代码中，变量i是var声明的，在全局范围内都有效。所以每一次循环，新的i值都会覆盖旧值，导致最后输出的是最后一轮的i值。\n如果使用let，声明的变量仅在块级作用域内有效，最后将输出3.\n**for循环,其实是一系列从上到下的块级区域组成的代码最终的简化实现.**\n实际可由下组成：\n```js\n      var a = [];\n      {\n        var i = 0;\n        a[i] = function() {\n          console.log(i);\n        };\n      }\n      {\n        var i = 1;\n        a[i] = function() {\n          console.log(i);\n        };\n      }\n      {\n        var i = 2;\n        a[i] = function() {\n          console.log(i);\n        };\n      }\n      {\n        var i = 3;\n        a[i] = function() {\n          console.log(i);\n        };\n      }\n      {\n        var i = 4;\n        a[i] = function() {\n          console.log(i);\n        };\n      }\n      {\n        var i = 5;\n        a[i] = function() {\n          console.log(i);\n        };\n      }\n      var i = 6;\n      a[3]();\n```\n","slug":"es6-variables","published":1,"updated":"2020-12-20T16:36:55.007Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrr9soit00081l5x0en721d0","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在ES6之前，JavaScript没有块级作用域的说法（一对花括号{}为一个块级作用域），只有全局作用域和函数作用域。变量提升即将变量声明提升到它所在作用域的最开始的部分。</p>\n<p>按照正常的编程逻辑来说，变量或者函数，都应该先声明，再调用。</p>\n<p>就像这样：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a;</span><br><span class=\"line\">a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a)</span><br></pre></td></tr></table></figure>\n<p>但是JavaScript再处理程序时，会将当前作用域内所有的变量声明提升到程序的顶部，所以如果程序长成这样，也是可以运行的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\"><span class=\"keyword\">var</span> a;</span><br></pre></td></tr></table></figure>\n<p>因为在执行上面程序之前，变量a的声明被提升到了程序的顶部。</p>\n<p>因此，在JavaScript中，可以先使用变量，再声明变量。</p>\n<p>按照runoob给的定义：<br><em>变量提升：函数声明和变量声明总是会被解释器悄悄地被”提升”到方法体的最顶部。</em></p>\n<blockquote>\n<p>只有声明的变量才会有变量提升，初始化的不会有。</p>\n</blockquote>\n<h2 id=\"变量声明\"><a href=\"#变量声明\" class=\"headerlink\" title=\"变量声明\"></a>变量声明</h2><p>这里要复习一下变量声明的基础知识。</p>\n<p>==变量声明==</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a;</span><br><span class=\"line\">a = <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n<p>==变量初始化==</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n<p>所以以下两端代码，是完全不同的两个输出结果。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">b = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a + b)</span><br><span class=\"line\"><span class=\"keyword\">var</span> b;</span><br></pre></td></tr></table></figure>\n<p>输出3，变量a经过了初始化，变量b被提升了，所以输出1 + 2。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a + b)</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<p>输出NaN，变量a经过了初始化，输出 1 + b，变量b也经过了初始化，所以不存在变量提升，所以在执行1+b的时候，b的值是undefined，1 + undefined = NaN，因此输出NaN。</p>\n<h2 id=\"let\"><a href=\"#let\" class=\"headerlink\" title=\"let\"></a>let</h2><p>ES6中的let命令用于替代ES5中的var命令，因为变量提升会使整个代码看上去很奇怪。</p>\n<p>从2018年中旬开始，我已经在项目中逐渐使用let来代替var了，并且最新版本的webStorm中，当你使用var来声明一个变量的时候，编辑器都会报warnings，并提示你要使用let来代替var。</p>\n<p>按照<a href=\"阮一峰ES6教程\"> 阮一峰ES6教程</a>的话说，let命令改变了语法的行为，它所声明的变量一定要在声明后使用，否则报错。</p>\n<p>来看一段代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a)</span><br><span class=\"line\"><span class=\"keyword\">let</span> a;</span><br></pre></td></tr></table></figure>\n<p>报错：Uncaught ReferenceError: Cannot access ‘a’ before initialization</p>\n<p>意思为：在a未初始化之前无法调用。</p>\n<p>所以我们需要这么写：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a) <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<p>故 let命令不存在变量提升。<br>题外话： 有心的读者可以看看这篇文章：<a href=\"https://www.jianshu.com/p/0f49c88cf169\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/0f49c88cf169</a><br>作者对let const的变量提升产生了质疑。</p>\n<p><strong>let不可以重复声明，会提示我们:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"number\">10</span>;<span class=\"keyword\">let</span> x = <span class=\"number\">20</span>; </span><br><span class=\"line\"><span class=\"comment\">// Uncaught SyntaxError: Identifier 'x' has already been declared</span></span><br></pre></td></tr></table></figure>\n<p>当我们在全局声明var的时候，我们可以通过window来获取这个变量，但是let不可以，<br>你可以将let变量看其处在一个无形的作用域内。<br>我觉得在大部分时候都应该优先使用let,&lt;不敢说任何时候，总怕来个例外..&gt;。</p>\n<h2 id=\"const\"><a href=\"#const\" class=\"headerlink\" title=\"const\"></a>const</h2><p>刚才同样的代码，用const输出如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a)</span><br><span class=\"line\"><span class=\"keyword\">const</span> a;</span><br></pre></td></tr></table></figure>\n<p>报错：Uncaught SyntaxError: Missing initializer in const declaration</p>\n<p>意思为： 语法错误，在const声明时未进行初始化。</p>\n<p>按照<a href=\"http://es6.ruanyifeng.com/#docs/let\" target=\"_blank\" rel=\"noopener\">阮一峰ES6教程</a>的话说， const在声明时就一定要渲染，</p>\n<p>上面的代码有几个错误，首先const生成的是常量，不能被修改，所以函数第一行就是错误的。其次const必须在声明时就初始化，所以第三行也是错误的。</p>\n<p>换一下写法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(a)</span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n<p>报错：Uncaught ReferenceError: Cannot access ‘a’ before initialization</p>\n<p>和let报错一样，这说明const同样不存在变量提升。</p>\n<h2 id=\"暂时性死区\"><a href=\"#暂时性死区\" class=\"headerlink\" title=\"暂时性死区\"></a>暂时性死区</h2><p>只要块级作用域内存在let命令，它所声明的变量就“绑定”（binding）这个区域，不再受外部的影响。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> tmp = <span class=\"number\">123</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    tmp = <span class=\"string\">'abc'</span>; <span class=\"comment\">// Uncaught ReferenceError: Cannot access 'tmp' before initialization</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> tmp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面代码中，存在全局变量tmp，但是块级作用域内let又声明了一个局部变量tmp，导致后者绑定这个块级作用域，所以在let声明变量前，对tmp赋值会报错。</p>\n<p>ES6明确规定，如果区块中存在let和const命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。</p>\n<p>总之，在代码块内，使用let命令声明变量之前，该变量都是不可用的。这在语法上，称为“暂时性死区”（temporal dead zone，简称TDZ）。</p>\n<p>引用：<a href=\"https://www.cnblogs.com/ricoliu/p/6149912.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/ricoliu/p/6149912.html</a></p>\n<h2 id=\"暂时性死区-1\"><a href=\"#暂时性死区-1\" class=\"headerlink\" title=\"暂时性死区\"></a>暂时性死区</h2><p>只要块级作用域内存在let命令，它所声明的变量就“绑定”（binding）这个区域，不再受外部的影响。</p>\n<blockquote>\n<p>ES6明确规定，如果区块中存在let和const命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。</p>\n</blockquote>\n<h2 id=\"函数提升\"><a href=\"#函数提升\" class=\"headerlink\" title=\"函数提升\"></a>函数提升</h2><p>js中创建函数有两种方式：函数声明式和函数字面量式。只有函数声明才存在函数提升。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a()</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>报错，因为是字面量式，所以不存在函数提升。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a();</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出1，因为是函数声明式，所以存在函数提升。<br>根据刚才的文章，这里应该非常容易理解。</p>\n<h2 id=\"函数提升和变量提升的优先级\"><a href=\"#函数提升和变量提升的优先级\" class=\"headerlink\" title=\"函数提升和变量提升的优先级\"></a>函数提升和变量提升的优先级</h2><p>根据官方书籍《你不知道的javascript》（上卷）中写道：<br>“函数会首先被提升，然后才是变量”。</p>\n<p>所以我们看看下面的代码。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(a);    </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a());    </span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">10</span>) </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a)   </span><br><span class=\"line\">a = <span class=\"number\">6</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a());</span><br></pre></td></tr></table></figure>\n\n<p>由此可见，该函数的执行过程是：<br>1、 提升函数a()<br>2、提升变量a = 6<br>3、输出a 因为a为函数声明未被变量声明替代，所以输出了a的代码<br>4、输出a()，因为a是个函数，所以执行了a()<br>5、重新声明a = 3 ， a被覆盖。<br>6、输出a 因为a = 3，所以输出3。<br>7、输出a()，因为a已经被3覆盖，已经不是一个函数，所以输出a is not a function.</p>\n<p>由此可见函数提升要比变量提升的优先级要高一些，且不会被变量声明覆盖，但是会被变量赋值之后覆盖。</p>\n<p>引用：<a href=\"https://www.cnblogs.com/oxiaojiano/p/7918967.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/oxiaojiano/p/7918967.html</a></p>\n<h2 id=\"练习\"><a href=\"#练习\" class=\"headerlink\" title=\"练习\"></a>练习</h2><p><strong>代码1</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(foo);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"函数声明\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"string\">\"变量\"</span>;</span><br></pre></td></tr></table></figure>\n\n<p>输出为</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"函数声明\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>代码实际为:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"函数声明\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> foo;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo);   </span><br><span class=\"line\">foo = <span class=\"string\">\"变量\"</span>;</span><br></pre></td></tr></table></figure>\n<p><strong>函数提升优先级比变量提升要高，且不会被变量声明覆盖，但是会被变量赋值覆盖。<br>在最后再加上打印就能看到函数已经被覆盖了。</strong></p>\n<p><strong>代码2</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">方式一</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">4</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">6</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a) <span class=\"comment\">// 4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a()) <span class=\"comment\">// a is not a function</span></span><br><span class=\"line\"></span><br><span class=\"line\">方式二</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">6</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a =<span class=\"number\">4</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a) <span class=\"comment\">// 4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a()) <span class=\"comment\">// a is not a function</span></span><br></pre></td></tr></table></figure>\n<p>同一个标识符的情况下，变量声明与函数声明都会提升；函数声明会覆盖变量声明，但不会覆盖变量赋值，即：如果声明变量的同时初始化或赋值那么变量优先级高于函数。</p>\n<p><strong>代码3</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">1</span>,   <span class=\"comment\">// 全局window</span></span><br><span class=\"line\">  y = <span class=\"number\">0</span>,</span><br><span class=\"line\">  z = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (x = x + <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">y = add(x); <span class=\"comment\">// 同名函数调用最后一个，覆盖之前</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (x = x + <span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">z = add(x);</span><br><span class=\"line\"><span class=\"comment\">//运行结果   x:1 y:4 z:4</span></span><br><span class=\"line\">**代码<span class=\"number\">4</span>**</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`js</span></span><br><span class=\"line\"><span class=\"string\">      function a(a) &#123;</span></span><br><span class=\"line\"><span class=\"string\">        console.log(a);</span></span><br><span class=\"line\"><span class=\"string\">        a = 2;</span></span><br><span class=\"line\"><span class=\"string\">        console.log(b);</span></span><br><span class=\"line\"><span class=\"string\">        var b = 3;</span></span><br><span class=\"line\"><span class=\"string\">        console.log(a);</span></span><br><span class=\"line\"><span class=\"string\">      &#125;</span></span><br><span class=\"line\"><span class=\"string\">      a(1);</span></span><br><span class=\"line\"><span class=\"string\">      console.log(a);</span></span><br></pre></td></tr></table></figure>\n<p>结果：<br><img src=\"http://pic.davontt.com/picGo/es6-%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87.png\" alt=\"代码4结果\"></p>\n<p><strong>代码5</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a=<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a=<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test();</span><br></pre></td></tr></table></figure>\n<p>根据变量声明提升和变量搜索机制，函数test（）应为</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a);<span class=\"comment\">//此时由于a并咩有被赋值，所以也就是undefined</span></span><br><span class=\"line\">        a=<span class=\"number\">1</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>*<em>代码6<br>*</em></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> b=<span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test2</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.b=<span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(b);<span class=\"comment\">//值为3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test2();</span><br></pre></td></tr></table></figure>\n<p>任何通过附加在window上的变量都相当于声明一个全局变量，或者是给全局变量赋值</p>\n<p><strong>代码7</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c=<span class=\"number\">5</span>; </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test3</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.c=<span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(c);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> c;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">window</span>.c);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test3();</span><br></pre></td></tr></table></figure>\n<p>根据变量声明提升和变量搜索机制：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c=<span class=\"number\">5</span>;<span class=\"comment\">//声明一个全局变量c </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test3</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> c;<span class=\"comment\">//变量声明提升，声明一个局部变量</span></span><br><span class=\"line\">    <span class=\"built_in\">window</span>.c=<span class=\"number\">3</span>;<span class=\"comment\">//改变全局变量c的值</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(c);<span class=\"comment\">//由于此时的c是一个局部变量c，并且没有被赋值 c就是undefined    </span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">window</span>.c);<span class=\"comment\">//此时的c就是一个全局变量c，也就是值为3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test3();</span><br></pre></td></tr></table></figure>\n<p><strong>代码8</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hah</span>(<span class=\"params\">number</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> a=<span class=\"string\">\"show\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(number!=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            alert(a);<span class=\"comment\">//show</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">var</span> a=<span class=\"number\">4</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            alert(a);<span class=\"comment\">//4</span></span><br><span class=\"line\"></span><br><span class=\"line\">            number--;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   hah(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n<p>为什么这里的a 弹出的是show?</p>\n<p>因为在ES6之前，JavaScript没有块级作用域，只有全局作用域和函数作用域。</p>\n<p>变量提升的本质是将变量声明提升到它所在作用域的最开始的部分。</p>\n<p>浏览器环境 window 是全局作用域，函数 function 包裹的是函数作用域。</p>\n<p>while 不是函数，它没有作用域。所以，在条件为 true 的时候相当于：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hah</span>(<span class=\"params\">number</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> a=<span class=\"string\">\"show\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        alert(a);<span class=\"comment\">//show</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> a=<span class=\"number\">4</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        alert(a);<span class=\"comment\">//4</span></span><br><span class=\"line\"></span><br><span class=\"line\">        number--;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> hah(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n\n<p>再进一步分解，就是：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hah</span>(<span class=\"params\">number</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> a;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> a;</span><br><span class=\"line\"></span><br><span class=\"line\">    a = <span class=\"string\">\"show\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    alert(a);<span class=\"comment\">//show</span></span><br><span class=\"line\"></span><br><span class=\"line\">    a=<span class=\"number\">4</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    alert(a);<span class=\"comment\">//4</span></span><br><span class=\"line\"></span><br><span class=\"line\">    number--;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">hah(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n<p>代码9</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a=[];</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">6</span>;i++)&#123;</span><br><span class=\"line\">   a[i]=<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(i)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a[<span class=\"number\">3</span>]();<span class=\"comment\">//6</span></span><br></pre></td></tr></table></figure>\n<p>解释：上面的代码中，变量i是var声明的，在全局范围内都有效。所以每一次循环，新的i值都会覆盖旧值，导致最后输出的是最后一轮的i值。<br>如果使用let，声明的变量仅在块级作用域内有效，最后将输出3.<br><strong>for循环,其实是一系列从上到下的块级区域组成的代码最终的简化实现.</strong><br>实际可由下组成：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [];</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">  a[i] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\">  a[i] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> i = <span class=\"number\">2</span>;</span><br><span class=\"line\">  a[i] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> i = <span class=\"number\">3</span>;</span><br><span class=\"line\">  a[i] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> i = <span class=\"number\">4</span>;</span><br><span class=\"line\">  a[i] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> i = <span class=\"number\">5</span>;</span><br><span class=\"line\">  a[i] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">6</span>;</span><br><span class=\"line\">a[<span class=\"number\">3</span>]();</span><br></pre></td></tr></table></figure>\n","site":{"data":{"projects":[{"name":"NJUPT_Esport","url":"https://github.com/Davont/NJUPT_Esport","desc":"一个为在校学生提供体育相关成绩查询、校新闻推送、学生反馈评论的web app"},{"name":"Furniture_Management_System","url":"https://github.com/Davont/Furniture_Management_System","desc":"一个提供家具购买、下单、用户管理、订单管理、商户管理等功能的家具订单CMS系统"},{"name":"weapp-WQPS","url":"https://github.com/Davont/weapp-WQPS","desc":"一个展示型的微信小程序，旨在提供基于卫星传感网的水质监测系统的对外展示平台。"},{"name":"yiban_registration","url":"https://github.com/Davont/yiban_registration","desc":"一个面向社团提供新生加入社团的线上报名表"}]}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在ES6之前，JavaScript没有块级作用域的说法（一对花括号{}为一个块级作用域），只有全局作用域和函数作用域。变量提升即将变量声明提升到它所在作用域的最开始的部分。</p>\n<p>按照正常的编程逻辑来说，变量或者函数，都应该先声明，再调用。</p>\n<p>就像这样：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a;</span><br><span class=\"line\">a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a)</span><br></pre></td></tr></table></figure>\n<p>但是JavaScript再处理程序时，会将当前作用域内所有的变量声明提升到程序的顶部，所以如果程序长成这样，也是可以运行的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\"><span class=\"keyword\">var</span> a;</span><br></pre></td></tr></table></figure>\n<p>因为在执行上面程序之前，变量a的声明被提升到了程序的顶部。</p>\n<p>因此，在JavaScript中，可以先使用变量，再声明变量。</p>\n<p>按照runoob给的定义：<br><em>变量提升：函数声明和变量声明总是会被解释器悄悄地被”提升”到方法体的最顶部。</em></p>\n<blockquote>\n<p>只有声明的变量才会有变量提升，初始化的不会有。</p>\n</blockquote>\n<h2 id=\"变量声明\"><a href=\"#变量声明\" class=\"headerlink\" title=\"变量声明\"></a>变量声明</h2><p>这里要复习一下变量声明的基础知识。</p>\n<p>==变量声明==</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a;</span><br><span class=\"line\">a = <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n<p>==变量初始化==</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n<p>所以以下两端代码，是完全不同的两个输出结果。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">b = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a + b)</span><br><span class=\"line\"><span class=\"keyword\">var</span> b;</span><br></pre></td></tr></table></figure>\n<p>输出3，变量a经过了初始化，变量b被提升了，所以输出1 + 2。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a + b)</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<p>输出NaN，变量a经过了初始化，输出 1 + b，变量b也经过了初始化，所以不存在变量提升，所以在执行1+b的时候，b的值是undefined，1 + undefined = NaN，因此输出NaN。</p>\n<h2 id=\"let\"><a href=\"#let\" class=\"headerlink\" title=\"let\"></a>let</h2><p>ES6中的let命令用于替代ES5中的var命令，因为变量提升会使整个代码看上去很奇怪。</p>\n<p>从2018年中旬开始，我已经在项目中逐渐使用let来代替var了，并且最新版本的webStorm中，当你使用var来声明一个变量的时候，编辑器都会报warnings，并提示你要使用let来代替var。</p>\n<p>按照<a href=\"阮一峰ES6教程\"> 阮一峰ES6教程</a>的话说，let命令改变了语法的行为，它所声明的变量一定要在声明后使用，否则报错。</p>\n<p>来看一段代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a)</span><br><span class=\"line\"><span class=\"keyword\">let</span> a;</span><br></pre></td></tr></table></figure>\n<p>报错：Uncaught ReferenceError: Cannot access ‘a’ before initialization</p>\n<p>意思为：在a未初始化之前无法调用。</p>\n<p>所以我们需要这么写：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a) <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<p>故 let命令不存在变量提升。<br>题外话： 有心的读者可以看看这篇文章：<a href=\"https://www.jianshu.com/p/0f49c88cf169\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/0f49c88cf169</a><br>作者对let const的变量提升产生了质疑。</p>\n<p><strong>let不可以重复声明，会提示我们:</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"number\">10</span>;<span class=\"keyword\">let</span> x = <span class=\"number\">20</span>; </span><br><span class=\"line\"><span class=\"comment\">// Uncaught SyntaxError: Identifier 'x' has already been declared</span></span><br></pre></td></tr></table></figure>\n<p>当我们在全局声明var的时候，我们可以通过window来获取这个变量，但是let不可以，<br>你可以将let变量看其处在一个无形的作用域内。<br>我觉得在大部分时候都应该优先使用let,&lt;不敢说任何时候，总怕来个例外..&gt;。</p>\n<h2 id=\"const\"><a href=\"#const\" class=\"headerlink\" title=\"const\"></a>const</h2><p>刚才同样的代码，用const输出如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a)</span><br><span class=\"line\"><span class=\"keyword\">const</span> a;</span><br></pre></td></tr></table></figure>\n<p>报错：Uncaught SyntaxError: Missing initializer in const declaration</p>\n<p>意思为： 语法错误，在const声明时未进行初始化。</p>\n<p>按照<a href=\"http://es6.ruanyifeng.com/#docs/let\" target=\"_blank\" rel=\"noopener\">阮一峰ES6教程</a>的话说， const在声明时就一定要渲染，</p>\n<p>上面的代码有几个错误，首先const生成的是常量，不能被修改，所以函数第一行就是错误的。其次const必须在声明时就初始化，所以第三行也是错误的。</p>\n<p>换一下写法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(a)</span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n<p>报错：Uncaught ReferenceError: Cannot access ‘a’ before initialization</p>\n<p>和let报错一样，这说明const同样不存在变量提升。</p>\n<h2 id=\"暂时性死区\"><a href=\"#暂时性死区\" class=\"headerlink\" title=\"暂时性死区\"></a>暂时性死区</h2><p>只要块级作用域内存在let命令，它所声明的变量就“绑定”（binding）这个区域，不再受外部的影响。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> tmp = <span class=\"number\">123</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    tmp = <span class=\"string\">'abc'</span>; <span class=\"comment\">// Uncaught ReferenceError: Cannot access 'tmp' before initialization</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> tmp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面代码中，存在全局变量tmp，但是块级作用域内let又声明了一个局部变量tmp，导致后者绑定这个块级作用域，所以在let声明变量前，对tmp赋值会报错。</p>\n<p>ES6明确规定，如果区块中存在let和const命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。</p>\n<p>总之，在代码块内，使用let命令声明变量之前，该变量都是不可用的。这在语法上，称为“暂时性死区”（temporal dead zone，简称TDZ）。</p>\n<p>引用：<a href=\"https://www.cnblogs.com/ricoliu/p/6149912.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/ricoliu/p/6149912.html</a></p>\n<h2 id=\"暂时性死区-1\"><a href=\"#暂时性死区-1\" class=\"headerlink\" title=\"暂时性死区\"></a>暂时性死区</h2><p>只要块级作用域内存在let命令，它所声明的变量就“绑定”（binding）这个区域，不再受外部的影响。</p>\n<blockquote>\n<p>ES6明确规定，如果区块中存在let和const命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。</p>\n</blockquote>\n<h2 id=\"函数提升\"><a href=\"#函数提升\" class=\"headerlink\" title=\"函数提升\"></a>函数提升</h2><p>js中创建函数有两种方式：函数声明式和函数字面量式。只有函数声明才存在函数提升。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a()</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>报错，因为是字面量式，所以不存在函数提升。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a();</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出1，因为是函数声明式，所以存在函数提升。<br>根据刚才的文章，这里应该非常容易理解。</p>\n<h2 id=\"函数提升和变量提升的优先级\"><a href=\"#函数提升和变量提升的优先级\" class=\"headerlink\" title=\"函数提升和变量提升的优先级\"></a>函数提升和变量提升的优先级</h2><p>根据官方书籍《你不知道的javascript》（上卷）中写道：<br>“函数会首先被提升，然后才是变量”。</p>\n<p>所以我们看看下面的代码。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(a);    </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a());    </span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">10</span>) </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a)   </span><br><span class=\"line\">a = <span class=\"number\">6</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a());</span><br></pre></td></tr></table></figure>\n\n<p>由此可见，该函数的执行过程是：<br>1、 提升函数a()<br>2、提升变量a = 6<br>3、输出a 因为a为函数声明未被变量声明替代，所以输出了a的代码<br>4、输出a()，因为a是个函数，所以执行了a()<br>5、重新声明a = 3 ， a被覆盖。<br>6、输出a 因为a = 3，所以输出3。<br>7、输出a()，因为a已经被3覆盖，已经不是一个函数，所以输出a is not a function.</p>\n<p>由此可见函数提升要比变量提升的优先级要高一些，且不会被变量声明覆盖，但是会被变量赋值之后覆盖。</p>\n<p>引用：<a href=\"https://www.cnblogs.com/oxiaojiano/p/7918967.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/oxiaojiano/p/7918967.html</a></p>\n<h2 id=\"练习\"><a href=\"#练习\" class=\"headerlink\" title=\"练习\"></a>练习</h2><p><strong>代码1</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(foo);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"函数声明\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"string\">\"变量\"</span>;</span><br></pre></td></tr></table></figure>\n\n<p>输出为</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"函数声明\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>代码实际为:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"函数声明\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> foo;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo);   </span><br><span class=\"line\">foo = <span class=\"string\">\"变量\"</span>;</span><br></pre></td></tr></table></figure>\n<p><strong>函数提升优先级比变量提升要高，且不会被变量声明覆盖，但是会被变量赋值覆盖。<br>在最后再加上打印就能看到函数已经被覆盖了。</strong></p>\n<p><strong>代码2</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">方式一</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">4</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">6</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a) <span class=\"comment\">// 4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a()) <span class=\"comment\">// a is not a function</span></span><br><span class=\"line\"></span><br><span class=\"line\">方式二</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">6</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a =<span class=\"number\">4</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a) <span class=\"comment\">// 4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a()) <span class=\"comment\">// a is not a function</span></span><br></pre></td></tr></table></figure>\n<p>同一个标识符的情况下，变量声明与函数声明都会提升；函数声明会覆盖变量声明，但不会覆盖变量赋值，即：如果声明变量的同时初始化或赋值那么变量优先级高于函数。</p>\n<p><strong>代码3</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">1</span>,   <span class=\"comment\">// 全局window</span></span><br><span class=\"line\">  y = <span class=\"number\">0</span>,</span><br><span class=\"line\">  z = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (x = x + <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">y = add(x); <span class=\"comment\">// 同名函数调用最后一个，覆盖之前</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (x = x + <span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">z = add(x);</span><br><span class=\"line\"><span class=\"comment\">//运行结果   x:1 y:4 z:4</span></span><br><span class=\"line\">**代码<span class=\"number\">4</span>**</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`js</span></span><br><span class=\"line\"><span class=\"string\">      function a(a) &#123;</span></span><br><span class=\"line\"><span class=\"string\">        console.log(a);</span></span><br><span class=\"line\"><span class=\"string\">        a = 2;</span></span><br><span class=\"line\"><span class=\"string\">        console.log(b);</span></span><br><span class=\"line\"><span class=\"string\">        var b = 3;</span></span><br><span class=\"line\"><span class=\"string\">        console.log(a);</span></span><br><span class=\"line\"><span class=\"string\">      &#125;</span></span><br><span class=\"line\"><span class=\"string\">      a(1);</span></span><br><span class=\"line\"><span class=\"string\">      console.log(a);</span></span><br></pre></td></tr></table></figure>\n<p>结果：<br><img src=\"http://pic.davontt.com/picGo/es6-%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87.png\" alt=\"代码4结果\"></p>\n<p><strong>代码5</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a=<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a=<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test();</span><br></pre></td></tr></table></figure>\n<p>根据变量声明提升和变量搜索机制，函数test（）应为</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a);<span class=\"comment\">//此时由于a并咩有被赋值，所以也就是undefined</span></span><br><span class=\"line\">        a=<span class=\"number\">1</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>*<em>代码6<br>*</em></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> b=<span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test2</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.b=<span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(b);<span class=\"comment\">//值为3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test2();</span><br></pre></td></tr></table></figure>\n<p>任何通过附加在window上的变量都相当于声明一个全局变量，或者是给全局变量赋值</p>\n<p><strong>代码7</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c=<span class=\"number\">5</span>; </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test3</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.c=<span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(c);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> c;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">window</span>.c);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test3();</span><br></pre></td></tr></table></figure>\n<p>根据变量声明提升和变量搜索机制：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c=<span class=\"number\">5</span>;<span class=\"comment\">//声明一个全局变量c </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test3</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> c;<span class=\"comment\">//变量声明提升，声明一个局部变量</span></span><br><span class=\"line\">    <span class=\"built_in\">window</span>.c=<span class=\"number\">3</span>;<span class=\"comment\">//改变全局变量c的值</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(c);<span class=\"comment\">//由于此时的c是一个局部变量c，并且没有被赋值 c就是undefined    </span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">window</span>.c);<span class=\"comment\">//此时的c就是一个全局变量c，也就是值为3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test3();</span><br></pre></td></tr></table></figure>\n<p><strong>代码8</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hah</span>(<span class=\"params\">number</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> a=<span class=\"string\">\"show\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(number!=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            alert(a);<span class=\"comment\">//show</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">var</span> a=<span class=\"number\">4</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            alert(a);<span class=\"comment\">//4</span></span><br><span class=\"line\"></span><br><span class=\"line\">            number--;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   hah(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n<p>为什么这里的a 弹出的是show?</p>\n<p>因为在ES6之前，JavaScript没有块级作用域，只有全局作用域和函数作用域。</p>\n<p>变量提升的本质是将变量声明提升到它所在作用域的最开始的部分。</p>\n<p>浏览器环境 window 是全局作用域，函数 function 包裹的是函数作用域。</p>\n<p>while 不是函数，它没有作用域。所以，在条件为 true 的时候相当于：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hah</span>(<span class=\"params\">number</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> a=<span class=\"string\">\"show\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        alert(a);<span class=\"comment\">//show</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> a=<span class=\"number\">4</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        alert(a);<span class=\"comment\">//4</span></span><br><span class=\"line\"></span><br><span class=\"line\">        number--;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> hah(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n\n<p>再进一步分解，就是：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hah</span>(<span class=\"params\">number</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> a;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> a;</span><br><span class=\"line\"></span><br><span class=\"line\">    a = <span class=\"string\">\"show\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    alert(a);<span class=\"comment\">//show</span></span><br><span class=\"line\"></span><br><span class=\"line\">    a=<span class=\"number\">4</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    alert(a);<span class=\"comment\">//4</span></span><br><span class=\"line\"></span><br><span class=\"line\">    number--;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">hah(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n<p>代码9</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a=[];</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">6</span>;i++)&#123;</span><br><span class=\"line\">   a[i]=<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(i)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a[<span class=\"number\">3</span>]();<span class=\"comment\">//6</span></span><br></pre></td></tr></table></figure>\n<p>解释：上面的代码中，变量i是var声明的，在全局范围内都有效。所以每一次循环，新的i值都会覆盖旧值，导致最后输出的是最后一轮的i值。<br>如果使用let，声明的变量仅在块级作用域内有效，最后将输出3.<br><strong>for循环,其实是一系列从上到下的块级区域组成的代码最终的简化实现.</strong><br>实际可由下组成：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [];</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">  a[i] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\">  a[i] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> i = <span class=\"number\">2</span>;</span><br><span class=\"line\">  a[i] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> i = <span class=\"number\">3</span>;</span><br><span class=\"line\">  a[i] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> i = <span class=\"number\">4</span>;</span><br><span class=\"line\">  a[i] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> i = <span class=\"number\">5</span>;</span><br><span class=\"line\">  a[i] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">6</span>;</span><br><span class=\"line\">a[<span class=\"number\">3</span>]();</span><br></pre></td></tr></table></figure>\n"},{"title":"使用Git-Hooks将博客部署到VPS","date":"2018-10-14T19:04:17.000Z","_content":"# 前言\n使用github pages 搭建博客太慢了了呀，而且我已经买了3年的阿里云vps服务器，不用白不用。所以我最近又开始折腾着把博客搬到自己的VPS上。在VPS部署时还因为权限问题一直403...弄了很久才弄好...菜是原罪...\n\n# Git Hooks自动部署\n\n## 部署原理\n通过在本地编辑文本，然后使用Git远程部署到VPS的Git仓库。hexo d命令实际上只deploy了本地的public文件夹，Git Hooks实际上就是当Git仓库收到最新的push时，将Git仓库接受到的内容复制到VPS上的网站目录内。相当于完成了手动将public文件夹复制到VPS的网站根目录里。\n\n## VPS操作\n### 安装配置Git\n- 安装Git\n通过SSH连接VPS，执行：apt-get install git，完成后通过git --version查看Git版本，若显示版本信息则说明安装成功。\n\n![gitversion](http://pic.davontt.com/picGo/git-version.png)\n<center style=\"color:#AAAAAA\">查看Git版本</center>\n\n- 初始化git仓库\n```\ncd /home/git                //切换到git用户目录\nmkdir blog.git              //创建git仓库文件夹，以blog.git为例\ncd blog.git             //进入仓库目录\ngit init --bare             //使用--bare参数初始化为裸仓库，这样创建的仓库不包含工作区\n```\n- 创建网站目录\n\n```\ncd /var/www/                //切换目录\nmkdir blog              //创建网站目录，以blog为例\n```\n\n- 配置SSH\n\n```\ncd /home/git                //切换到git用户目录\nmkdir .ssh              //创建.ssh目录\ncd .ssh\nvim authorized_keys\n```\n然后将本地的公钥复制到authorized_keys文件里(公钥即上文中本地执行cat ~/.ssh/id_rsa.pub查看的内容)\n\n- 用户组管理\n执行\n```\nll /home/git/\nll /var/www/\n```\n### 安装配置nginx\n\n具体可以看我以前的文章\n安装成功后，记得保存退出\n启动nginx：systemctl start nginx\n设置开机自动启动：systemctl enable nginx\n查看运行状态：systemctl status nginx,显示running表示成功运行。\n\n![nginx](http://pic.davontt.com/picGo/git-nginx.png)\n<center style=\"color:#AAAAAA\">查看Nginx状态</center>\n\n### 配置Git Hooks\n- 创建post-receive文件\ngit用户下执行：\n```\ncd /home/git/blog.git/hooks     //切换到hooks目录下\nvim post-receive            //创建文件\n```\n复制下面的内容到post-receive文件中：\n```\n#!/bin/bash\nGIT_REPO=/home/git/blog.git\nTMP_GIT_CLONE=/tmp/blog\nPUBLIC_WWW=/var/www/blog\nrm -rf ${TMP_GIT_CLONE}\ngit clone $GIT_REPO $TMP_GIT_CLONE\nrm -rf ${PUBLIC_WWW}/*\ncp -rf ${TMP_GIT_CLONE}/* ${PUBLIC_WWW}\n```\n\n保存退出后，执行：chmod +x post-receive赋予可执行权限。\n\n\n## 本地操作\n### 配置Hexo\n打开本地博客根目录下的_config.yml文件，找到最后的deploy配置，修改为：\n```\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n    type: git\n    repo: git@VPS的IP:blog.git\n    branch: master\n```\n### 本地部署\n\n```\nhexo clean      //清理缓存\nhexo s          //本地预览\nhexo server     //本地预览\n```\n\n一般来说，写文章时一般先使用hexo s打开本地预览，一边写一边预览修改，完成之后再通过hexo g -d生成上传。\n","source":"_posts/git-hooks.md","raw":"---\ntitle: 使用Git-Hooks将博客部署到VPS\ndate: 2018-10-15 03:04:17\ntags: [git,linux]\n---\n# 前言\n使用github pages 搭建博客太慢了了呀，而且我已经买了3年的阿里云vps服务器，不用白不用。所以我最近又开始折腾着把博客搬到自己的VPS上。在VPS部署时还因为权限问题一直403...弄了很久才弄好...菜是原罪...\n\n# Git Hooks自动部署\n\n## 部署原理\n通过在本地编辑文本，然后使用Git远程部署到VPS的Git仓库。hexo d命令实际上只deploy了本地的public文件夹，Git Hooks实际上就是当Git仓库收到最新的push时，将Git仓库接受到的内容复制到VPS上的网站目录内。相当于完成了手动将public文件夹复制到VPS的网站根目录里。\n\n## VPS操作\n### 安装配置Git\n- 安装Git\n通过SSH连接VPS，执行：apt-get install git，完成后通过git --version查看Git版本，若显示版本信息则说明安装成功。\n\n![gitversion](http://pic.davontt.com/picGo/git-version.png)\n<center style=\"color:#AAAAAA\">查看Git版本</center>\n\n- 初始化git仓库\n```\ncd /home/git                //切换到git用户目录\nmkdir blog.git              //创建git仓库文件夹，以blog.git为例\ncd blog.git             //进入仓库目录\ngit init --bare             //使用--bare参数初始化为裸仓库，这样创建的仓库不包含工作区\n```\n- 创建网站目录\n\n```\ncd /var/www/                //切换目录\nmkdir blog              //创建网站目录，以blog为例\n```\n\n- 配置SSH\n\n```\ncd /home/git                //切换到git用户目录\nmkdir .ssh              //创建.ssh目录\ncd .ssh\nvim authorized_keys\n```\n然后将本地的公钥复制到authorized_keys文件里(公钥即上文中本地执行cat ~/.ssh/id_rsa.pub查看的内容)\n\n- 用户组管理\n执行\n```\nll /home/git/\nll /var/www/\n```\n### 安装配置nginx\n\n具体可以看我以前的文章\n安装成功后，记得保存退出\n启动nginx：systemctl start nginx\n设置开机自动启动：systemctl enable nginx\n查看运行状态：systemctl status nginx,显示running表示成功运行。\n\n![nginx](http://pic.davontt.com/picGo/git-nginx.png)\n<center style=\"color:#AAAAAA\">查看Nginx状态</center>\n\n### 配置Git Hooks\n- 创建post-receive文件\ngit用户下执行：\n```\ncd /home/git/blog.git/hooks     //切换到hooks目录下\nvim post-receive            //创建文件\n```\n复制下面的内容到post-receive文件中：\n```\n#!/bin/bash\nGIT_REPO=/home/git/blog.git\nTMP_GIT_CLONE=/tmp/blog\nPUBLIC_WWW=/var/www/blog\nrm -rf ${TMP_GIT_CLONE}\ngit clone $GIT_REPO $TMP_GIT_CLONE\nrm -rf ${PUBLIC_WWW}/*\ncp -rf ${TMP_GIT_CLONE}/* ${PUBLIC_WWW}\n```\n\n保存退出后，执行：chmod +x post-receive赋予可执行权限。\n\n\n## 本地操作\n### 配置Hexo\n打开本地博客根目录下的_config.yml文件，找到最后的deploy配置，修改为：\n```\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n    type: git\n    repo: git@VPS的IP:blog.git\n    branch: master\n```\n### 本地部署\n\n```\nhexo clean      //清理缓存\nhexo s          //本地预览\nhexo server     //本地预览\n```\n\n一般来说，写文章时一般先使用hexo s打开本地预览，一边写一边预览修改，完成之后再通过hexo g -d生成上传。\n","slug":"git-hooks","published":1,"updated":"2020-12-20T16:36:55.007Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrr9soiw00091l5xcf0s61yw","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>使用github pages 搭建博客太慢了了呀，而且我已经买了3年的阿里云vps服务器，不用白不用。所以我最近又开始折腾着把博客搬到自己的VPS上。在VPS部署时还因为权限问题一直403…弄了很久才弄好…菜是原罪…</p>\n<h1 id=\"Git-Hooks自动部署\"><a href=\"#Git-Hooks自动部署\" class=\"headerlink\" title=\"Git Hooks自动部署\"></a>Git Hooks自动部署</h1><h2 id=\"部署原理\"><a href=\"#部署原理\" class=\"headerlink\" title=\"部署原理\"></a>部署原理</h2><p>通过在本地编辑文本，然后使用Git远程部署到VPS的Git仓库。hexo d命令实际上只deploy了本地的public文件夹，Git Hooks实际上就是当Git仓库收到最新的push时，将Git仓库接受到的内容复制到VPS上的网站目录内。相当于完成了手动将public文件夹复制到VPS的网站根目录里。</p>\n<h2 id=\"VPS操作\"><a href=\"#VPS操作\" class=\"headerlink\" title=\"VPS操作\"></a>VPS操作</h2><h3 id=\"安装配置Git\"><a href=\"#安装配置Git\" class=\"headerlink\" title=\"安装配置Git\"></a>安装配置Git</h3><ul>\n<li>安装Git<br>通过SSH连接VPS，执行：apt-get install git，完成后通过git –version查看Git版本，若显示版本信息则说明安装成功。</li>\n</ul>\n<p><img src=\"http://pic.davontt.com/picGo/git-version.png\" alt=\"gitversion\"></p>\n<center style=\"color:#AAAAAA\">查看Git版本</center>\n\n<ul>\n<li>初始化git仓库<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">cd</span> <span class=\"string\">/home/git</span>                <span class=\"string\">//</span>切换到git用户目录</span><br><span class=\"line\">mkdir blog.git              <span class=\"string\">//</span>创建git仓库文件夹，以blog.git为例</span><br><span class=\"line\"><span class=\"keyword\">cd</span> blog.git             <span class=\"string\">//</span>进入仓库目录</span><br><span class=\"line\">git init <span class=\"params\">--bare</span>             <span class=\"string\">//</span>使用<span class=\"params\">--bare</span>参数初始化为裸仓库，这样创建的仓库不包含工作区</span><br></pre></td></tr></table></figure></li>\n<li>创建网站目录</li>\n</ul>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">cd</span> /<span class=\"keyword\">var</span>/www/                <span class=\"comment\">//切换目录</span></span><br><span class=\"line\"><span class=\"keyword\">mkdir</span> blog              <span class=\"comment\">//创建网站目录，以blog为例</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>配置SSH</li>\n</ul>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">cd</span> <span class=\"string\">/home/git</span>                <span class=\"string\">//</span>切换到git用户目录</span><br><span class=\"line\">mkdir <span class=\"string\">.ssh</span>              <span class=\"string\">//</span>创建<span class=\"string\">.ssh</span>目录</span><br><span class=\"line\"><span class=\"keyword\">cd</span> <span class=\"string\">.ssh</span></span><br><span class=\"line\">vim authorized_keys</span><br></pre></td></tr></table></figure>\n<p>然后将本地的公钥复制到authorized_keys文件里(公钥即上文中本地执行cat ~/.ssh/id_rsa.pub查看的内容)</p>\n<ul>\n<li>用户组管理<br>执行<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ll <span class=\"meta-keyword\">/home/</span>git/</span><br><span class=\"line\">ll <span class=\"meta-keyword\">/var/</span>www/</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装配置nginx\"><a href=\"#安装配置nginx\" class=\"headerlink\" title=\"安装配置nginx\"></a>安装配置nginx</h3></li>\n</ul>\n<p>具体可以看我以前的文章<br>安装成功后，记得保存退出<br>启动nginx：systemctl start nginx<br>设置开机自动启动：systemctl enable nginx<br>查看运行状态：systemctl status nginx,显示running表示成功运行。</p>\n<p><img src=\"http://pic.davontt.com/picGo/git-nginx.png\" alt=\"nginx\"></p>\n<center style=\"color:#AAAAAA\">查看Nginx状态</center>\n\n<h3 id=\"配置Git-Hooks\"><a href=\"#配置Git-Hooks\" class=\"headerlink\" title=\"配置Git Hooks\"></a>配置Git Hooks</h3><ul>\n<li>创建post-receive文件<br>git用户下执行：<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd <span class=\"regexp\">/home/gi</span>t<span class=\"regexp\">/blog.git/</span>hooks     <span class=\"regexp\">//</span>切换到hooks目录下</span><br><span class=\"line\">vim post-receive            <span class=\"regexp\">//</span>创建文件</span><br></pre></td></tr></table></figure>\n复制下面的内容到post-receive文件中：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">GIT_REPO=/home/git/blog.git</span><br><span class=\"line\">TMP_GIT_CLONE=/tmp/blog</span><br><span class=\"line\">PUBLIC_WWW=/var/www/blog</span><br><span class=\"line\">rm -rf <span class=\"variable\">$&#123;TMP_GIT_CLONE&#125;</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> <span class=\"variable\">$GIT_REPO</span> <span class=\"variable\">$TMP_GIT_CLONE</span></span><br><span class=\"line\">rm -rf <span class=\"variable\">$&#123;PUBLIC_WWW&#125;</span>/*</span><br><span class=\"line\">cp -rf <span class=\"variable\">$&#123;TMP_GIT_CLONE&#125;</span>/* <span class=\"variable\">$&#123;PUBLIC_WWW&#125;</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>保存退出后，执行：chmod +x post-receive赋予可执行权限。</p>\n<h2 id=\"本地操作\"><a href=\"#本地操作\" class=\"headerlink\" title=\"本地操作\"></a>本地操作</h2><h3 id=\"配置Hexo\"><a href=\"#配置Hexo\" class=\"headerlink\" title=\"配置Hexo\"></a>配置Hexo</h3><p>打开本地博客根目录下的_config.yml文件，找到最后的deploy配置，修改为：</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># Deployment</span></span><br><span class=\"line\"><span class=\"meta\">## Docs: https:<span class=\"comment\">//hexo.io/docs/deployment.html</span></span></span><br><span class=\"line\"><span class=\"symbol\">deploy:</span></span><br><span class=\"line\"><span class=\"symbol\">    type:</span> git</span><br><span class=\"line\"><span class=\"symbol\">    repo:</span> git@VPS的IP:blog.git</span><br><span class=\"line\"><span class=\"symbol\">    branch:</span> master</span><br></pre></td></tr></table></figure>\n<h3 id=\"本地部署\"><a href=\"#本地部署\" class=\"headerlink\" title=\"本地部署\"></a>本地部署</h3><figure class=\"highlight axapta\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean      <span class=\"comment\">//清理缓存</span></span><br><span class=\"line\">hexo s          <span class=\"comment\">//本地预览</span></span><br><span class=\"line\">hexo <span class=\"keyword\">server</span>     <span class=\"comment\">//本地预览</span></span><br></pre></td></tr></table></figure>\n\n<p>一般来说，写文章时一般先使用hexo s打开本地预览，一边写一边预览修改，完成之后再通过hexo g -d生成上传。</p>\n","site":{"data":{"projects":[{"name":"NJUPT_Esport","url":"https://github.com/Davont/NJUPT_Esport","desc":"一个为在校学生提供体育相关成绩查询、校新闻推送、学生反馈评论的web app"},{"name":"Furniture_Management_System","url":"https://github.com/Davont/Furniture_Management_System","desc":"一个提供家具购买、下单、用户管理、订单管理、商户管理等功能的家具订单CMS系统"},{"name":"weapp-WQPS","url":"https://github.com/Davont/weapp-WQPS","desc":"一个展示型的微信小程序，旨在提供基于卫星传感网的水质监测系统的对外展示平台。"},{"name":"yiban_registration","url":"https://github.com/Davont/yiban_registration","desc":"一个面向社团提供新生加入社团的线上报名表"}]}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>使用github pages 搭建博客太慢了了呀，而且我已经买了3年的阿里云vps服务器，不用白不用。所以我最近又开始折腾着把博客搬到自己的VPS上。在VPS部署时还因为权限问题一直403…弄了很久才弄好…菜是原罪…</p>\n<h1 id=\"Git-Hooks自动部署\"><a href=\"#Git-Hooks自动部署\" class=\"headerlink\" title=\"Git Hooks自动部署\"></a>Git Hooks自动部署</h1><h2 id=\"部署原理\"><a href=\"#部署原理\" class=\"headerlink\" title=\"部署原理\"></a>部署原理</h2><p>通过在本地编辑文本，然后使用Git远程部署到VPS的Git仓库。hexo d命令实际上只deploy了本地的public文件夹，Git Hooks实际上就是当Git仓库收到最新的push时，将Git仓库接受到的内容复制到VPS上的网站目录内。相当于完成了手动将public文件夹复制到VPS的网站根目录里。</p>\n<h2 id=\"VPS操作\"><a href=\"#VPS操作\" class=\"headerlink\" title=\"VPS操作\"></a>VPS操作</h2><h3 id=\"安装配置Git\"><a href=\"#安装配置Git\" class=\"headerlink\" title=\"安装配置Git\"></a>安装配置Git</h3><ul>\n<li>安装Git<br>通过SSH连接VPS，执行：apt-get install git，完成后通过git –version查看Git版本，若显示版本信息则说明安装成功。</li>\n</ul>\n<p><img src=\"http://pic.davontt.com/picGo/git-version.png\" alt=\"gitversion\"></p>\n<center style=\"color:#AAAAAA\">查看Git版本</center>\n\n<ul>\n<li>初始化git仓库<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">cd</span> <span class=\"string\">/home/git</span>                <span class=\"string\">//</span>切换到git用户目录</span><br><span class=\"line\">mkdir blog.git              <span class=\"string\">//</span>创建git仓库文件夹，以blog.git为例</span><br><span class=\"line\"><span class=\"keyword\">cd</span> blog.git             <span class=\"string\">//</span>进入仓库目录</span><br><span class=\"line\">git init <span class=\"params\">--bare</span>             <span class=\"string\">//</span>使用<span class=\"params\">--bare</span>参数初始化为裸仓库，这样创建的仓库不包含工作区</span><br></pre></td></tr></table></figure></li>\n<li>创建网站目录</li>\n</ul>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">cd</span> /<span class=\"keyword\">var</span>/www/                <span class=\"comment\">//切换目录</span></span><br><span class=\"line\"><span class=\"keyword\">mkdir</span> blog              <span class=\"comment\">//创建网站目录，以blog为例</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>配置SSH</li>\n</ul>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">cd</span> <span class=\"string\">/home/git</span>                <span class=\"string\">//</span>切换到git用户目录</span><br><span class=\"line\">mkdir <span class=\"string\">.ssh</span>              <span class=\"string\">//</span>创建<span class=\"string\">.ssh</span>目录</span><br><span class=\"line\"><span class=\"keyword\">cd</span> <span class=\"string\">.ssh</span></span><br><span class=\"line\">vim authorized_keys</span><br></pre></td></tr></table></figure>\n<p>然后将本地的公钥复制到authorized_keys文件里(公钥即上文中本地执行cat ~/.ssh/id_rsa.pub查看的内容)</p>\n<ul>\n<li>用户组管理<br>执行<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ll <span class=\"meta-keyword\">/home/</span>git/</span><br><span class=\"line\">ll <span class=\"meta-keyword\">/var/</span>www/</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装配置nginx\"><a href=\"#安装配置nginx\" class=\"headerlink\" title=\"安装配置nginx\"></a>安装配置nginx</h3></li>\n</ul>\n<p>具体可以看我以前的文章<br>安装成功后，记得保存退出<br>启动nginx：systemctl start nginx<br>设置开机自动启动：systemctl enable nginx<br>查看运行状态：systemctl status nginx,显示running表示成功运行。</p>\n<p><img src=\"http://pic.davontt.com/picGo/git-nginx.png\" alt=\"nginx\"></p>\n<center style=\"color:#AAAAAA\">查看Nginx状态</center>\n\n<h3 id=\"配置Git-Hooks\"><a href=\"#配置Git-Hooks\" class=\"headerlink\" title=\"配置Git Hooks\"></a>配置Git Hooks</h3><ul>\n<li>创建post-receive文件<br>git用户下执行：<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd <span class=\"regexp\">/home/gi</span>t<span class=\"regexp\">/blog.git/</span>hooks     <span class=\"regexp\">//</span>切换到hooks目录下</span><br><span class=\"line\">vim post-receive            <span class=\"regexp\">//</span>创建文件</span><br></pre></td></tr></table></figure>\n复制下面的内容到post-receive文件中：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">GIT_REPO=/home/git/blog.git</span><br><span class=\"line\">TMP_GIT_CLONE=/tmp/blog</span><br><span class=\"line\">PUBLIC_WWW=/var/www/blog</span><br><span class=\"line\">rm -rf <span class=\"variable\">$&#123;TMP_GIT_CLONE&#125;</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> <span class=\"variable\">$GIT_REPO</span> <span class=\"variable\">$TMP_GIT_CLONE</span></span><br><span class=\"line\">rm -rf <span class=\"variable\">$&#123;PUBLIC_WWW&#125;</span>/*</span><br><span class=\"line\">cp -rf <span class=\"variable\">$&#123;TMP_GIT_CLONE&#125;</span>/* <span class=\"variable\">$&#123;PUBLIC_WWW&#125;</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>保存退出后，执行：chmod +x post-receive赋予可执行权限。</p>\n<h2 id=\"本地操作\"><a href=\"#本地操作\" class=\"headerlink\" title=\"本地操作\"></a>本地操作</h2><h3 id=\"配置Hexo\"><a href=\"#配置Hexo\" class=\"headerlink\" title=\"配置Hexo\"></a>配置Hexo</h3><p>打开本地博客根目录下的_config.yml文件，找到最后的deploy配置，修改为：</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># Deployment</span></span><br><span class=\"line\"><span class=\"meta\">## Docs: https:<span class=\"comment\">//hexo.io/docs/deployment.html</span></span></span><br><span class=\"line\"><span class=\"symbol\">deploy:</span></span><br><span class=\"line\"><span class=\"symbol\">    type:</span> git</span><br><span class=\"line\"><span class=\"symbol\">    repo:</span> git@VPS的IP:blog.git</span><br><span class=\"line\"><span class=\"symbol\">    branch:</span> master</span><br></pre></td></tr></table></figure>\n<h3 id=\"本地部署\"><a href=\"#本地部署\" class=\"headerlink\" title=\"本地部署\"></a>本地部署</h3><figure class=\"highlight axapta\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean      <span class=\"comment\">//清理缓存</span></span><br><span class=\"line\">hexo s          <span class=\"comment\">//本地预览</span></span><br><span class=\"line\">hexo <span class=\"keyword\">server</span>     <span class=\"comment\">//本地预览</span></span><br></pre></td></tr></table></figure>\n\n<p>一般来说，写文章时一般先使用hexo s打开本地预览，一边写一边预览修改，完成之后再通过hexo g -d生成上传。</p>\n"},{"title":"谷歌相机初探","date":"2020-02-09T09:23:25.000Z","_content":"## 前言\n最近春招找工作，之前的简历，我用的头像都是正装照（其实是 P 的，去照相馆照的太夸张了，跟哪吒似的），现在想用个生活照，更加随和一点，毕竟程序员很少穿正装（~~都穿的格子衫大裤衩~~），可是我用我的手机（一加7T）拍的不尽人意，什么叫不尽人意呢，就是太亮了，有点不真实感，可能和一加的白平衡太高有关，白平衡太高，拍的照片都很亮丽，比较讨喜。但是我更喜欢真实的。\n于是我就选择了HDR+ 超厉害的google camera。\n\n## 如何下载\n### Google Camera Port\n说到怎么安装，说多了都是泪啊，什么微博阿狗酱，什么囧帝汉化，什么一加社区，我找了，要不就是适配三星小米的，要不就是安卓9的，而且一加7T是今年10份刚出的，已经用到了安卓10，比较新。\n\n后来我找到了这个社区，在下面\n\n[传送门](https://www.celsoazevedo.com/files/android/google-camera/)\n\n它会实时更新一些谷歌相机的apk，实际上谷歌相机是闭源的，它只是给pixel手机做的一个软件，所有多多少少都有点兼容性的问题，好在这个网站上有很多适配机型。\n\n![](http://pic.davontt.com/picGo/google-camera.png)\n\n## 下载教程\n里面有个新手导航，点进去然后根据意思就知道怎么做了，其实很简单。\n### 点进去那个新手导航\n![](http://pic.davontt.com/picGo/google-camera2.png)\n\n\n\n### 在最新的 google camera 7.x 选择apk\n![](http://pic.davontt.com/picGo/google-camera3-new.jpg)\n\n<center style=\"color:#AAAAAA\">点进去 google camera 7.x</center>\n\n### 然后增加配置文件\n\n![](http://pic.davontt.com/picGo/google-camera4.png)\n\n\n### 根据机型来选择\n\n![](http://pic.davontt.com/picGo/google-camera5.png)\n\n\n> 第一个配置文件我试了一下会出bug，于是用了第二个。\n\n## 安装教程\n\n1. 安装谷歌框架，三星机型可以直接去酷安下载Google Play Store 安装即可激活谷歌服务。小米、魅族等机型可以安装MicroG替代\n2. 安装好相机后，打开设置。\n\n长按即可打开设置\n![](http://pic.davontt.com/picGo/google-camera6.jpg)\n\n![](http://pic.davontt.com/picGo/google-camera7.jpg)\n\n3. 最下面找到Save,然后点击Save 之后点击弹窗中的保存设置。\n![](http://pic.davontt.com/picGo/google-camera8.jpg)\n4. 找到系统的文件管理器\n5. 找到从之前config中下载的xml文件\n6. 将xml文件复制到GCam中的Config文件夹中（Gcam文件夹一般在根目录）\n7. 点击图中框柱位置（建议多点几次，总会点到的）\n\n![](http://pic.davontt.com/picGo/google-camera9.jpg)\n\n8.当弹出下图的选择配置后，选择其中一个xml进行恢复。\n\n![](http://pic.davontt.com/picGo/google-camera10.jpg)\n\n9. 点击恢复后重启相机\n\n## 没有对比就没有伤害\n人像处理就算了，不露脸了。试试一加7T的夜间拍摄和google相机的夜间拍摄吧。\n一加7T 原版相机：\n![](http://pic.davontt.com/picGo/google-camera11.jpg)\n\ngoogle相机：\n![](http://pic.davontt.com/picGo/google-camera12.jpg)\n\n差别不言自明。\n\n","source":"_posts/google-camera.md","raw":"---\ntitle: 谷歌相机初探\ndate: 2020-02-09 17:23:25\ntags: [科技]\n---\n## 前言\n最近春招找工作，之前的简历，我用的头像都是正装照（其实是 P 的，去照相馆照的太夸张了，跟哪吒似的），现在想用个生活照，更加随和一点，毕竟程序员很少穿正装（~~都穿的格子衫大裤衩~~），可是我用我的手机（一加7T）拍的不尽人意，什么叫不尽人意呢，就是太亮了，有点不真实感，可能和一加的白平衡太高有关，白平衡太高，拍的照片都很亮丽，比较讨喜。但是我更喜欢真实的。\n于是我就选择了HDR+ 超厉害的google camera。\n\n## 如何下载\n### Google Camera Port\n说到怎么安装，说多了都是泪啊，什么微博阿狗酱，什么囧帝汉化，什么一加社区，我找了，要不就是适配三星小米的，要不就是安卓9的，而且一加7T是今年10份刚出的，已经用到了安卓10，比较新。\n\n后来我找到了这个社区，在下面\n\n[传送门](https://www.celsoazevedo.com/files/android/google-camera/)\n\n它会实时更新一些谷歌相机的apk，实际上谷歌相机是闭源的，它只是给pixel手机做的一个软件，所有多多少少都有点兼容性的问题，好在这个网站上有很多适配机型。\n\n![](http://pic.davontt.com/picGo/google-camera.png)\n\n## 下载教程\n里面有个新手导航，点进去然后根据意思就知道怎么做了，其实很简单。\n### 点进去那个新手导航\n![](http://pic.davontt.com/picGo/google-camera2.png)\n\n\n\n### 在最新的 google camera 7.x 选择apk\n![](http://pic.davontt.com/picGo/google-camera3-new.jpg)\n\n<center style=\"color:#AAAAAA\">点进去 google camera 7.x</center>\n\n### 然后增加配置文件\n\n![](http://pic.davontt.com/picGo/google-camera4.png)\n\n\n### 根据机型来选择\n\n![](http://pic.davontt.com/picGo/google-camera5.png)\n\n\n> 第一个配置文件我试了一下会出bug，于是用了第二个。\n\n## 安装教程\n\n1. 安装谷歌框架，三星机型可以直接去酷安下载Google Play Store 安装即可激活谷歌服务。小米、魅族等机型可以安装MicroG替代\n2. 安装好相机后，打开设置。\n\n长按即可打开设置\n![](http://pic.davontt.com/picGo/google-camera6.jpg)\n\n![](http://pic.davontt.com/picGo/google-camera7.jpg)\n\n3. 最下面找到Save,然后点击Save 之后点击弹窗中的保存设置。\n![](http://pic.davontt.com/picGo/google-camera8.jpg)\n4. 找到系统的文件管理器\n5. 找到从之前config中下载的xml文件\n6. 将xml文件复制到GCam中的Config文件夹中（Gcam文件夹一般在根目录）\n7. 点击图中框柱位置（建议多点几次，总会点到的）\n\n![](http://pic.davontt.com/picGo/google-camera9.jpg)\n\n8.当弹出下图的选择配置后，选择其中一个xml进行恢复。\n\n![](http://pic.davontt.com/picGo/google-camera10.jpg)\n\n9. 点击恢复后重启相机\n\n## 没有对比就没有伤害\n人像处理就算了，不露脸了。试试一加7T的夜间拍摄和google相机的夜间拍摄吧。\n一加7T 原版相机：\n![](http://pic.davontt.com/picGo/google-camera11.jpg)\n\ngoogle相机：\n![](http://pic.davontt.com/picGo/google-camera12.jpg)\n\n差别不言自明。\n\n","slug":"google-camera","published":1,"updated":"2020-12-20T16:36:55.008Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrr9soiz000b1l5xhjdmbs1f","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最近春招找工作，之前的简历，我用的头像都是正装照（其实是 P 的，去照相馆照的太夸张了，跟哪吒似的），现在想用个生活照，更加随和一点，毕竟程序员很少穿正装（<del>都穿的格子衫大裤衩</del>），可是我用我的手机（一加7T）拍的不尽人意，什么叫不尽人意呢，就是太亮了，有点不真实感，可能和一加的白平衡太高有关，白平衡太高，拍的照片都很亮丽，比较讨喜。但是我更喜欢真实的。<br>于是我就选择了HDR+ 超厉害的google camera。</p>\n<h2 id=\"如何下载\"><a href=\"#如何下载\" class=\"headerlink\" title=\"如何下载\"></a>如何下载</h2><h3 id=\"Google-Camera-Port\"><a href=\"#Google-Camera-Port\" class=\"headerlink\" title=\"Google Camera Port\"></a>Google Camera Port</h3><p>说到怎么安装，说多了都是泪啊，什么微博阿狗酱，什么囧帝汉化，什么一加社区，我找了，要不就是适配三星小米的，要不就是安卓9的，而且一加7T是今年10份刚出的，已经用到了安卓10，比较新。</p>\n<p>后来我找到了这个社区，在下面</p>\n<p><a href=\"https://www.celsoazevedo.com/files/android/google-camera/\" target=\"_blank\" rel=\"noopener\">传送门</a></p>\n<p>它会实时更新一些谷歌相机的apk，实际上谷歌相机是闭源的，它只是给pixel手机做的一个软件，所有多多少少都有点兼容性的问题，好在这个网站上有很多适配机型。</p>\n<p><img src=\"http://pic.davontt.com/picGo/google-camera.png\" alt=\"\"></p>\n<h2 id=\"下载教程\"><a href=\"#下载教程\" class=\"headerlink\" title=\"下载教程\"></a>下载教程</h2><p>里面有个新手导航，点进去然后根据意思就知道怎么做了，其实很简单。</p>\n<h3 id=\"点进去那个新手导航\"><a href=\"#点进去那个新手导航\" class=\"headerlink\" title=\"点进去那个新手导航\"></a>点进去那个新手导航</h3><p><img src=\"http://pic.davontt.com/picGo/google-camera2.png\" alt=\"\"></p>\n<h3 id=\"在最新的-google-camera-7-x-选择apk\"><a href=\"#在最新的-google-camera-7-x-选择apk\" class=\"headerlink\" title=\"在最新的 google camera 7.x 选择apk\"></a>在最新的 google camera 7.x 选择apk</h3><p><img src=\"http://pic.davontt.com/picGo/google-camera3-new.jpg\" alt=\"\"></p>\n<center style=\"color:#AAAAAA\">点进去 google camera 7.x</center>\n\n<h3 id=\"然后增加配置文件\"><a href=\"#然后增加配置文件\" class=\"headerlink\" title=\"然后增加配置文件\"></a>然后增加配置文件</h3><p><img src=\"http://pic.davontt.com/picGo/google-camera4.png\" alt=\"\"></p>\n<h3 id=\"根据机型来选择\"><a href=\"#根据机型来选择\" class=\"headerlink\" title=\"根据机型来选择\"></a>根据机型来选择</h3><p><img src=\"http://pic.davontt.com/picGo/google-camera5.png\" alt=\"\"></p>\n<blockquote>\n<p>第一个配置文件我试了一下会出bug，于是用了第二个。</p>\n</blockquote>\n<h2 id=\"安装教程\"><a href=\"#安装教程\" class=\"headerlink\" title=\"安装教程\"></a>安装教程</h2><ol>\n<li>安装谷歌框架，三星机型可以直接去酷安下载Google Play Store 安装即可激活谷歌服务。小米、魅族等机型可以安装MicroG替代</li>\n<li>安装好相机后，打开设置。</li>\n</ol>\n<p>长按即可打开设置<br><img src=\"http://pic.davontt.com/picGo/google-camera6.jpg\" alt=\"\"></p>\n<p><img src=\"http://pic.davontt.com/picGo/google-camera7.jpg\" alt=\"\"></p>\n<ol start=\"3\">\n<li>最下面找到Save,然后点击Save 之后点击弹窗中的保存设置。<br><img src=\"http://pic.davontt.com/picGo/google-camera8.jpg\" alt=\"\"></li>\n<li>找到系统的文件管理器</li>\n<li>找到从之前config中下载的xml文件</li>\n<li>将xml文件复制到GCam中的Config文件夹中（Gcam文件夹一般在根目录）</li>\n<li>点击图中框柱位置（建议多点几次，总会点到的）</li>\n</ol>\n<p><img src=\"http://pic.davontt.com/picGo/google-camera9.jpg\" alt=\"\"></p>\n<p>8.当弹出下图的选择配置后，选择其中一个xml进行恢复。</p>\n<p><img src=\"http://pic.davontt.com/picGo/google-camera10.jpg\" alt=\"\"></p>\n<ol start=\"9\">\n<li>点击恢复后重启相机</li>\n</ol>\n<h2 id=\"没有对比就没有伤害\"><a href=\"#没有对比就没有伤害\" class=\"headerlink\" title=\"没有对比就没有伤害\"></a>没有对比就没有伤害</h2><p>人像处理就算了，不露脸了。试试一加7T的夜间拍摄和google相机的夜间拍摄吧。<br>一加7T 原版相机：<br><img src=\"http://pic.davontt.com/picGo/google-camera11.jpg\" alt=\"\"></p>\n<p>google相机：<br><img src=\"http://pic.davontt.com/picGo/google-camera12.jpg\" alt=\"\"></p>\n<p>差别不言自明。</p>\n","site":{"data":{"projects":[{"name":"NJUPT_Esport","url":"https://github.com/Davont/NJUPT_Esport","desc":"一个为在校学生提供体育相关成绩查询、校新闻推送、学生反馈评论的web app"},{"name":"Furniture_Management_System","url":"https://github.com/Davont/Furniture_Management_System","desc":"一个提供家具购买、下单、用户管理、订单管理、商户管理等功能的家具订单CMS系统"},{"name":"weapp-WQPS","url":"https://github.com/Davont/weapp-WQPS","desc":"一个展示型的微信小程序，旨在提供基于卫星传感网的水质监测系统的对外展示平台。"},{"name":"yiban_registration","url":"https://github.com/Davont/yiban_registration","desc":"一个面向社团提供新生加入社团的线上报名表"}]}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最近春招找工作，之前的简历，我用的头像都是正装照（其实是 P 的，去照相馆照的太夸张了，跟哪吒似的），现在想用个生活照，更加随和一点，毕竟程序员很少穿正装（<del>都穿的格子衫大裤衩</del>），可是我用我的手机（一加7T）拍的不尽人意，什么叫不尽人意呢，就是太亮了，有点不真实感，可能和一加的白平衡太高有关，白平衡太高，拍的照片都很亮丽，比较讨喜。但是我更喜欢真实的。<br>于是我就选择了HDR+ 超厉害的google camera。</p>\n<h2 id=\"如何下载\"><a href=\"#如何下载\" class=\"headerlink\" title=\"如何下载\"></a>如何下载</h2><h3 id=\"Google-Camera-Port\"><a href=\"#Google-Camera-Port\" class=\"headerlink\" title=\"Google Camera Port\"></a>Google Camera Port</h3><p>说到怎么安装，说多了都是泪啊，什么微博阿狗酱，什么囧帝汉化，什么一加社区，我找了，要不就是适配三星小米的，要不就是安卓9的，而且一加7T是今年10份刚出的，已经用到了安卓10，比较新。</p>\n<p>后来我找到了这个社区，在下面</p>\n<p><a href=\"https://www.celsoazevedo.com/files/android/google-camera/\" target=\"_blank\" rel=\"noopener\">传送门</a></p>\n<p>它会实时更新一些谷歌相机的apk，实际上谷歌相机是闭源的，它只是给pixel手机做的一个软件，所有多多少少都有点兼容性的问题，好在这个网站上有很多适配机型。</p>\n<p><img src=\"http://pic.davontt.com/picGo/google-camera.png\" alt=\"\"></p>\n<h2 id=\"下载教程\"><a href=\"#下载教程\" class=\"headerlink\" title=\"下载教程\"></a>下载教程</h2><p>里面有个新手导航，点进去然后根据意思就知道怎么做了，其实很简单。</p>\n<h3 id=\"点进去那个新手导航\"><a href=\"#点进去那个新手导航\" class=\"headerlink\" title=\"点进去那个新手导航\"></a>点进去那个新手导航</h3><p><img src=\"http://pic.davontt.com/picGo/google-camera2.png\" alt=\"\"></p>\n<h3 id=\"在最新的-google-camera-7-x-选择apk\"><a href=\"#在最新的-google-camera-7-x-选择apk\" class=\"headerlink\" title=\"在最新的 google camera 7.x 选择apk\"></a>在最新的 google camera 7.x 选择apk</h3><p><img src=\"http://pic.davontt.com/picGo/google-camera3-new.jpg\" alt=\"\"></p>\n<center style=\"color:#AAAAAA\">点进去 google camera 7.x</center>\n\n<h3 id=\"然后增加配置文件\"><a href=\"#然后增加配置文件\" class=\"headerlink\" title=\"然后增加配置文件\"></a>然后增加配置文件</h3><p><img src=\"http://pic.davontt.com/picGo/google-camera4.png\" alt=\"\"></p>\n<h3 id=\"根据机型来选择\"><a href=\"#根据机型来选择\" class=\"headerlink\" title=\"根据机型来选择\"></a>根据机型来选择</h3><p><img src=\"http://pic.davontt.com/picGo/google-camera5.png\" alt=\"\"></p>\n<blockquote>\n<p>第一个配置文件我试了一下会出bug，于是用了第二个。</p>\n</blockquote>\n<h2 id=\"安装教程\"><a href=\"#安装教程\" class=\"headerlink\" title=\"安装教程\"></a>安装教程</h2><ol>\n<li>安装谷歌框架，三星机型可以直接去酷安下载Google Play Store 安装即可激活谷歌服务。小米、魅族等机型可以安装MicroG替代</li>\n<li>安装好相机后，打开设置。</li>\n</ol>\n<p>长按即可打开设置<br><img src=\"http://pic.davontt.com/picGo/google-camera6.jpg\" alt=\"\"></p>\n<p><img src=\"http://pic.davontt.com/picGo/google-camera7.jpg\" alt=\"\"></p>\n<ol start=\"3\">\n<li>最下面找到Save,然后点击Save 之后点击弹窗中的保存设置。<br><img src=\"http://pic.davontt.com/picGo/google-camera8.jpg\" alt=\"\"></li>\n<li>找到系统的文件管理器</li>\n<li>找到从之前config中下载的xml文件</li>\n<li>将xml文件复制到GCam中的Config文件夹中（Gcam文件夹一般在根目录）</li>\n<li>点击图中框柱位置（建议多点几次，总会点到的）</li>\n</ol>\n<p><img src=\"http://pic.davontt.com/picGo/google-camera9.jpg\" alt=\"\"></p>\n<p>8.当弹出下图的选择配置后，选择其中一个xml进行恢复。</p>\n<p><img src=\"http://pic.davontt.com/picGo/google-camera10.jpg\" alt=\"\"></p>\n<ol start=\"9\">\n<li>点击恢复后重启相机</li>\n</ol>\n<h2 id=\"没有对比就没有伤害\"><a href=\"#没有对比就没有伤害\" class=\"headerlink\" title=\"没有对比就没有伤害\"></a>没有对比就没有伤害</h2><p>人像处理就算了，不露脸了。试试一加7T的夜间拍摄和google相机的夜间拍摄吧。<br>一加7T 原版相机：<br><img src=\"http://pic.davontt.com/picGo/google-camera11.jpg\" alt=\"\"></p>\n<p>google相机：<br><img src=\"http://pic.davontt.com/picGo/google-camera12.jpg\" alt=\"\"></p>\n<p>差别不言自明。</p>\n"},{"title":"Hexo一些基本命令","date":"2017-08-30T13:24:56.000Z","_content":"## _**其实只是个笔记，方便拿来看看**_\n\n感兴趣直接去Hexo官方文档处查看最全面的命令\n\n_[传送门](https://hexo.io/zh-cn/)_\n\n### Hexo\n\n```\n#安装\n\nnpm install hexo -g\n\n#升级\n\nnpm update hexo -g\n\n#初始化\n\nnpm init\n\n```\n\n### 简写\n```\n\nhexo n \"我的博客\" == hexo new \"我的博客\" #新建文章\n\nhexo p == hexo publish\n\nhexo g == hexo generate #生成\n\nhexo s == hexo server #启动服务预览\n\nhexo d == hexo deploy #部署\n```\n\n### 服务器\n```\nhexo server #Hexo 会监视文件变动并自动更新，您无须重启服务器。\n\nhexo server -s #静态模式\n\nhexo server -p 5000 #更改端口\n\nhexo server -i 192.168.1.1  #自定义 IP\n\nhexo clean #清除缓存 网页正常情况下可以忽略此条命令\n\nhexo g #生成静态网页\n\nhexo d #开始部署\n```\n\n### 监视文件变动\n```\nhexo generate #使用 Hexo 生成静态文件快速而且简单\n\nhexo generate --watch #监视文件变动\n```\n\n### 完成后部署\n\n两个命令的作用是相同的\n\n```\nhexo generate --deploy\nhexo deploy --generate\nhexo deploy -g\nhexo server -g\nhexo d -g\nhexo g -d\n```\n\n### 草稿\n\n```\nhexo publish [layout] <title>\n```\n\n### 模板\n\n```\nhexo new \"postName\" #新建文章\n\nhexo new page \"pageName\" #新建页面\n\nhexo generate #生成静态页面至public目录\n\nhexo server #开启预览访问端口（默认端口4000，\"ctrl + c\" 关闭server）\n\nhexo deploy #将.deploy目录部署到GitHub\n```\n\n  ","source":"_posts/hexo-instruction.md","raw":"---\ntitle: Hexo一些基本命令\ndate: 2017-08-30 21:24:56\ntags: hexo\n---\n## _**其实只是个笔记，方便拿来看看**_\n\n感兴趣直接去Hexo官方文档处查看最全面的命令\n\n_[传送门](https://hexo.io/zh-cn/)_\n\n### Hexo\n\n```\n#安装\n\nnpm install hexo -g\n\n#升级\n\nnpm update hexo -g\n\n#初始化\n\nnpm init\n\n```\n\n### 简写\n```\n\nhexo n \"我的博客\" == hexo new \"我的博客\" #新建文章\n\nhexo p == hexo publish\n\nhexo g == hexo generate #生成\n\nhexo s == hexo server #启动服务预览\n\nhexo d == hexo deploy #部署\n```\n\n### 服务器\n```\nhexo server #Hexo 会监视文件变动并自动更新，您无须重启服务器。\n\nhexo server -s #静态模式\n\nhexo server -p 5000 #更改端口\n\nhexo server -i 192.168.1.1  #自定义 IP\n\nhexo clean #清除缓存 网页正常情况下可以忽略此条命令\n\nhexo g #生成静态网页\n\nhexo d #开始部署\n```\n\n### 监视文件变动\n```\nhexo generate #使用 Hexo 生成静态文件快速而且简单\n\nhexo generate --watch #监视文件变动\n```\n\n### 完成后部署\n\n两个命令的作用是相同的\n\n```\nhexo generate --deploy\nhexo deploy --generate\nhexo deploy -g\nhexo server -g\nhexo d -g\nhexo g -d\n```\n\n### 草稿\n\n```\nhexo publish [layout] <title>\n```\n\n### 模板\n\n```\nhexo new \"postName\" #新建文章\n\nhexo new page \"pageName\" #新建页面\n\nhexo generate #生成静态页面至public目录\n\nhexo server #开启预览访问端口（默认端口4000，\"ctrl + c\" 关闭server）\n\nhexo deploy #将.deploy目录部署到GitHub\n```\n\n  ","slug":"hexo-instruction","published":1,"updated":"2020-12-20T16:36:55.008Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrr9soj2000d1l5x0cepasiu","content":"<h2 id=\"其实只是个笔记，方便拿来看看\"><a href=\"#其实只是个笔记，方便拿来看看\" class=\"headerlink\" title=\"其实只是个笔记，方便拿来看看\"></a><em><strong>其实只是个笔记，方便拿来看看</strong></em></h2><p>感兴趣直接去Hexo官方文档处查看最全面的命令</p>\n<p><em><a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"noopener\">传送门</a></em></p>\n<h3 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h3><figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#安装</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">npm</span> install hexo -g</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#升级</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">npm</span> update hexo -g</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#初始化</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">npm</span> init</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"简写\"><a href=\"#简写\" class=\"headerlink\" title=\"简写\"></a>简写</h3><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">hexo n <span class=\"string\">\"我的博客\"</span> == hexo new <span class=\"string\">\"我的博客\"</span> #新建文章</span><br><span class=\"line\"></span><br><span class=\"line\">hexo p == hexo publish</span><br><span class=\"line\"></span><br><span class=\"line\">hexo g == hexo generate #生成</span><br><span class=\"line\"></span><br><span class=\"line\">hexo s == hexo<span class=\"built_in\"> server </span>#启动服务预览</span><br><span class=\"line\"></span><br><span class=\"line\">hexo d == hexo deploy #部署</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"服务器\"><a href=\"#服务器\" class=\"headerlink\" title=\"服务器\"></a>服务器</h3><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo<span class=\"built_in\"> server </span>#Hexo 会监视文件变动并自动更新，您无须重启服务器。</span><br><span class=\"line\"></span><br><span class=\"line\">hexo<span class=\"built_in\"> server </span>-s #静态模式</span><br><span class=\"line\"></span><br><span class=\"line\">hexo<span class=\"built_in\"> server </span>-p 5000 #更改端口</span><br><span class=\"line\"></span><br><span class=\"line\">hexo<span class=\"built_in\"> server </span>-i 192.168.1.1  #自定义 IP</span><br><span class=\"line\"></span><br><span class=\"line\">hexo clean #清除缓存 网页正常情况下可以忽略此条命令</span><br><span class=\"line\"></span><br><span class=\"line\">hexo g #生成静态网页</span><br><span class=\"line\"></span><br><span class=\"line\">hexo d #开始部署</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"监视文件变动\"><a href=\"#监视文件变动\" class=\"headerlink\" title=\"监视文件变动\"></a>监视文件变动</h3><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo <span class=\"keyword\">generate</span> #使用 Hexo 生成静态文件快速而且简单</span><br><span class=\"line\"></span><br><span class=\"line\">hexo <span class=\"keyword\">generate</span> --watch #监视文件变动</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"完成后部署\"><a href=\"#完成后部署\" class=\"headerlink\" title=\"完成后部署\"></a>完成后部署</h3><p>两个命令的作用是相同的</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo generate --deploy</span><br><span class=\"line\">hexo deploy --generate</span><br><span class=\"line\">hexo deploy -g</span><br><span class=\"line\">hexo<span class=\"built_in\"> server </span>-g</span><br><span class=\"line\">hexo d -g</span><br><span class=\"line\">hexo g -d</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"草稿\"><a href=\"#草稿\" class=\"headerlink\" title=\"草稿\"></a>草稿</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo publish [layout] <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"模板\"><a href=\"#模板\" class=\"headerlink\" title=\"模板\"></a>模板</h3><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new <span class=\"string\">\"postName\"</span> #新建文章</span><br><span class=\"line\"></span><br><span class=\"line\">hexo new<span class=\"built_in\"> page </span><span class=\"string\">\"pageName\"</span> #新建页面</span><br><span class=\"line\"></span><br><span class=\"line\">hexo generate #生成静态页面至public目录</span><br><span class=\"line\"></span><br><span class=\"line\">hexo<span class=\"built_in\"> server </span>#开启预览访问端口（默认端口4000，<span class=\"string\">\"ctrl + c\"</span> 关闭server）</span><br><span class=\"line\"></span><br><span class=\"line\">hexo deploy #将.deploy目录部署到GitHub</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"projects":[{"name":"NJUPT_Esport","url":"https://github.com/Davont/NJUPT_Esport","desc":"一个为在校学生提供体育相关成绩查询、校新闻推送、学生反馈评论的web app"},{"name":"Furniture_Management_System","url":"https://github.com/Davont/Furniture_Management_System","desc":"一个提供家具购买、下单、用户管理、订单管理、商户管理等功能的家具订单CMS系统"},{"name":"weapp-WQPS","url":"https://github.com/Davont/weapp-WQPS","desc":"一个展示型的微信小程序，旨在提供基于卫星传感网的水质监测系统的对外展示平台。"},{"name":"yiban_registration","url":"https://github.com/Davont/yiban_registration","desc":"一个面向社团提供新生加入社团的线上报名表"}]}},"excerpt":"","more":"<h2 id=\"其实只是个笔记，方便拿来看看\"><a href=\"#其实只是个笔记，方便拿来看看\" class=\"headerlink\" title=\"其实只是个笔记，方便拿来看看\"></a><em><strong>其实只是个笔记，方便拿来看看</strong></em></h2><p>感兴趣直接去Hexo官方文档处查看最全面的命令</p>\n<p><em><a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"noopener\">传送门</a></em></p>\n<h3 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h3><figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#安装</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">npm</span> install hexo -g</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#升级</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">npm</span> update hexo -g</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#初始化</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">npm</span> init</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"简写\"><a href=\"#简写\" class=\"headerlink\" title=\"简写\"></a>简写</h3><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">hexo n <span class=\"string\">\"我的博客\"</span> == hexo new <span class=\"string\">\"我的博客\"</span> #新建文章</span><br><span class=\"line\"></span><br><span class=\"line\">hexo p == hexo publish</span><br><span class=\"line\"></span><br><span class=\"line\">hexo g == hexo generate #生成</span><br><span class=\"line\"></span><br><span class=\"line\">hexo s == hexo<span class=\"built_in\"> server </span>#启动服务预览</span><br><span class=\"line\"></span><br><span class=\"line\">hexo d == hexo deploy #部署</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"服务器\"><a href=\"#服务器\" class=\"headerlink\" title=\"服务器\"></a>服务器</h3><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo<span class=\"built_in\"> server </span>#Hexo 会监视文件变动并自动更新，您无须重启服务器。</span><br><span class=\"line\"></span><br><span class=\"line\">hexo<span class=\"built_in\"> server </span>-s #静态模式</span><br><span class=\"line\"></span><br><span class=\"line\">hexo<span class=\"built_in\"> server </span>-p 5000 #更改端口</span><br><span class=\"line\"></span><br><span class=\"line\">hexo<span class=\"built_in\"> server </span>-i 192.168.1.1  #自定义 IP</span><br><span class=\"line\"></span><br><span class=\"line\">hexo clean #清除缓存 网页正常情况下可以忽略此条命令</span><br><span class=\"line\"></span><br><span class=\"line\">hexo g #生成静态网页</span><br><span class=\"line\"></span><br><span class=\"line\">hexo d #开始部署</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"监视文件变动\"><a href=\"#监视文件变动\" class=\"headerlink\" title=\"监视文件变动\"></a>监视文件变动</h3><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo <span class=\"keyword\">generate</span> #使用 Hexo 生成静态文件快速而且简单</span><br><span class=\"line\"></span><br><span class=\"line\">hexo <span class=\"keyword\">generate</span> --watch #监视文件变动</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"完成后部署\"><a href=\"#完成后部署\" class=\"headerlink\" title=\"完成后部署\"></a>完成后部署</h3><p>两个命令的作用是相同的</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo generate --deploy</span><br><span class=\"line\">hexo deploy --generate</span><br><span class=\"line\">hexo deploy -g</span><br><span class=\"line\">hexo<span class=\"built_in\"> server </span>-g</span><br><span class=\"line\">hexo d -g</span><br><span class=\"line\">hexo g -d</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"草稿\"><a href=\"#草稿\" class=\"headerlink\" title=\"草稿\"></a>草稿</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo publish [layout] <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"模板\"><a href=\"#模板\" class=\"headerlink\" title=\"模板\"></a>模板</h3><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new <span class=\"string\">\"postName\"</span> #新建文章</span><br><span class=\"line\"></span><br><span class=\"line\">hexo new<span class=\"built_in\"> page </span><span class=\"string\">\"pageName\"</span> #新建页面</span><br><span class=\"line\"></span><br><span class=\"line\">hexo generate #生成静态页面至public目录</span><br><span class=\"line\"></span><br><span class=\"line\">hexo<span class=\"built_in\"> server </span>#开启预览访问端口（默认端口4000，<span class=\"string\">\"ctrl + c\"</span> 关闭server）</span><br><span class=\"line\"></span><br><span class=\"line\">hexo deploy #将.deploy目录部署到GitHub</span><br></pre></td></tr></table></figure>\n\n"},{"title":"“ERROR Deployer not found:git”的解决方案","date":"2017-08-27T13:17:09.000Z","_content":"## git部署出现的问题\n\n搭建博客Hexo时候，在写好文章进行$ hexo d -g的时候，发现失败，上面显示:\n\n> ERROR Deployer not found:git\n\n## 解决方案\n\n### 可能的解决方法一\n\nhexo已升级3.0\n命令 hexo g -d 没有办法成功deploy，\n文档说hexo3.0后需要在 _config.yml 中设置 deploy中的type为git（过去是github）\n然后在终端输入：\n\n```\nnpm install hexo-deployer-git –save\n```\n\n### 可能的解决方法二\n\n你所在的blog的初始文件夹名称改为为github上的仓库名称（形如Davont.github.io）\n\n  ","source":"_posts/gitDebug.md","raw":"---\ntitle: “ERROR Deployer not found:git”的解决方案\ndate: 2017-08-27 21:17:09\ntags: debug\n---\n## git部署出现的问题\n\n搭建博客Hexo时候，在写好文章进行$ hexo d -g的时候，发现失败，上面显示:\n\n> ERROR Deployer not found:git\n\n## 解决方案\n\n### 可能的解决方法一\n\nhexo已升级3.0\n命令 hexo g -d 没有办法成功deploy，\n文档说hexo3.0后需要在 _config.yml 中设置 deploy中的type为git（过去是github）\n然后在终端输入：\n\n```\nnpm install hexo-deployer-git –save\n```\n\n### 可能的解决方法二\n\n你所在的blog的初始文件夹名称改为为github上的仓库名称（形如Davont.github.io）\n\n  ","slug":"gitDebug","published":1,"updated":"2020-12-20T16:36:55.007Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrr9soj5000g1l5xg7pme6ie","content":"<h2 id=\"git部署出现的问题\"><a href=\"#git部署出现的问题\" class=\"headerlink\" title=\"git部署出现的问题\"></a>git部署出现的问题</h2><p>搭建博客Hexo时候，在写好文章进行$ hexo d -g的时候，发现失败，上面显示:</p>\n<blockquote>\n<p>ERROR Deployer not found:git</p>\n</blockquote>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><h3 id=\"可能的解决方法一\"><a href=\"#可能的解决方法一\" class=\"headerlink\" title=\"可能的解决方法一\"></a>可能的解决方法一</h3><p>hexo已升级3.0<br>命令 hexo g -d 没有办法成功deploy，<br>文档说hexo3.0后需要在 _config.yml 中设置 deploy中的type为git（过去是github）<br>然后在终端输入：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm <span class=\"keyword\">install</span> hexo-deployer-git –<span class=\"keyword\">save</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"可能的解决方法二\"><a href=\"#可能的解决方法二\" class=\"headerlink\" title=\"可能的解决方法二\"></a>可能的解决方法二</h3><p>你所在的blog的初始文件夹名称改为为github上的仓库名称（形如Davont.github.io）</p>\n","site":{"data":{"projects":[{"name":"NJUPT_Esport","url":"https://github.com/Davont/NJUPT_Esport","desc":"一个为在校学生提供体育相关成绩查询、校新闻推送、学生反馈评论的web app"},{"name":"Furniture_Management_System","url":"https://github.com/Davont/Furniture_Management_System","desc":"一个提供家具购买、下单、用户管理、订单管理、商户管理等功能的家具订单CMS系统"},{"name":"weapp-WQPS","url":"https://github.com/Davont/weapp-WQPS","desc":"一个展示型的微信小程序，旨在提供基于卫星传感网的水质监测系统的对外展示平台。"},{"name":"yiban_registration","url":"https://github.com/Davont/yiban_registration","desc":"一个面向社团提供新生加入社团的线上报名表"}]}},"excerpt":"","more":"<h2 id=\"git部署出现的问题\"><a href=\"#git部署出现的问题\" class=\"headerlink\" title=\"git部署出现的问题\"></a>git部署出现的问题</h2><p>搭建博客Hexo时候，在写好文章进行$ hexo d -g的时候，发现失败，上面显示:</p>\n<blockquote>\n<p>ERROR Deployer not found:git</p>\n</blockquote>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><h3 id=\"可能的解决方法一\"><a href=\"#可能的解决方法一\" class=\"headerlink\" title=\"可能的解决方法一\"></a>可能的解决方法一</h3><p>hexo已升级3.0<br>命令 hexo g -d 没有办法成功deploy，<br>文档说hexo3.0后需要在 _config.yml 中设置 deploy中的type为git（过去是github）<br>然后在终端输入：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm <span class=\"keyword\">install</span> hexo-deployer-git –<span class=\"keyword\">save</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"可能的解决方法二\"><a href=\"#可能的解决方法二\" class=\"headerlink\" title=\"可能的解决方法二\"></a>可能的解决方法二</h3><p>你所在的blog的初始文件夹名称改为为github上的仓库名称（形如Davont.github.io）</p>\n"},{"title":"《绿皮书》随想","date":"2019-04-05T17:07:13.000Z","_content":"前几天去电影院看了绿皮书，感觉很好看，讲道理其实挺喜欢这种格调舒缓的电影。情节细致，情感细腻。整部电影看下来，我发现我竟然在不自觉地随着剧情思考，探索。\n\n电影中最大的亮点，我总结为冲突和置换。所谓冲突，有表面迸发的人物直接冲突，比如肢体碰触，语言顶撞等含暴力因素的外在显现，有更深层次的冲突，比如观念冲突，文化冲突等意识形态层面。因为电影核心部分是围绕种族歧视这一具有争议的议题展开的，所以一些关于黑人的刻板印象和固有偏见的描述是意料之中吧。\n\n所谓置换，我认为是一-种人物与人物之间的立场、情感、态度的置换。托尼作为一个对黑人心存嫌隙的白人，实则一直受到社会底层文化的熏陶，雪利虽为黑人，却出入在.上层人士的圈子。我觉得这样的剧本构思就是一种置换,由内而外的强烈的对比反差。把放置在一个大环境中，结合主人公各自的精心构思的人性特质，通过事件发生联系，经历磨合,才能实现最后的情感、态度的升华及转变。这样，电影的主旨也就顺其自然突显了。托尼的整个形象给我的感觉就是立得太满，用力过度反倒显得不自然了。雪利更像是一-个高贵的标榜尊严的勇士，他的勇夹杂着对现实妥协的部分，以精神的勇突出存在。雪利在舞台_上的偏执,以及弹琴时感情的宣泄，让我看到了他无奈而又英勇的一-面。在生活里，他勉强守住尊严，在音乐里,他誓死捍卫尊严。影片里还有很多值得人深思的地方，但一时半会想不出太多了，比如那声意味深长的枪响，比如那块幸运石...走出影院才反应过来，雪利光着身子被抓那一段有点儿不对劲，哪不对劲呢?后来走在路上琢磨着雪利说的那句“我不像男人”，总算是有点明白了。\n","source":"_posts/green-book.md","raw":"---\ntitle: 《绿皮书》随想\ndate: 2019-04-06 01:07:13\ntags: [随笔,电影]\n---\n前几天去电影院看了绿皮书，感觉很好看，讲道理其实挺喜欢这种格调舒缓的电影。情节细致，情感细腻。整部电影看下来，我发现我竟然在不自觉地随着剧情思考，探索。\n\n电影中最大的亮点，我总结为冲突和置换。所谓冲突，有表面迸发的人物直接冲突，比如肢体碰触，语言顶撞等含暴力因素的外在显现，有更深层次的冲突，比如观念冲突，文化冲突等意识形态层面。因为电影核心部分是围绕种族歧视这一具有争议的议题展开的，所以一些关于黑人的刻板印象和固有偏见的描述是意料之中吧。\n\n所谓置换，我认为是一-种人物与人物之间的立场、情感、态度的置换。托尼作为一个对黑人心存嫌隙的白人，实则一直受到社会底层文化的熏陶，雪利虽为黑人，却出入在.上层人士的圈子。我觉得这样的剧本构思就是一种置换,由内而外的强烈的对比反差。把放置在一个大环境中，结合主人公各自的精心构思的人性特质，通过事件发生联系，经历磨合,才能实现最后的情感、态度的升华及转变。这样，电影的主旨也就顺其自然突显了。托尼的整个形象给我的感觉就是立得太满，用力过度反倒显得不自然了。雪利更像是一-个高贵的标榜尊严的勇士，他的勇夹杂着对现实妥协的部分，以精神的勇突出存在。雪利在舞台_上的偏执,以及弹琴时感情的宣泄，让我看到了他无奈而又英勇的一-面。在生活里，他勉强守住尊严，在音乐里,他誓死捍卫尊严。影片里还有很多值得人深思的地方，但一时半会想不出太多了，比如那声意味深长的枪响，比如那块幸运石...走出影院才反应过来，雪利光着身子被抓那一段有点儿不对劲，哪不对劲呢?后来走在路上琢磨着雪利说的那句“我不像男人”，总算是有点明白了。\n","slug":"green-book","published":1,"updated":"2020-12-20T16:36:55.008Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrr9soja000i1l5xasaq42j1","content":"<p>前几天去电影院看了绿皮书，感觉很好看，讲道理其实挺喜欢这种格调舒缓的电影。情节细致，情感细腻。整部电影看下来，我发现我竟然在不自觉地随着剧情思考，探索。</p>\n<p>电影中最大的亮点，我总结为冲突和置换。所谓冲突，有表面迸发的人物直接冲突，比如肢体碰触，语言顶撞等含暴力因素的外在显现，有更深层次的冲突，比如观念冲突，文化冲突等意识形态层面。因为电影核心部分是围绕种族歧视这一具有争议的议题展开的，所以一些关于黑人的刻板印象和固有偏见的描述是意料之中吧。</p>\n<p>所谓置换，我认为是一-种人物与人物之间的立场、情感、态度的置换。托尼作为一个对黑人心存嫌隙的白人，实则一直受到社会底层文化的熏陶，雪利虽为黑人，却出入在.上层人士的圈子。我觉得这样的剧本构思就是一种置换,由内而外的强烈的对比反差。把放置在一个大环境中，结合主人公各自的精心构思的人性特质，通过事件发生联系，经历磨合,才能实现最后的情感、态度的升华及转变。这样，电影的主旨也就顺其自然突显了。托尼的整个形象给我的感觉就是立得太满，用力过度反倒显得不自然了。雪利更像是一-个高贵的标榜尊严的勇士，他的勇夹杂着对现实妥协的部分，以精神的勇突出存在。雪利在舞台_上的偏执,以及弹琴时感情的宣泄，让我看到了他无奈而又英勇的一-面。在生活里，他勉强守住尊严，在音乐里,他誓死捍卫尊严。影片里还有很多值得人深思的地方，但一时半会想不出太多了，比如那声意味深长的枪响，比如那块幸运石…走出影院才反应过来，雪利光着身子被抓那一段有点儿不对劲，哪不对劲呢?后来走在路上琢磨着雪利说的那句“我不像男人”，总算是有点明白了。</p>\n","site":{"data":{"projects":[{"name":"NJUPT_Esport","url":"https://github.com/Davont/NJUPT_Esport","desc":"一个为在校学生提供体育相关成绩查询、校新闻推送、学生反馈评论的web app"},{"name":"Furniture_Management_System","url":"https://github.com/Davont/Furniture_Management_System","desc":"一个提供家具购买、下单、用户管理、订单管理、商户管理等功能的家具订单CMS系统"},{"name":"weapp-WQPS","url":"https://github.com/Davont/weapp-WQPS","desc":"一个展示型的微信小程序，旨在提供基于卫星传感网的水质监测系统的对外展示平台。"},{"name":"yiban_registration","url":"https://github.com/Davont/yiban_registration","desc":"一个面向社团提供新生加入社团的线上报名表"}]}},"excerpt":"","more":"<p>前几天去电影院看了绿皮书，感觉很好看，讲道理其实挺喜欢这种格调舒缓的电影。情节细致，情感细腻。整部电影看下来，我发现我竟然在不自觉地随着剧情思考，探索。</p>\n<p>电影中最大的亮点，我总结为冲突和置换。所谓冲突，有表面迸发的人物直接冲突，比如肢体碰触，语言顶撞等含暴力因素的外在显现，有更深层次的冲突，比如观念冲突，文化冲突等意识形态层面。因为电影核心部分是围绕种族歧视这一具有争议的议题展开的，所以一些关于黑人的刻板印象和固有偏见的描述是意料之中吧。</p>\n<p>所谓置换，我认为是一-种人物与人物之间的立场、情感、态度的置换。托尼作为一个对黑人心存嫌隙的白人，实则一直受到社会底层文化的熏陶，雪利虽为黑人，却出入在.上层人士的圈子。我觉得这样的剧本构思就是一种置换,由内而外的强烈的对比反差。把放置在一个大环境中，结合主人公各自的精心构思的人性特质，通过事件发生联系，经历磨合,才能实现最后的情感、态度的升华及转变。这样，电影的主旨也就顺其自然突显了。托尼的整个形象给我的感觉就是立得太满，用力过度反倒显得不自然了。雪利更像是一-个高贵的标榜尊严的勇士，他的勇夹杂着对现实妥协的部分，以精神的勇突出存在。雪利在舞台_上的偏执,以及弹琴时感情的宣泄，让我看到了他无奈而又英勇的一-面。在生活里，他勉强守住尊严，在音乐里,他誓死捍卫尊严。影片里还有很多值得人深思的地方，但一时半会想不出太多了，比如那声意味深长的枪响，比如那块幸运石…走出影院才反应过来，雪利光着身子被抓那一段有点儿不对劲，哪不对劲呢?后来走在路上琢磨着雪利说的那句“我不像男人”，总算是有点明白了。</p>\n"},{"title":"胡适：写给大学毕业生的一封信","date":"2019-07-05T09:50:36.000Z","_content":"# 前言\n前几天看了央视新闻关于毕业的夜读文章\n里面提到了胡适先生的《写给大学毕业生的一封信》，看了很有感触，所以摘抄至此，与未来的自己分享。\n\n本文是胡适先生1932年6月27日所作。虽然30年代那个血雨腥风的时代已经过去，现在的时代已经与当时不可同日而语，但是，读来还是感觉受益匪浅，胡适先生的谆谆教导之情溢于言表。本文中，胡适先生认为，大学生毕业有三条路可走：继续做学术研究；寻着相当的职业；做官，办党，革命。文中分析了大学毕业后遇到的“陷阱堕落的方式”，并给出了三个方子。\n\n# 正文\n\n这一两个星期里，各地的大学都有毕业的班次，都有很多的毕业生离开学校去开始他们的成人事业。\n\n学生的生活是一种享有特殊优待的生活，不妨幼稚一点，不妨吵吵闹闹，社会都能纵容他们，不肯严格地要他们负行为的责任。现在他们要撑起自己的肩膀来挑他们自己的担子了。在这个国难最紧急的年头，他们的担子真不轻!我们祝他们的成功，同时也不忍不依据自己的经验，赠他们几句送行的赠言——虽未必是救命毫毛，也许做个防身的锦囊罢!\n\n你们毕业之后，可走的路不出这几条：绝少数的人还可以在国内或国外的研究院继续做学术研究；少数的人可以寻着相当的职业；此外还有做官，办党，革命三条路；再有就是在家享福或者失业亲居了。\n\n走其余几条路的人，都不能没有堕落的危险。堕落的方式很多，总括起来，约有这两大类：\n\n第一是容易抛弃学生时代求知识的欲望。你们到了实际社会里，往往学非所用，往往所学全无用处，往往可以完全用不着学问，而一样可以胡乱混饭吃，混官做。在这种环境里即使向来抱有求知识学问的人，也不免心灰意懒，把求知的欲望渐渐冷淡下去。况且学问是要有相当的设备的：书籍，实验室，师友的切磋指导，闲暇的工夫，都不是一个平常要糊口养家的人能容易办到的。没有做学问的环境，又谁能怪我们抛弃学问呢?\n\n第二是容易抛弃学生时代理想的人生的追求。少年人初次和冷酷的社会接触，容易感觉理想与事实相去太远，容易发生悲观和失望。多年怀抱的人生理想，改造的热诚，奋斗的勇气，到此时候，好像全不是那么一回事了。渺小的个人在那强烈的社会炉火里，往往经不起长时期的烤炼就熔化了，一点高尚的理想不久就幻灭了。抱着改造社会的梦想而来，往往是弃甲抛兵而走，或者做了恶势的俘虏。你在那牢狱里，回想那少年气壮时代的种种理想主义，好像都成了自误误人的迷梦!从此以后，你就甘心放弃理想人生的追求，甘心做现在社会的顺民了。要防御这两方面的堕落，一面要保持我们求知识的欲望，一面要保持我们对人生的追求。\n\n有什么好方子呢?依我个人的观察和经验，有三种防身的药方是值得一试的。\n\n第一个方子只有一句话：“总得时时寻一两个值得研究的问题!”问题是知识学问的老祖宗：古往今来一切知识的产生与积聚，都是因为要解答问题——要解答实用上的困难和理论上的疑难。所谓“为知识而求知识”，其实也只是一种好奇心追求某种问题的解答，不过因为那种问题的性质不必是直接应用的，人们就觉得这是无所谓的求知识了。\n\n我们出学校之后，离开了做学问的环境，如果没有一两个值得解答的问题在脑子里盘旋，就很难保持求学问的热心。可是，如果你有了一个真有趣的问题逗你去想它，天天引诱你去解决它，天天对你挑衅你无可奈何它——这时候，你就会同恋爱一个女子发了疯一样，坐也坐不下，睡也睡不安，没工夫也得偷出工夫去陪她，没钱也得缩衣节食去巴结她。没有书，你自会变卖家私去买书；没有仪器，你自会典押衣物去置办仪器；没有师友，你自会不远千里去寻师访友。你只要有疑难问题来逼你时时用脑子，你自然会保持发展你对学问的兴趣，即使在最贫乏的知识中，你也会慢慢地，聚起一个小图书馆来，或者设置起一所小试验室来。所以我说，第一要寻问题。脑子里没有问题之日，就是你知识生活寿终正寝之时!古人说，“待文王而兴者，凡民也。若夫豪杰之士，虽无文王犹兴。”试想伽利略和牛顿有多少藏书?有多少仪器?他们不过是有问题而已。有了问题而后他们自会造出仪器来解决他们的问题。没有问题的人们，关在图书馆里也不会用书，锁在试验室里也不会有什么发现。\n\n第二个方子也只有一句话：“总得多发展一点非职业的兴趣。”离开学校之后，大家总是寻个吃饭的职业。可是你寻得的职业未必就是你所学的，未必是你所心喜的，或者是你所学的而和你性情不相近的。在这种情况之下，工作往往成了苦工，就感觉不到兴趣了。为糊口而做那种非“性之所近而力之所能勉”的工作，就很难保持求知的兴趣的生活的理想主义。最好的救济方法只有多多发展职业以外的正当兴趣与活动。\n\n一个人应该有他的职业，也应该有他非职业的玩艺儿，可以叫作业余活动。往往他的业余活动比他的职业还更重要，因为一个人成就怎样，往往靠他怎样利用他的闲暇时间。他用他的闲暇来打麻将，他就成了个赌徒；你用你的闲暇来做社会服务，你也许成个社会改革者；或者你用你的闲暇去研究历史，你也许成个史学家。你的闲暇往往定你的终身。英国19世纪的两个哲人，弥儿终身做东印度公司的秘书，然而他的业余工作使他在哲学上、经济学上、政治思想史上都占一个很高的位置；斯宾塞是一个测量工程师，然而他的业余工作使他成为前世纪晚期世界思想界的一个重镇。古来成大学问的人，几乎没有一个不善用他的闲暇时间的。职业不容易适合我们的性情，我们要想生活不苦痛不堕落，只有多方发展。\n\n有了这种心爱的玩艺儿，你就做六个钟头抹桌子工作也不会感觉烦闷了。因为你知道，抹了六个钟头的桌子之后，你可以回家做你的化学研究，或画完你的大幅山水，或写你的小说戏曲，或继续你的历史考据，或做你的社会改革事业。你有了这种称心如意的活动，生活就不枯寂了，精神也就不会烦闷了。\n\n第三个方子也只有一句话：“你得有一点信心。”我们生当这个不幸的时代，眼中所见，耳中所闻，无非是叫我们悲观失望的。特别是在这个年头毕业的你们，眼见自己的国家民族沉沦到这步田地，眼看世界只是强权的世界，望极天边好像看不见一线的光明——在这个年头不发狂自杀，已算是万幸了，怎么还能够保持一点内心的镇定和理想的信任呢?我要对你们说：这时候正是我们要培养我们的信心的时候!只要我们有信心，我们还有救。\n\n古人说：“信心可以移山。”又说：“只要功夫深，生铁磨成绣花针。”你不信吗?当拿破仑的军队征服普鲁士，占据柏林的时候，有一位教授叫作费希特的，天天在讲堂劝他的国人要有信心，要信仰他们的民族是有世界的特殊使命的，是必定要复兴的。费希特死的时候，谁也不能预料德意志统一帝国何时可以实现，然而不满５０年，新的统一的德意志帝国居然实现了。\n\n一个国家的强弱盛衰，都不是偶然的，都不能逃出因果的铁律的。我们今日所受的苦痛和耻辱，都只是过去种种恶因种下的恶果。我们要收获将来的善果，必须努力种现在新因。一粒一粒地种，必有满仓满屋的收，这是我们今日应有的信心。我们要深信：今日的失败，都由于过去的不努力。我们要深信：今日的努力，必定有将来的大收成。\n\n佛典里有一句话：“福不唐捐。”唐捐就是白白地丢了。我们也应该说：“功不唐捐!”没有一点努力是会白白地丢了的。在我们看不见想不到的时候，在我们看不见的方向，你瞧!你下的种子早已生根发叶开花结果了!你不信吗?法国被普鲁士打败之后，割了两省地，赔了５０万万法郎的赔款。这时候有一位刻苦的科学家巴斯德终日埋头在他的化学试验室里做他的化学试验和微菌学研究。他是一个最爱国的人，然而他深信只有科学可以救国。他用一生的精力证明了三个科学问题：(1)每一种发酵作用都是由于一种微菌的发展；(2)每一种传染病都是一种微菌在生物体内的发展；(3)传染病的微菌，在特殊的培养之下可以减轻毒力，使他们从病菌变成防病的药苗。\n\n这三个问题在表面上似乎都和救国大事业没有多大关系。然而从第一个问题的证明，巴斯德定出做醋酿酒的新法，使全国的酒醋业每年减除极大的损失。从第二个问题的证明，巴斯德教全国的蚕丝业怎样选种防病，教全国的畜牧农家怎样防止牛羊瘟疫，又教全世界怎样注重消毒以减少外科手术的死亡率。从第三个问题的证明，巴斯德发明了牲畜的脾热瘟的疗治药苗，每年替法国农家减除了２０００万法郎的大损失；又发明了疯狗咬毒的治疗法，救济了无数的生命。所以英国的科学家赫胥黎在皇家学会里称颂巴斯德的功绩道：“法国给了德国５０万万法郎的赔款，巴斯德先生一个人研究科学的成就足够还清这一笔赔款了。”巴斯德对于科学有绝大的信心，所以他在国家蒙奇辱大难的时候，终不肯抛弃他的显微镜与试验室。他绝不想他在显微镜底下能偿还５０万万法郎的赔款，然而在他看不见想不到的时候，他已收获了科学救国的奇迹。\n\n朋友们，在你最悲观失望的时候，那正是你必须鼓起坚强的信心的时候。你要深信：天下没有白费的努力。成功不必在我，而功力必不唐捐。\n\n（摘自《胡适文存》第4集第4卷《胡适教育论著选》，人民教育出版社)\n","source":"_posts/graduate.md","raw":"---\ntitle: 胡适：写给大学毕业生的一封信\ndate: 2019-07-05 17:50:36\ntags: 随笔\n---\n# 前言\n前几天看了央视新闻关于毕业的夜读文章\n里面提到了胡适先生的《写给大学毕业生的一封信》，看了很有感触，所以摘抄至此，与未来的自己分享。\n\n本文是胡适先生1932年6月27日所作。虽然30年代那个血雨腥风的时代已经过去，现在的时代已经与当时不可同日而语，但是，读来还是感觉受益匪浅，胡适先生的谆谆教导之情溢于言表。本文中，胡适先生认为，大学生毕业有三条路可走：继续做学术研究；寻着相当的职业；做官，办党，革命。文中分析了大学毕业后遇到的“陷阱堕落的方式”，并给出了三个方子。\n\n# 正文\n\n这一两个星期里，各地的大学都有毕业的班次，都有很多的毕业生离开学校去开始他们的成人事业。\n\n学生的生活是一种享有特殊优待的生活，不妨幼稚一点，不妨吵吵闹闹，社会都能纵容他们，不肯严格地要他们负行为的责任。现在他们要撑起自己的肩膀来挑他们自己的担子了。在这个国难最紧急的年头，他们的担子真不轻!我们祝他们的成功，同时也不忍不依据自己的经验，赠他们几句送行的赠言——虽未必是救命毫毛，也许做个防身的锦囊罢!\n\n你们毕业之后，可走的路不出这几条：绝少数的人还可以在国内或国外的研究院继续做学术研究；少数的人可以寻着相当的职业；此外还有做官，办党，革命三条路；再有就是在家享福或者失业亲居了。\n\n走其余几条路的人，都不能没有堕落的危险。堕落的方式很多，总括起来，约有这两大类：\n\n第一是容易抛弃学生时代求知识的欲望。你们到了实际社会里，往往学非所用，往往所学全无用处，往往可以完全用不着学问，而一样可以胡乱混饭吃，混官做。在这种环境里即使向来抱有求知识学问的人，也不免心灰意懒，把求知的欲望渐渐冷淡下去。况且学问是要有相当的设备的：书籍，实验室，师友的切磋指导，闲暇的工夫，都不是一个平常要糊口养家的人能容易办到的。没有做学问的环境，又谁能怪我们抛弃学问呢?\n\n第二是容易抛弃学生时代理想的人生的追求。少年人初次和冷酷的社会接触，容易感觉理想与事实相去太远，容易发生悲观和失望。多年怀抱的人生理想，改造的热诚，奋斗的勇气，到此时候，好像全不是那么一回事了。渺小的个人在那强烈的社会炉火里，往往经不起长时期的烤炼就熔化了，一点高尚的理想不久就幻灭了。抱着改造社会的梦想而来，往往是弃甲抛兵而走，或者做了恶势的俘虏。你在那牢狱里，回想那少年气壮时代的种种理想主义，好像都成了自误误人的迷梦!从此以后，你就甘心放弃理想人生的追求，甘心做现在社会的顺民了。要防御这两方面的堕落，一面要保持我们求知识的欲望，一面要保持我们对人生的追求。\n\n有什么好方子呢?依我个人的观察和经验，有三种防身的药方是值得一试的。\n\n第一个方子只有一句话：“总得时时寻一两个值得研究的问题!”问题是知识学问的老祖宗：古往今来一切知识的产生与积聚，都是因为要解答问题——要解答实用上的困难和理论上的疑难。所谓“为知识而求知识”，其实也只是一种好奇心追求某种问题的解答，不过因为那种问题的性质不必是直接应用的，人们就觉得这是无所谓的求知识了。\n\n我们出学校之后，离开了做学问的环境，如果没有一两个值得解答的问题在脑子里盘旋，就很难保持求学问的热心。可是，如果你有了一个真有趣的问题逗你去想它，天天引诱你去解决它，天天对你挑衅你无可奈何它——这时候，你就会同恋爱一个女子发了疯一样，坐也坐不下，睡也睡不安，没工夫也得偷出工夫去陪她，没钱也得缩衣节食去巴结她。没有书，你自会变卖家私去买书；没有仪器，你自会典押衣物去置办仪器；没有师友，你自会不远千里去寻师访友。你只要有疑难问题来逼你时时用脑子，你自然会保持发展你对学问的兴趣，即使在最贫乏的知识中，你也会慢慢地，聚起一个小图书馆来，或者设置起一所小试验室来。所以我说，第一要寻问题。脑子里没有问题之日，就是你知识生活寿终正寝之时!古人说，“待文王而兴者，凡民也。若夫豪杰之士，虽无文王犹兴。”试想伽利略和牛顿有多少藏书?有多少仪器?他们不过是有问题而已。有了问题而后他们自会造出仪器来解决他们的问题。没有问题的人们，关在图书馆里也不会用书，锁在试验室里也不会有什么发现。\n\n第二个方子也只有一句话：“总得多发展一点非职业的兴趣。”离开学校之后，大家总是寻个吃饭的职业。可是你寻得的职业未必就是你所学的，未必是你所心喜的，或者是你所学的而和你性情不相近的。在这种情况之下，工作往往成了苦工，就感觉不到兴趣了。为糊口而做那种非“性之所近而力之所能勉”的工作，就很难保持求知的兴趣的生活的理想主义。最好的救济方法只有多多发展职业以外的正当兴趣与活动。\n\n一个人应该有他的职业，也应该有他非职业的玩艺儿，可以叫作业余活动。往往他的业余活动比他的职业还更重要，因为一个人成就怎样，往往靠他怎样利用他的闲暇时间。他用他的闲暇来打麻将，他就成了个赌徒；你用你的闲暇来做社会服务，你也许成个社会改革者；或者你用你的闲暇去研究历史，你也许成个史学家。你的闲暇往往定你的终身。英国19世纪的两个哲人，弥儿终身做东印度公司的秘书，然而他的业余工作使他在哲学上、经济学上、政治思想史上都占一个很高的位置；斯宾塞是一个测量工程师，然而他的业余工作使他成为前世纪晚期世界思想界的一个重镇。古来成大学问的人，几乎没有一个不善用他的闲暇时间的。职业不容易适合我们的性情，我们要想生活不苦痛不堕落，只有多方发展。\n\n有了这种心爱的玩艺儿，你就做六个钟头抹桌子工作也不会感觉烦闷了。因为你知道，抹了六个钟头的桌子之后，你可以回家做你的化学研究，或画完你的大幅山水，或写你的小说戏曲，或继续你的历史考据，或做你的社会改革事业。你有了这种称心如意的活动，生活就不枯寂了，精神也就不会烦闷了。\n\n第三个方子也只有一句话：“你得有一点信心。”我们生当这个不幸的时代，眼中所见，耳中所闻，无非是叫我们悲观失望的。特别是在这个年头毕业的你们，眼见自己的国家民族沉沦到这步田地，眼看世界只是强权的世界，望极天边好像看不见一线的光明——在这个年头不发狂自杀，已算是万幸了，怎么还能够保持一点内心的镇定和理想的信任呢?我要对你们说：这时候正是我们要培养我们的信心的时候!只要我们有信心，我们还有救。\n\n古人说：“信心可以移山。”又说：“只要功夫深，生铁磨成绣花针。”你不信吗?当拿破仑的军队征服普鲁士，占据柏林的时候，有一位教授叫作费希特的，天天在讲堂劝他的国人要有信心，要信仰他们的民族是有世界的特殊使命的，是必定要复兴的。费希特死的时候，谁也不能预料德意志统一帝国何时可以实现，然而不满５０年，新的统一的德意志帝国居然实现了。\n\n一个国家的强弱盛衰，都不是偶然的，都不能逃出因果的铁律的。我们今日所受的苦痛和耻辱，都只是过去种种恶因种下的恶果。我们要收获将来的善果，必须努力种现在新因。一粒一粒地种，必有满仓满屋的收，这是我们今日应有的信心。我们要深信：今日的失败，都由于过去的不努力。我们要深信：今日的努力，必定有将来的大收成。\n\n佛典里有一句话：“福不唐捐。”唐捐就是白白地丢了。我们也应该说：“功不唐捐!”没有一点努力是会白白地丢了的。在我们看不见想不到的时候，在我们看不见的方向，你瞧!你下的种子早已生根发叶开花结果了!你不信吗?法国被普鲁士打败之后，割了两省地，赔了５０万万法郎的赔款。这时候有一位刻苦的科学家巴斯德终日埋头在他的化学试验室里做他的化学试验和微菌学研究。他是一个最爱国的人，然而他深信只有科学可以救国。他用一生的精力证明了三个科学问题：(1)每一种发酵作用都是由于一种微菌的发展；(2)每一种传染病都是一种微菌在生物体内的发展；(3)传染病的微菌，在特殊的培养之下可以减轻毒力，使他们从病菌变成防病的药苗。\n\n这三个问题在表面上似乎都和救国大事业没有多大关系。然而从第一个问题的证明，巴斯德定出做醋酿酒的新法，使全国的酒醋业每年减除极大的损失。从第二个问题的证明，巴斯德教全国的蚕丝业怎样选种防病，教全国的畜牧农家怎样防止牛羊瘟疫，又教全世界怎样注重消毒以减少外科手术的死亡率。从第三个问题的证明，巴斯德发明了牲畜的脾热瘟的疗治药苗，每年替法国农家减除了２０００万法郎的大损失；又发明了疯狗咬毒的治疗法，救济了无数的生命。所以英国的科学家赫胥黎在皇家学会里称颂巴斯德的功绩道：“法国给了德国５０万万法郎的赔款，巴斯德先生一个人研究科学的成就足够还清这一笔赔款了。”巴斯德对于科学有绝大的信心，所以他在国家蒙奇辱大难的时候，终不肯抛弃他的显微镜与试验室。他绝不想他在显微镜底下能偿还５０万万法郎的赔款，然而在他看不见想不到的时候，他已收获了科学救国的奇迹。\n\n朋友们，在你最悲观失望的时候，那正是你必须鼓起坚强的信心的时候。你要深信：天下没有白费的努力。成功不必在我，而功力必不唐捐。\n\n（摘自《胡适文存》第4集第4卷《胡适教育论著选》，人民教育出版社)\n","slug":"graduate","published":1,"updated":"2020-12-20T16:36:55.008Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrr9sojd000k1l5x9nno3vdi","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>前几天看了央视新闻关于毕业的夜读文章<br>里面提到了胡适先生的《写给大学毕业生的一封信》，看了很有感触，所以摘抄至此，与未来的自己分享。</p>\n<p>本文是胡适先生1932年6月27日所作。虽然30年代那个血雨腥风的时代已经过去，现在的时代已经与当时不可同日而语，但是，读来还是感觉受益匪浅，胡适先生的谆谆教导之情溢于言表。本文中，胡适先生认为，大学生毕业有三条路可走：继续做学术研究；寻着相当的职业；做官，办党，革命。文中分析了大学毕业后遇到的“陷阱堕落的方式”，并给出了三个方子。</p>\n<h1 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h1><p>这一两个星期里，各地的大学都有毕业的班次，都有很多的毕业生离开学校去开始他们的成人事业。</p>\n<p>学生的生活是一种享有特殊优待的生活，不妨幼稚一点，不妨吵吵闹闹，社会都能纵容他们，不肯严格地要他们负行为的责任。现在他们要撑起自己的肩膀来挑他们自己的担子了。在这个国难最紧急的年头，他们的担子真不轻!我们祝他们的成功，同时也不忍不依据自己的经验，赠他们几句送行的赠言——虽未必是救命毫毛，也许做个防身的锦囊罢!</p>\n<p>你们毕业之后，可走的路不出这几条：绝少数的人还可以在国内或国外的研究院继续做学术研究；少数的人可以寻着相当的职业；此外还有做官，办党，革命三条路；再有就是在家享福或者失业亲居了。</p>\n<p>走其余几条路的人，都不能没有堕落的危险。堕落的方式很多，总括起来，约有这两大类：</p>\n<p>第一是容易抛弃学生时代求知识的欲望。你们到了实际社会里，往往学非所用，往往所学全无用处，往往可以完全用不着学问，而一样可以胡乱混饭吃，混官做。在这种环境里即使向来抱有求知识学问的人，也不免心灰意懒，把求知的欲望渐渐冷淡下去。况且学问是要有相当的设备的：书籍，实验室，师友的切磋指导，闲暇的工夫，都不是一个平常要糊口养家的人能容易办到的。没有做学问的环境，又谁能怪我们抛弃学问呢?</p>\n<p>第二是容易抛弃学生时代理想的人生的追求。少年人初次和冷酷的社会接触，容易感觉理想与事实相去太远，容易发生悲观和失望。多年怀抱的人生理想，改造的热诚，奋斗的勇气，到此时候，好像全不是那么一回事了。渺小的个人在那强烈的社会炉火里，往往经不起长时期的烤炼就熔化了，一点高尚的理想不久就幻灭了。抱着改造社会的梦想而来，往往是弃甲抛兵而走，或者做了恶势的俘虏。你在那牢狱里，回想那少年气壮时代的种种理想主义，好像都成了自误误人的迷梦!从此以后，你就甘心放弃理想人生的追求，甘心做现在社会的顺民了。要防御这两方面的堕落，一面要保持我们求知识的欲望，一面要保持我们对人生的追求。</p>\n<p>有什么好方子呢?依我个人的观察和经验，有三种防身的药方是值得一试的。</p>\n<p>第一个方子只有一句话：“总得时时寻一两个值得研究的问题!”问题是知识学问的老祖宗：古往今来一切知识的产生与积聚，都是因为要解答问题——要解答实用上的困难和理论上的疑难。所谓“为知识而求知识”，其实也只是一种好奇心追求某种问题的解答，不过因为那种问题的性质不必是直接应用的，人们就觉得这是无所谓的求知识了。</p>\n<p>我们出学校之后，离开了做学问的环境，如果没有一两个值得解答的问题在脑子里盘旋，就很难保持求学问的热心。可是，如果你有了一个真有趣的问题逗你去想它，天天引诱你去解决它，天天对你挑衅你无可奈何它——这时候，你就会同恋爱一个女子发了疯一样，坐也坐不下，睡也睡不安，没工夫也得偷出工夫去陪她，没钱也得缩衣节食去巴结她。没有书，你自会变卖家私去买书；没有仪器，你自会典押衣物去置办仪器；没有师友，你自会不远千里去寻师访友。你只要有疑难问题来逼你时时用脑子，你自然会保持发展你对学问的兴趣，即使在最贫乏的知识中，你也会慢慢地，聚起一个小图书馆来，或者设置起一所小试验室来。所以我说，第一要寻问题。脑子里没有问题之日，就是你知识生活寿终正寝之时!古人说，“待文王而兴者，凡民也。若夫豪杰之士，虽无文王犹兴。”试想伽利略和牛顿有多少藏书?有多少仪器?他们不过是有问题而已。有了问题而后他们自会造出仪器来解决他们的问题。没有问题的人们，关在图书馆里也不会用书，锁在试验室里也不会有什么发现。</p>\n<p>第二个方子也只有一句话：“总得多发展一点非职业的兴趣。”离开学校之后，大家总是寻个吃饭的职业。可是你寻得的职业未必就是你所学的，未必是你所心喜的，或者是你所学的而和你性情不相近的。在这种情况之下，工作往往成了苦工，就感觉不到兴趣了。为糊口而做那种非“性之所近而力之所能勉”的工作，就很难保持求知的兴趣的生活的理想主义。最好的救济方法只有多多发展职业以外的正当兴趣与活动。</p>\n<p>一个人应该有他的职业，也应该有他非职业的玩艺儿，可以叫作业余活动。往往他的业余活动比他的职业还更重要，因为一个人成就怎样，往往靠他怎样利用他的闲暇时间。他用他的闲暇来打麻将，他就成了个赌徒；你用你的闲暇来做社会服务，你也许成个社会改革者；或者你用你的闲暇去研究历史，你也许成个史学家。你的闲暇往往定你的终身。英国19世纪的两个哲人，弥儿终身做东印度公司的秘书，然而他的业余工作使他在哲学上、经济学上、政治思想史上都占一个很高的位置；斯宾塞是一个测量工程师，然而他的业余工作使他成为前世纪晚期世界思想界的一个重镇。古来成大学问的人，几乎没有一个不善用他的闲暇时间的。职业不容易适合我们的性情，我们要想生活不苦痛不堕落，只有多方发展。</p>\n<p>有了这种心爱的玩艺儿，你就做六个钟头抹桌子工作也不会感觉烦闷了。因为你知道，抹了六个钟头的桌子之后，你可以回家做你的化学研究，或画完你的大幅山水，或写你的小说戏曲，或继续你的历史考据，或做你的社会改革事业。你有了这种称心如意的活动，生活就不枯寂了，精神也就不会烦闷了。</p>\n<p>第三个方子也只有一句话：“你得有一点信心。”我们生当这个不幸的时代，眼中所见，耳中所闻，无非是叫我们悲观失望的。特别是在这个年头毕业的你们，眼见自己的国家民族沉沦到这步田地，眼看世界只是强权的世界，望极天边好像看不见一线的光明——在这个年头不发狂自杀，已算是万幸了，怎么还能够保持一点内心的镇定和理想的信任呢?我要对你们说：这时候正是我们要培养我们的信心的时候!只要我们有信心，我们还有救。</p>\n<p>古人说：“信心可以移山。”又说：“只要功夫深，生铁磨成绣花针。”你不信吗?当拿破仑的军队征服普鲁士，占据柏林的时候，有一位教授叫作费希特的，天天在讲堂劝他的国人要有信心，要信仰他们的民族是有世界的特殊使命的，是必定要复兴的。费希特死的时候，谁也不能预料德意志统一帝国何时可以实现，然而不满５０年，新的统一的德意志帝国居然实现了。</p>\n<p>一个国家的强弱盛衰，都不是偶然的，都不能逃出因果的铁律的。我们今日所受的苦痛和耻辱，都只是过去种种恶因种下的恶果。我们要收获将来的善果，必须努力种现在新因。一粒一粒地种，必有满仓满屋的收，这是我们今日应有的信心。我们要深信：今日的失败，都由于过去的不努力。我们要深信：今日的努力，必定有将来的大收成。</p>\n<p>佛典里有一句话：“福不唐捐。”唐捐就是白白地丢了。我们也应该说：“功不唐捐!”没有一点努力是会白白地丢了的。在我们看不见想不到的时候，在我们看不见的方向，你瞧!你下的种子早已生根发叶开花结果了!你不信吗?法国被普鲁士打败之后，割了两省地，赔了５０万万法郎的赔款。这时候有一位刻苦的科学家巴斯德终日埋头在他的化学试验室里做他的化学试验和微菌学研究。他是一个最爱国的人，然而他深信只有科学可以救国。他用一生的精力证明了三个科学问题：(1)每一种发酵作用都是由于一种微菌的发展；(2)每一种传染病都是一种微菌在生物体内的发展；(3)传染病的微菌，在特殊的培养之下可以减轻毒力，使他们从病菌变成防病的药苗。</p>\n<p>这三个问题在表面上似乎都和救国大事业没有多大关系。然而从第一个问题的证明，巴斯德定出做醋酿酒的新法，使全国的酒醋业每年减除极大的损失。从第二个问题的证明，巴斯德教全国的蚕丝业怎样选种防病，教全国的畜牧农家怎样防止牛羊瘟疫，又教全世界怎样注重消毒以减少外科手术的死亡率。从第三个问题的证明，巴斯德发明了牲畜的脾热瘟的疗治药苗，每年替法国农家减除了２０００万法郎的大损失；又发明了疯狗咬毒的治疗法，救济了无数的生命。所以英国的科学家赫胥黎在皇家学会里称颂巴斯德的功绩道：“法国给了德国５０万万法郎的赔款，巴斯德先生一个人研究科学的成就足够还清这一笔赔款了。”巴斯德对于科学有绝大的信心，所以他在国家蒙奇辱大难的时候，终不肯抛弃他的显微镜与试验室。他绝不想他在显微镜底下能偿还５０万万法郎的赔款，然而在他看不见想不到的时候，他已收获了科学救国的奇迹。</p>\n<p>朋友们，在你最悲观失望的时候，那正是你必须鼓起坚强的信心的时候。你要深信：天下没有白费的努力。成功不必在我，而功力必不唐捐。</p>\n<p>（摘自《胡适文存》第4集第4卷《胡适教育论著选》，人民教育出版社)</p>\n","site":{"data":{"projects":[{"name":"NJUPT_Esport","url":"https://github.com/Davont/NJUPT_Esport","desc":"一个为在校学生提供体育相关成绩查询、校新闻推送、学生反馈评论的web app"},{"name":"Furniture_Management_System","url":"https://github.com/Davont/Furniture_Management_System","desc":"一个提供家具购买、下单、用户管理、订单管理、商户管理等功能的家具订单CMS系统"},{"name":"weapp-WQPS","url":"https://github.com/Davont/weapp-WQPS","desc":"一个展示型的微信小程序，旨在提供基于卫星传感网的水质监测系统的对外展示平台。"},{"name":"yiban_registration","url":"https://github.com/Davont/yiban_registration","desc":"一个面向社团提供新生加入社团的线上报名表"}]}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>前几天看了央视新闻关于毕业的夜读文章<br>里面提到了胡适先生的《写给大学毕业生的一封信》，看了很有感触，所以摘抄至此，与未来的自己分享。</p>\n<p>本文是胡适先生1932年6月27日所作。虽然30年代那个血雨腥风的时代已经过去，现在的时代已经与当时不可同日而语，但是，读来还是感觉受益匪浅，胡适先生的谆谆教导之情溢于言表。本文中，胡适先生认为，大学生毕业有三条路可走：继续做学术研究；寻着相当的职业；做官，办党，革命。文中分析了大学毕业后遇到的“陷阱堕落的方式”，并给出了三个方子。</p>\n<h1 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h1><p>这一两个星期里，各地的大学都有毕业的班次，都有很多的毕业生离开学校去开始他们的成人事业。</p>\n<p>学生的生活是一种享有特殊优待的生活，不妨幼稚一点，不妨吵吵闹闹，社会都能纵容他们，不肯严格地要他们负行为的责任。现在他们要撑起自己的肩膀来挑他们自己的担子了。在这个国难最紧急的年头，他们的担子真不轻!我们祝他们的成功，同时也不忍不依据自己的经验，赠他们几句送行的赠言——虽未必是救命毫毛，也许做个防身的锦囊罢!</p>\n<p>你们毕业之后，可走的路不出这几条：绝少数的人还可以在国内或国外的研究院继续做学术研究；少数的人可以寻着相当的职业；此外还有做官，办党，革命三条路；再有就是在家享福或者失业亲居了。</p>\n<p>走其余几条路的人，都不能没有堕落的危险。堕落的方式很多，总括起来，约有这两大类：</p>\n<p>第一是容易抛弃学生时代求知识的欲望。你们到了实际社会里，往往学非所用，往往所学全无用处，往往可以完全用不着学问，而一样可以胡乱混饭吃，混官做。在这种环境里即使向来抱有求知识学问的人，也不免心灰意懒，把求知的欲望渐渐冷淡下去。况且学问是要有相当的设备的：书籍，实验室，师友的切磋指导，闲暇的工夫，都不是一个平常要糊口养家的人能容易办到的。没有做学问的环境，又谁能怪我们抛弃学问呢?</p>\n<p>第二是容易抛弃学生时代理想的人生的追求。少年人初次和冷酷的社会接触，容易感觉理想与事实相去太远，容易发生悲观和失望。多年怀抱的人生理想，改造的热诚，奋斗的勇气，到此时候，好像全不是那么一回事了。渺小的个人在那强烈的社会炉火里，往往经不起长时期的烤炼就熔化了，一点高尚的理想不久就幻灭了。抱着改造社会的梦想而来，往往是弃甲抛兵而走，或者做了恶势的俘虏。你在那牢狱里，回想那少年气壮时代的种种理想主义，好像都成了自误误人的迷梦!从此以后，你就甘心放弃理想人生的追求，甘心做现在社会的顺民了。要防御这两方面的堕落，一面要保持我们求知识的欲望，一面要保持我们对人生的追求。</p>\n<p>有什么好方子呢?依我个人的观察和经验，有三种防身的药方是值得一试的。</p>\n<p>第一个方子只有一句话：“总得时时寻一两个值得研究的问题!”问题是知识学问的老祖宗：古往今来一切知识的产生与积聚，都是因为要解答问题——要解答实用上的困难和理论上的疑难。所谓“为知识而求知识”，其实也只是一种好奇心追求某种问题的解答，不过因为那种问题的性质不必是直接应用的，人们就觉得这是无所谓的求知识了。</p>\n<p>我们出学校之后，离开了做学问的环境，如果没有一两个值得解答的问题在脑子里盘旋，就很难保持求学问的热心。可是，如果你有了一个真有趣的问题逗你去想它，天天引诱你去解决它，天天对你挑衅你无可奈何它——这时候，你就会同恋爱一个女子发了疯一样，坐也坐不下，睡也睡不安，没工夫也得偷出工夫去陪她，没钱也得缩衣节食去巴结她。没有书，你自会变卖家私去买书；没有仪器，你自会典押衣物去置办仪器；没有师友，你自会不远千里去寻师访友。你只要有疑难问题来逼你时时用脑子，你自然会保持发展你对学问的兴趣，即使在最贫乏的知识中，你也会慢慢地，聚起一个小图书馆来，或者设置起一所小试验室来。所以我说，第一要寻问题。脑子里没有问题之日，就是你知识生活寿终正寝之时!古人说，“待文王而兴者，凡民也。若夫豪杰之士，虽无文王犹兴。”试想伽利略和牛顿有多少藏书?有多少仪器?他们不过是有问题而已。有了问题而后他们自会造出仪器来解决他们的问题。没有问题的人们，关在图书馆里也不会用书，锁在试验室里也不会有什么发现。</p>\n<p>第二个方子也只有一句话：“总得多发展一点非职业的兴趣。”离开学校之后，大家总是寻个吃饭的职业。可是你寻得的职业未必就是你所学的，未必是你所心喜的，或者是你所学的而和你性情不相近的。在这种情况之下，工作往往成了苦工，就感觉不到兴趣了。为糊口而做那种非“性之所近而力之所能勉”的工作，就很难保持求知的兴趣的生活的理想主义。最好的救济方法只有多多发展职业以外的正当兴趣与活动。</p>\n<p>一个人应该有他的职业，也应该有他非职业的玩艺儿，可以叫作业余活动。往往他的业余活动比他的职业还更重要，因为一个人成就怎样，往往靠他怎样利用他的闲暇时间。他用他的闲暇来打麻将，他就成了个赌徒；你用你的闲暇来做社会服务，你也许成个社会改革者；或者你用你的闲暇去研究历史，你也许成个史学家。你的闲暇往往定你的终身。英国19世纪的两个哲人，弥儿终身做东印度公司的秘书，然而他的业余工作使他在哲学上、经济学上、政治思想史上都占一个很高的位置；斯宾塞是一个测量工程师，然而他的业余工作使他成为前世纪晚期世界思想界的一个重镇。古来成大学问的人，几乎没有一个不善用他的闲暇时间的。职业不容易适合我们的性情，我们要想生活不苦痛不堕落，只有多方发展。</p>\n<p>有了这种心爱的玩艺儿，你就做六个钟头抹桌子工作也不会感觉烦闷了。因为你知道，抹了六个钟头的桌子之后，你可以回家做你的化学研究，或画完你的大幅山水，或写你的小说戏曲，或继续你的历史考据，或做你的社会改革事业。你有了这种称心如意的活动，生活就不枯寂了，精神也就不会烦闷了。</p>\n<p>第三个方子也只有一句话：“你得有一点信心。”我们生当这个不幸的时代，眼中所见，耳中所闻，无非是叫我们悲观失望的。特别是在这个年头毕业的你们，眼见自己的国家民族沉沦到这步田地，眼看世界只是强权的世界，望极天边好像看不见一线的光明——在这个年头不发狂自杀，已算是万幸了，怎么还能够保持一点内心的镇定和理想的信任呢?我要对你们说：这时候正是我们要培养我们的信心的时候!只要我们有信心，我们还有救。</p>\n<p>古人说：“信心可以移山。”又说：“只要功夫深，生铁磨成绣花针。”你不信吗?当拿破仑的军队征服普鲁士，占据柏林的时候，有一位教授叫作费希特的，天天在讲堂劝他的国人要有信心，要信仰他们的民族是有世界的特殊使命的，是必定要复兴的。费希特死的时候，谁也不能预料德意志统一帝国何时可以实现，然而不满５０年，新的统一的德意志帝国居然实现了。</p>\n<p>一个国家的强弱盛衰，都不是偶然的，都不能逃出因果的铁律的。我们今日所受的苦痛和耻辱，都只是过去种种恶因种下的恶果。我们要收获将来的善果，必须努力种现在新因。一粒一粒地种，必有满仓满屋的收，这是我们今日应有的信心。我们要深信：今日的失败，都由于过去的不努力。我们要深信：今日的努力，必定有将来的大收成。</p>\n<p>佛典里有一句话：“福不唐捐。”唐捐就是白白地丢了。我们也应该说：“功不唐捐!”没有一点努力是会白白地丢了的。在我们看不见想不到的时候，在我们看不见的方向，你瞧!你下的种子早已生根发叶开花结果了!你不信吗?法国被普鲁士打败之后，割了两省地，赔了５０万万法郎的赔款。这时候有一位刻苦的科学家巴斯德终日埋头在他的化学试验室里做他的化学试验和微菌学研究。他是一个最爱国的人，然而他深信只有科学可以救国。他用一生的精力证明了三个科学问题：(1)每一种发酵作用都是由于一种微菌的发展；(2)每一种传染病都是一种微菌在生物体内的发展；(3)传染病的微菌，在特殊的培养之下可以减轻毒力，使他们从病菌变成防病的药苗。</p>\n<p>这三个问题在表面上似乎都和救国大事业没有多大关系。然而从第一个问题的证明，巴斯德定出做醋酿酒的新法，使全国的酒醋业每年减除极大的损失。从第二个问题的证明，巴斯德教全国的蚕丝业怎样选种防病，教全国的畜牧农家怎样防止牛羊瘟疫，又教全世界怎样注重消毒以减少外科手术的死亡率。从第三个问题的证明，巴斯德发明了牲畜的脾热瘟的疗治药苗，每年替法国农家减除了２０００万法郎的大损失；又发明了疯狗咬毒的治疗法，救济了无数的生命。所以英国的科学家赫胥黎在皇家学会里称颂巴斯德的功绩道：“法国给了德国５０万万法郎的赔款，巴斯德先生一个人研究科学的成就足够还清这一笔赔款了。”巴斯德对于科学有绝大的信心，所以他在国家蒙奇辱大难的时候，终不肯抛弃他的显微镜与试验室。他绝不想他在显微镜底下能偿还５０万万法郎的赔款，然而在他看不见想不到的时候，他已收获了科学救国的奇迹。</p>\n<p>朋友们，在你最悲观失望的时候，那正是你必须鼓起坚强的信心的时候。你要深信：天下没有白费的努力。成功不必在我，而功力必不唐捐。</p>\n<p>（摘自《胡适文存》第4集第4卷《胡适教育论著选》，人民教育出版社)</p>\n"},{"title":"Js 超大整数相加","date":"2019-05-05T10:24:48.000Z","_content":"# 前言\n学弟问我一道题，觉得不错，记录下来。\n\n# 题目\n具体的文字记得不太清了，总之就是js的整数运算是有范围的，应该是-2^53  ------  2^53  ，所以如果超过了53位，你该怎么运算?\n这里贴一张图，供大家理解。\n![js-number](http://pic.davontt.com/picGo/js-intsum.png)\n<center style=\"color:#AAAAAA\">js Number</center>\n\n# 答案\n\n菜鸡答案：\n\n```\nfunction computing(str1,str2){\n    let strArry1=str1.split('');\n    let strArry2=str2.split('');\n    let maxLength=strArry1.length>strArry2.length?strArry1.length:strArry2.length;\n    let length1=strArry1.length;\n    let length2=strArry2.length;\n    let flag=0;\n    let sum='';\n    for(i=0;i<maxLength-length1;i++){\n       \n        strArry1.unshift('0');\n    }\n    for( i=0;i<maxLength-length2;i++){\n        strArry2.unshift('0');\n    }\n    for(i=maxLength-1;i>=0;i--){\n        let arraySum=parseInt(strArry1[i])+parseInt(strArry2[i])+flag;\n        if(arraySum>9){\n            sum=(arraySum)%10+sum;\n            flag=parseInt(arraySum/10);\n        }\n        else{\n            flag=0;\n            sum=(arraySum)%10+sum;\n        }\n    }\n    console.log(sum)\n}\n```\n\n大佬答案：\n\n```\nfunction sumStrings(a,b){\n  var res='', c=0;\n  a = a.split('');\n  b = b.split('');\n  while (a.length || b.length || c){\n      c += ~~a.pop() + ~~b.pop();\n      res = c % 10 + res;\n      c = c>9;\n  }\n  return res.replace(/^0+/,'');\n \n}\n```\n## 解释\n- 首先我们用字符串的形势来保存大数，就保证了其在数学表示上不会发生变化\n- 初始化res, temp变量来保存中间计算的结果，在将两个字符串split为数组，以便我们进行每一位的运算\n- 循环的第一次就是进行 \"个位\" 的运算，将二者最末尾的两个数相加，由于每一位数字是0 - 9，所以需要进行进位，在进过取余数操作后，将结果保留在个位。\n- 判断 temp 是否大于 10，若是则将 temp 赋值为 true，等等，为什么要赋值成布尔值，不要着急，魔法即将发生。\n- 在两个大数中的一个还有数字没有参与运算，或者前一次运算发生进位后，进行下一次循环。\n- 接着除了对新的两个数字相加还要加上 temp，若上次发生了进位，则此时 temp 为 true，Js因为存在隐式转换，所以 true 转换为 1，我们借用 Js 的类型转换，完成了逻辑上的逢10进1操作。Amazing\n- 接下来就是重复上述的操作，直到计算结束。\n\n# 按位非～及其他几种字符串转数字方法\n\n**parseInt**\n\n```\nparseInt('012')      ----    12\nparseInt('12')       ----    12\nparseInt('12abc')    ----    12\nparseInt('12.4')     ----    12\n```\n\n**parseFloat**\n\n```\nparseFloat('1.4')    ----    1.4\nparseFloat('14')     ----    14\nparseFloat('1.4ab')  ----    1.4\n```\n\n**~~**\n\n```\n~~1.23               ----    1\n~~'1.23'             ----    1\n~~'abc'              ----    0\n```\n\n**Number**\n```\nNumber(\"023\")        ----    23\nNumber(\"02.3\")       ----    2.3\nNumber(\"avx\")        ----    NaN\n```\n根据JsPerf.com的基准测试 Number是JsPerf中最慢的之一 大多数浏览器对parseInt的响应最佳。\n各种方法各有利弊，在不确定参数的形式的时候，应该要谨慎使用，做好类型判断，防止程序报错\n\n","source":"_posts/js-intSum.md","raw":"---\ntitle: Js 超大整数相加\ndate: 2019-05-05 18:24:48\ntags: [js,算法]\n---\n# 前言\n学弟问我一道题，觉得不错，记录下来。\n\n# 题目\n具体的文字记得不太清了，总之就是js的整数运算是有范围的，应该是-2^53  ------  2^53  ，所以如果超过了53位，你该怎么运算?\n这里贴一张图，供大家理解。\n![js-number](http://pic.davontt.com/picGo/js-intsum.png)\n<center style=\"color:#AAAAAA\">js Number</center>\n\n# 答案\n\n菜鸡答案：\n\n```\nfunction computing(str1,str2){\n    let strArry1=str1.split('');\n    let strArry2=str2.split('');\n    let maxLength=strArry1.length>strArry2.length?strArry1.length:strArry2.length;\n    let length1=strArry1.length;\n    let length2=strArry2.length;\n    let flag=0;\n    let sum='';\n    for(i=0;i<maxLength-length1;i++){\n       \n        strArry1.unshift('0');\n    }\n    for( i=0;i<maxLength-length2;i++){\n        strArry2.unshift('0');\n    }\n    for(i=maxLength-1;i>=0;i--){\n        let arraySum=parseInt(strArry1[i])+parseInt(strArry2[i])+flag;\n        if(arraySum>9){\n            sum=(arraySum)%10+sum;\n            flag=parseInt(arraySum/10);\n        }\n        else{\n            flag=0;\n            sum=(arraySum)%10+sum;\n        }\n    }\n    console.log(sum)\n}\n```\n\n大佬答案：\n\n```\nfunction sumStrings(a,b){\n  var res='', c=0;\n  a = a.split('');\n  b = b.split('');\n  while (a.length || b.length || c){\n      c += ~~a.pop() + ~~b.pop();\n      res = c % 10 + res;\n      c = c>9;\n  }\n  return res.replace(/^0+/,'');\n \n}\n```\n## 解释\n- 首先我们用字符串的形势来保存大数，就保证了其在数学表示上不会发生变化\n- 初始化res, temp变量来保存中间计算的结果，在将两个字符串split为数组，以便我们进行每一位的运算\n- 循环的第一次就是进行 \"个位\" 的运算，将二者最末尾的两个数相加，由于每一位数字是0 - 9，所以需要进行进位，在进过取余数操作后，将结果保留在个位。\n- 判断 temp 是否大于 10，若是则将 temp 赋值为 true，等等，为什么要赋值成布尔值，不要着急，魔法即将发生。\n- 在两个大数中的一个还有数字没有参与运算，或者前一次运算发生进位后，进行下一次循环。\n- 接着除了对新的两个数字相加还要加上 temp，若上次发生了进位，则此时 temp 为 true，Js因为存在隐式转换，所以 true 转换为 1，我们借用 Js 的类型转换，完成了逻辑上的逢10进1操作。Amazing\n- 接下来就是重复上述的操作，直到计算结束。\n\n# 按位非～及其他几种字符串转数字方法\n\n**parseInt**\n\n```\nparseInt('012')      ----    12\nparseInt('12')       ----    12\nparseInt('12abc')    ----    12\nparseInt('12.4')     ----    12\n```\n\n**parseFloat**\n\n```\nparseFloat('1.4')    ----    1.4\nparseFloat('14')     ----    14\nparseFloat('1.4ab')  ----    1.4\n```\n\n**~~**\n\n```\n~~1.23               ----    1\n~~'1.23'             ----    1\n~~'abc'              ----    0\n```\n\n**Number**\n```\nNumber(\"023\")        ----    23\nNumber(\"02.3\")       ----    2.3\nNumber(\"avx\")        ----    NaN\n```\n根据JsPerf.com的基准测试 Number是JsPerf中最慢的之一 大多数浏览器对parseInt的响应最佳。\n各种方法各有利弊，在不确定参数的形式的时候，应该要谨慎使用，做好类型判断，防止程序报错\n\n","slug":"js-intSum","published":1,"updated":"2020-12-20T16:36:55.008Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrr9sojh000m1l5xa4e558kl","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>学弟问我一道题，觉得不错，记录下来。</p>\n<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>具体的文字记得不太清了，总之就是js的整数运算是有范围的，应该是-2^53  ——  2^53  ，所以如果超过了53位，你该怎么运算?<br>这里贴一张图，供大家理解。<br><img src=\"http://pic.davontt.com/picGo/js-intsum.png\" alt=\"js-number\"></p>\n<center style=\"color:#AAAAAA\">js Number</center>\n\n<h1 id=\"答案\"><a href=\"#答案\" class=\"headerlink\" title=\"答案\"></a>答案</h1><p>菜鸡答案：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function computing(str1,str2)&#123;</span><br><span class=\"line\">    let <span class=\"attribute\">strArry1</span>=str1.split('');</span><br><span class=\"line\">    let <span class=\"attribute\">strArry2</span>=str2.split('');</span><br><span class=\"line\">    let <span class=\"attribute\">maxLength</span>=strArry1.length&gt;strArry2.length?strArry1.length:strArry2.length;</span><br><span class=\"line\">    let <span class=\"attribute\">length1</span>=strArry1.length;</span><br><span class=\"line\">    let <span class=\"attribute\">length2</span>=strArry2.length;</span><br><span class=\"line\">    let <span class=\"attribute\">flag</span>=0;</span><br><span class=\"line\">    let <span class=\"attribute\">sum</span>=<span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"attribute\">i</span>=0;i&lt;maxLength-length1;i++)&#123;</span><br><span class=\"line\">       </span><br><span class=\"line\">        strArry1.unshift(<span class=\"string\">'0'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>( <span class=\"attribute\">i</span>=0;i&lt;maxLength-length2;i++)&#123;</span><br><span class=\"line\">        strArry2.unshift(<span class=\"string\">'0'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"attribute\">i</span>=maxLength-1;i&gt;=0;i--)&#123;</span><br><span class=\"line\">        let <span class=\"attribute\">arraySum</span>=parseInt(strArry1[i])+parseInt(strArry2[i])+flag;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arraySum&gt;9)&#123;</span><br><span class=\"line\">            sum=(arraySum)%10+sum;</span><br><span class=\"line\">            <span class=\"attribute\">flag</span>=parseInt(arraySum/10);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"attribute\">flag</span>=0;</span><br><span class=\"line\">            sum=(arraySum)%10+sum;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    console.log(sum)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>大佬答案：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">function</span> sumStrings(a,b)&#123;</span><br><span class=\"line\">  <span class=\"attribute\">var</span> res=<span class=\"string\">''</span>, c=<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">a</span> = a.split(<span class=\"string\">''</span>);</span><br><span class=\"line\">  <span class=\"attribute\">b</span> = b.split(<span class=\"string\">''</span>);</span><br><span class=\"line\">  <span class=\"attribute\">while</span> (a.length || b.length || c)&#123;</span><br><span class=\"line\">      <span class=\"attribute\">c</span> += ~~a.pop() + ~~b.pop();</span><br><span class=\"line\">      <span class=\"attribute\">res</span> = c % <span class=\"number\">10</span> + res;</span><br><span class=\"line\">      <span class=\"attribute\">c</span> = c&gt;<span class=\"number\">9</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"attribute\">return</span> res.replace(/^<span class=\"number\">0</span>+/,<span class=\"string\">''</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"解释\"><a href=\"#解释\" class=\"headerlink\" title=\"解释\"></a>解释</h2><ul>\n<li>首先我们用字符串的形势来保存大数，就保证了其在数学表示上不会发生变化</li>\n<li>初始化res, temp变量来保存中间计算的结果，在将两个字符串split为数组，以便我们进行每一位的运算</li>\n<li>循环的第一次就是进行 “个位” 的运算，将二者最末尾的两个数相加，由于每一位数字是0 - 9，所以需要进行进位，在进过取余数操作后，将结果保留在个位。</li>\n<li>判断 temp 是否大于 10，若是则将 temp 赋值为 true，等等，为什么要赋值成布尔值，不要着急，魔法即将发生。</li>\n<li>在两个大数中的一个还有数字没有参与运算，或者前一次运算发生进位后，进行下一次循环。</li>\n<li>接着除了对新的两个数字相加还要加上 temp，若上次发生了进位，则此时 temp 为 true，Js因为存在隐式转换，所以 true 转换为 1，我们借用 Js 的类型转换，完成了逻辑上的逢10进1操作。Amazing</li>\n<li>接下来就是重复上述的操作，直到计算结束。</li>\n</ul>\n<h1 id=\"按位非～及其他几种字符串转数字方法\"><a href=\"#按位非～及其他几种字符串转数字方法\" class=\"headerlink\" title=\"按位非～及其他几种字符串转数字方法\"></a>按位非～及其他几种字符串转数字方法</h1><p><strong>parseInt</strong></p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">parseInt</span><span class=\"params\">(<span class=\"string\">'012'</span>)</span></span>      ----    <span class=\"number\">12</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">parseInt</span><span class=\"params\">(<span class=\"string\">'12'</span>)</span></span>       ----    <span class=\"number\">12</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">parseInt</span><span class=\"params\">(<span class=\"string\">'12abc'</span>)</span></span>    ----    <span class=\"number\">12</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">parseInt</span><span class=\"params\">(<span class=\"string\">'12.4'</span>)</span></span>     ----    <span class=\"number\">12</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>parseFloat</strong></p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">parseFloat</span><span class=\"params\">(<span class=\"string\">'1.4'</span>)</span></span>    ----    <span class=\"number\">1.4</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">parseFloat</span><span class=\"params\">(<span class=\"string\">'14'</span>)</span></span>     ----    <span class=\"number\">14</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">parseFloat</span><span class=\"params\">(<span class=\"string\">'1.4ab'</span>)</span></span>  ----    <span class=\"number\">1.4</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>~~</strong></p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~~<span class=\"number\">1.23</span>               <span class=\"comment\">----    1</span></span><br><span class=\"line\">~~<span class=\"string\">'1.23'</span>             <span class=\"comment\">----    1</span></span><br><span class=\"line\">~~<span class=\"string\">'abc'</span>              <span class=\"comment\">----    0</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>Number</strong></p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">Number</span><span class=\"params\">(<span class=\"string\">\"023\"</span>)</span></span>        ----    <span class=\"number\">23</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">Number</span><span class=\"params\">(<span class=\"string\">\"02.3\"</span>)</span></span>       ----    <span class=\"number\">2.3</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">Number</span><span class=\"params\">(<span class=\"string\">\"avx\"</span>)</span></span>        ----    NaN</span><br></pre></td></tr></table></figure>\n<p>根据JsPerf.com的基准测试 Number是JsPerf中最慢的之一 大多数浏览器对parseInt的响应最佳。<br>各种方法各有利弊，在不确定参数的形式的时候，应该要谨慎使用，做好类型判断，防止程序报错</p>\n","site":{"data":{"projects":[{"name":"NJUPT_Esport","url":"https://github.com/Davont/NJUPT_Esport","desc":"一个为在校学生提供体育相关成绩查询、校新闻推送、学生反馈评论的web app"},{"name":"Furniture_Management_System","url":"https://github.com/Davont/Furniture_Management_System","desc":"一个提供家具购买、下单、用户管理、订单管理、商户管理等功能的家具订单CMS系统"},{"name":"weapp-WQPS","url":"https://github.com/Davont/weapp-WQPS","desc":"一个展示型的微信小程序，旨在提供基于卫星传感网的水质监测系统的对外展示平台。"},{"name":"yiban_registration","url":"https://github.com/Davont/yiban_registration","desc":"一个面向社团提供新生加入社团的线上报名表"}]}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>学弟问我一道题，觉得不错，记录下来。</p>\n<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p>具体的文字记得不太清了，总之就是js的整数运算是有范围的，应该是-2^53  ——  2^53  ，所以如果超过了53位，你该怎么运算?<br>这里贴一张图，供大家理解。<br><img src=\"http://pic.davontt.com/picGo/js-intsum.png\" alt=\"js-number\"></p>\n<center style=\"color:#AAAAAA\">js Number</center>\n\n<h1 id=\"答案\"><a href=\"#答案\" class=\"headerlink\" title=\"答案\"></a>答案</h1><p>菜鸡答案：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function computing(str1,str2)&#123;</span><br><span class=\"line\">    let <span class=\"attribute\">strArry1</span>=str1.split('');</span><br><span class=\"line\">    let <span class=\"attribute\">strArry2</span>=str2.split('');</span><br><span class=\"line\">    let <span class=\"attribute\">maxLength</span>=strArry1.length&gt;strArry2.length?strArry1.length:strArry2.length;</span><br><span class=\"line\">    let <span class=\"attribute\">length1</span>=strArry1.length;</span><br><span class=\"line\">    let <span class=\"attribute\">length2</span>=strArry2.length;</span><br><span class=\"line\">    let <span class=\"attribute\">flag</span>=0;</span><br><span class=\"line\">    let <span class=\"attribute\">sum</span>=<span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"attribute\">i</span>=0;i&lt;maxLength-length1;i++)&#123;</span><br><span class=\"line\">       </span><br><span class=\"line\">        strArry1.unshift(<span class=\"string\">'0'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>( <span class=\"attribute\">i</span>=0;i&lt;maxLength-length2;i++)&#123;</span><br><span class=\"line\">        strArry2.unshift(<span class=\"string\">'0'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"attribute\">i</span>=maxLength-1;i&gt;=0;i--)&#123;</span><br><span class=\"line\">        let <span class=\"attribute\">arraySum</span>=parseInt(strArry1[i])+parseInt(strArry2[i])+flag;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arraySum&gt;9)&#123;</span><br><span class=\"line\">            sum=(arraySum)%10+sum;</span><br><span class=\"line\">            <span class=\"attribute\">flag</span>=parseInt(arraySum/10);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"attribute\">flag</span>=0;</span><br><span class=\"line\">            sum=(arraySum)%10+sum;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    console.log(sum)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>大佬答案：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">function</span> sumStrings(a,b)&#123;</span><br><span class=\"line\">  <span class=\"attribute\">var</span> res=<span class=\"string\">''</span>, c=<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">a</span> = a.split(<span class=\"string\">''</span>);</span><br><span class=\"line\">  <span class=\"attribute\">b</span> = b.split(<span class=\"string\">''</span>);</span><br><span class=\"line\">  <span class=\"attribute\">while</span> (a.length || b.length || c)&#123;</span><br><span class=\"line\">      <span class=\"attribute\">c</span> += ~~a.pop() + ~~b.pop();</span><br><span class=\"line\">      <span class=\"attribute\">res</span> = c % <span class=\"number\">10</span> + res;</span><br><span class=\"line\">      <span class=\"attribute\">c</span> = c&gt;<span class=\"number\">9</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"attribute\">return</span> res.replace(/^<span class=\"number\">0</span>+/,<span class=\"string\">''</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"解释\"><a href=\"#解释\" class=\"headerlink\" title=\"解释\"></a>解释</h2><ul>\n<li>首先我们用字符串的形势来保存大数，就保证了其在数学表示上不会发生变化</li>\n<li>初始化res, temp变量来保存中间计算的结果，在将两个字符串split为数组，以便我们进行每一位的运算</li>\n<li>循环的第一次就是进行 “个位” 的运算，将二者最末尾的两个数相加，由于每一位数字是0 - 9，所以需要进行进位，在进过取余数操作后，将结果保留在个位。</li>\n<li>判断 temp 是否大于 10，若是则将 temp 赋值为 true，等等，为什么要赋值成布尔值，不要着急，魔法即将发生。</li>\n<li>在两个大数中的一个还有数字没有参与运算，或者前一次运算发生进位后，进行下一次循环。</li>\n<li>接着除了对新的两个数字相加还要加上 temp，若上次发生了进位，则此时 temp 为 true，Js因为存在隐式转换，所以 true 转换为 1，我们借用 Js 的类型转换，完成了逻辑上的逢10进1操作。Amazing</li>\n<li>接下来就是重复上述的操作，直到计算结束。</li>\n</ul>\n<h1 id=\"按位非～及其他几种字符串转数字方法\"><a href=\"#按位非～及其他几种字符串转数字方法\" class=\"headerlink\" title=\"按位非～及其他几种字符串转数字方法\"></a>按位非～及其他几种字符串转数字方法</h1><p><strong>parseInt</strong></p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">parseInt</span><span class=\"params\">(<span class=\"string\">'012'</span>)</span></span>      ----    <span class=\"number\">12</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">parseInt</span><span class=\"params\">(<span class=\"string\">'12'</span>)</span></span>       ----    <span class=\"number\">12</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">parseInt</span><span class=\"params\">(<span class=\"string\">'12abc'</span>)</span></span>    ----    <span class=\"number\">12</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">parseInt</span><span class=\"params\">(<span class=\"string\">'12.4'</span>)</span></span>     ----    <span class=\"number\">12</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>parseFloat</strong></p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">parseFloat</span><span class=\"params\">(<span class=\"string\">'1.4'</span>)</span></span>    ----    <span class=\"number\">1.4</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">parseFloat</span><span class=\"params\">(<span class=\"string\">'14'</span>)</span></span>     ----    <span class=\"number\">14</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">parseFloat</span><span class=\"params\">(<span class=\"string\">'1.4ab'</span>)</span></span>  ----    <span class=\"number\">1.4</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>~~</strong></p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~~<span class=\"number\">1.23</span>               <span class=\"comment\">----    1</span></span><br><span class=\"line\">~~<span class=\"string\">'1.23'</span>             <span class=\"comment\">----    1</span></span><br><span class=\"line\">~~<span class=\"string\">'abc'</span>              <span class=\"comment\">----    0</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>Number</strong></p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">Number</span><span class=\"params\">(<span class=\"string\">\"023\"</span>)</span></span>        ----    <span class=\"number\">23</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">Number</span><span class=\"params\">(<span class=\"string\">\"02.3\"</span>)</span></span>       ----    <span class=\"number\">2.3</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">Number</span><span class=\"params\">(<span class=\"string\">\"avx\"</span>)</span></span>        ----    NaN</span><br></pre></td></tr></table></figure>\n<p>根据JsPerf.com的基准测试 Number是JsPerf中最慢的之一 大多数浏览器对parseInt的响应最佳。<br>各种方法各有利弊，在不确定参数的形式的时候，应该要谨慎使用，做好类型判断，防止程序报错</p>\n"},{"title":"React 学习笔记","date":"2020-01-20T08:04:21.000Z","_content":"# 前言\n实习公司的技术栈是React-Native，得学React，再加上React本身非常流行。我记得之前去谷歌开发者大会上，有人问了一个问题，React作为前端框架，它的优势到底是什么？演讲的大牛回答：生态。好的生态，才会有未来持续变好的可能，最近几年无数的例子证明，没有优秀的生态环境，没有频繁的维护跟新，没有友好的交流社区，历史终究会把你遗忘。\n## 笔记初衷\n**初学，不求深刻，只求简洁。一切以接地气，大白话为主。**\n# 笔记知识点\n## 组件\n组件就是网页上的一部分，网页整体上就是一个大组件，大组件可以继续拆分，某种意义上，HTML标签也可以称得上是组件。\nReact中，大写字母都是组件。\n一开始引入React\n```\nimport React from 'react'；\nimport ReactDOM from 'react-dom';\n```\n引入它的意义是让我们能够理解下面的语法（大写字母的定义之类的）\nReactDOM 是可以让组件挂载到Dom节点上。\n（意思是你虽然能在网页上看到元素，但在html源代码里看不到相关元素,这是因为react是挂载dom上去的）\n\n## react dom\n\nreact 不用直接操作dom，而是操作数据，和Vue一样，都是MVVM框架。\n```\nconstructor(props){\n    super(props);\n    this.state={\n        list:[\n            'learn react',\n            'learn english'\n        ]\n    }\n}\n```\n解释：todolist 这个类刚被创建的时候，construction 会被执行，super进行初始化，不用管，stats可以存许多数据\n\n\n### this.state\n你想要改变数据的时候，不要直接就调用this.state 改变数据，而是用this.setState({\n    list:[...this.state.list,'hello']\n})\n\n如果要操作state的数据，最好不要直接更改state上的数据，而是先拷贝一个state，然后再更改。\n\n### react 里也有key 值 且要求不一样\n### 在react中，如果你的键值和名字一样，可以直接写一个即可，如：\n```\n    this.setState({\n      list: list\n    });\n```\n可以修改为下面这个\n```\nthis.setState({ list });\n```\n\n# dom理解\n# 父子组件传值\n\n\n* 父组件通过属性的形式向子组件传递参数，子组件通过props的形式来* 接收子组件的参数\n* 子组件向父组件通信，子组件要调用父组件传递过来的方法\n\n\n\n# 浏览器渲染\n\n# jsx 语句\n只能用js表达式，不能使用js 语句\n\n>  JSX 语法里的并不是真正的 HTML，而是虚拟 DOM，即 JS 代码，不信可看转译后的结果\n\n>  这种把模板直接嵌套在js语句中当表达式就是jsx语法.\n\n>  JSX为我们提供了创建React元素方法\n\njsx elements必须在一个可以闭合的标签元素中\n说白了react模板必须有一个父元素，并且仅有一个作为根节点。\n\n## jsx中绑定事件\n\n```\n<button onClick={this.handleBtnClick}>add</button>\n```\n\n# 初始化react-creat-app 和以前有一些不同\n\n一种是解释型的函数来定义，一种使用es6的class来继承。函数型的定义比较简单，语法清晰，但是不能使用state和lifecycle（或者说如果使用的话需要hook）。class继承的方式相对复杂，但可以拥有state和life\n```\n// 解释型的函数来定义\nimport React from 'react';\nfunction App() {\n  return (hello, i am veigar);\n}\nexport default App;cycle\n```\n```\n// 使用es6的class来继承\nimport React, {Component} from 'react';\nclass App extends Component{\n  render(){\n    return(hello, i am veigar)\n  }\n}\nexport default App;\n```","source":"_posts/learn-react.md","raw":"---\ntitle: React 学习笔记\ndate: 2020-01-20 16:04:21\ntags: [React,js]\n---\n# 前言\n实习公司的技术栈是React-Native，得学React，再加上React本身非常流行。我记得之前去谷歌开发者大会上，有人问了一个问题，React作为前端框架，它的优势到底是什么？演讲的大牛回答：生态。好的生态，才会有未来持续变好的可能，最近几年无数的例子证明，没有优秀的生态环境，没有频繁的维护跟新，没有友好的交流社区，历史终究会把你遗忘。\n## 笔记初衷\n**初学，不求深刻，只求简洁。一切以接地气，大白话为主。**\n# 笔记知识点\n## 组件\n组件就是网页上的一部分，网页整体上就是一个大组件，大组件可以继续拆分，某种意义上，HTML标签也可以称得上是组件。\nReact中，大写字母都是组件。\n一开始引入React\n```\nimport React from 'react'；\nimport ReactDOM from 'react-dom';\n```\n引入它的意义是让我们能够理解下面的语法（大写字母的定义之类的）\nReactDOM 是可以让组件挂载到Dom节点上。\n（意思是你虽然能在网页上看到元素，但在html源代码里看不到相关元素,这是因为react是挂载dom上去的）\n\n## react dom\n\nreact 不用直接操作dom，而是操作数据，和Vue一样，都是MVVM框架。\n```\nconstructor(props){\n    super(props);\n    this.state={\n        list:[\n            'learn react',\n            'learn english'\n        ]\n    }\n}\n```\n解释：todolist 这个类刚被创建的时候，construction 会被执行，super进行初始化，不用管，stats可以存许多数据\n\n\n### this.state\n你想要改变数据的时候，不要直接就调用this.state 改变数据，而是用this.setState({\n    list:[...this.state.list,'hello']\n})\n\n如果要操作state的数据，最好不要直接更改state上的数据，而是先拷贝一个state，然后再更改。\n\n### react 里也有key 值 且要求不一样\n### 在react中，如果你的键值和名字一样，可以直接写一个即可，如：\n```\n    this.setState({\n      list: list\n    });\n```\n可以修改为下面这个\n```\nthis.setState({ list });\n```\n\n# dom理解\n# 父子组件传值\n\n\n* 父组件通过属性的形式向子组件传递参数，子组件通过props的形式来* 接收子组件的参数\n* 子组件向父组件通信，子组件要调用父组件传递过来的方法\n\n\n\n# 浏览器渲染\n\n# jsx 语句\n只能用js表达式，不能使用js 语句\n\n>  JSX 语法里的并不是真正的 HTML，而是虚拟 DOM，即 JS 代码，不信可看转译后的结果\n\n>  这种把模板直接嵌套在js语句中当表达式就是jsx语法.\n\n>  JSX为我们提供了创建React元素方法\n\njsx elements必须在一个可以闭合的标签元素中\n说白了react模板必须有一个父元素，并且仅有一个作为根节点。\n\n## jsx中绑定事件\n\n```\n<button onClick={this.handleBtnClick}>add</button>\n```\n\n# 初始化react-creat-app 和以前有一些不同\n\n一种是解释型的函数来定义，一种使用es6的class来继承。函数型的定义比较简单，语法清晰，但是不能使用state和lifecycle（或者说如果使用的话需要hook）。class继承的方式相对复杂，但可以拥有state和life\n```\n// 解释型的函数来定义\nimport React from 'react';\nfunction App() {\n  return (hello, i am veigar);\n}\nexport default App;cycle\n```\n```\n// 使用es6的class来继承\nimport React, {Component} from 'react';\nclass App extends Component{\n  render(){\n    return(hello, i am veigar)\n  }\n}\nexport default App;\n```","slug":"learn-react","published":1,"updated":"2020-12-20T16:36:55.009Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrr9sojl000p1l5x5xpp9was","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>实习公司的技术栈是React-Native，得学React，再加上React本身非常流行。我记得之前去谷歌开发者大会上，有人问了一个问题，React作为前端框架，它的优势到底是什么？演讲的大牛回答：生态。好的生态，才会有未来持续变好的可能，最近几年无数的例子证明，没有优秀的生态环境，没有频繁的维护跟新，没有友好的交流社区，历史终究会把你遗忘。</p>\n<h2 id=\"笔记初衷\"><a href=\"#笔记初衷\" class=\"headerlink\" title=\"笔记初衷\"></a>笔记初衷</h2><p><strong>初学，不求深刻，只求简洁。一切以接地气，大白话为主。</strong></p>\n<h1 id=\"笔记知识点\"><a href=\"#笔记知识点\" class=\"headerlink\" title=\"笔记知识点\"></a>笔记知识点</h1><h2 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h2><p>组件就是网页上的一部分，网页整体上就是一个大组件，大组件可以继续拆分，某种意义上，HTML标签也可以称得上是组件。<br>React中，大写字母都是组件。<br>一开始引入React</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>；</span><br><span class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span>;</span><br></pre></td></tr></table></figure>\n<p>引入它的意义是让我们能够理解下面的语法（大写字母的定义之类的）<br>ReactDOM 是可以让组件挂载到Dom节点上。<br>（意思是你虽然能在网页上看到元素，但在html源代码里看不到相关元素,这是因为react是挂载dom上去的）</p>\n<h2 id=\"react-dom\"><a href=\"#react-dom\" class=\"headerlink\" title=\"react dom\"></a>react dom</h2><p>react 不用直接操作dom，而是操作数据，和Vue一样，都是MVVM框架。</p>\n<figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">constructor</span><span class=\"params\">(props)</span><span class=\"comment\">&#123;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">    super(props);</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">    this.state=&#123;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">        list:[</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">            'learn react',</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">            'learn english'</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">        ]</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"function\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>解释：todolist 这个类刚被创建的时候，construction 会被执行，super进行初始化，不用管，stats可以存许多数据</p>\n<h3 id=\"this-state\"><a href=\"#this-state\" class=\"headerlink\" title=\"this.state\"></a>this.state</h3><p>你想要改变数据的时候，不要直接就调用this.state 改变数据，而是用this.setState({<br>    list:[…this.state.list,’hello’]<br>})</p>\n<p>如果要操作state的数据，最好不要直接更改state上的数据，而是先拷贝一个state，然后再更改。</p>\n<h3 id=\"react-里也有key-值-且要求不一样\"><a href=\"#react-里也有key-值-且要求不一样\" class=\"headerlink\" title=\"react 里也有key 值 且要求不一样\"></a>react 里也有key 值 且要求不一样</h3><h3 id=\"在react中，如果你的键值和名字一样，可以直接写一个即可，如：\"><a href=\"#在react中，如果你的键值和名字一样，可以直接写一个即可，如：\" class=\"headerlink\" title=\"在react中，如果你的键值和名字一样，可以直接写一个即可，如：\"></a>在react中，如果你的键值和名字一样，可以直接写一个即可，如：</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">this</span><span class=\"selector-class\">.setState</span>(&#123;</span><br><span class=\"line\">  <span class=\"attribute\">list</span>: list</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>可以修改为下面这个</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.setState(&#123; <span class=\"built_in\">list</span> &#125;);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"dom理解\"><a href=\"#dom理解\" class=\"headerlink\" title=\"dom理解\"></a>dom理解</h1><h1 id=\"父子组件传值\"><a href=\"#父子组件传值\" class=\"headerlink\" title=\"父子组件传值\"></a>父子组件传值</h1><ul>\n<li>父组件通过属性的形式向子组件传递参数，子组件通过props的形式来* 接收子组件的参数</li>\n<li>子组件向父组件通信，子组件要调用父组件传递过来的方法</li>\n</ul>\n<h1 id=\"浏览器渲染\"><a href=\"#浏览器渲染\" class=\"headerlink\" title=\"浏览器渲染\"></a>浏览器渲染</h1><h1 id=\"jsx-语句\"><a href=\"#jsx-语句\" class=\"headerlink\" title=\"jsx 语句\"></a>jsx 语句</h1><p>只能用js表达式，不能使用js 语句</p>\n<blockquote>\n<p> JSX 语法里的并不是真正的 HTML，而是虚拟 DOM，即 JS 代码，不信可看转译后的结果</p>\n</blockquote>\n<blockquote>\n<p> 这种把模板直接嵌套在js语句中当表达式就是jsx语法.</p>\n</blockquote>\n<blockquote>\n<p> JSX为我们提供了创建React元素方法</p>\n</blockquote>\n<p>jsx elements必须在一个可以闭合的标签元素中<br>说白了react模板必须有一个父元素，并且仅有一个作为根节点。</p>\n<h2 id=\"jsx中绑定事件\"><a href=\"#jsx中绑定事件\" class=\"headerlink\" title=\"jsx中绑定事件\"></a>jsx中绑定事件</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.handleBtnClick&#125;</span>&gt;</span>add<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"初始化react-creat-app-和以前有一些不同\"><a href=\"#初始化react-creat-app-和以前有一些不同\" class=\"headerlink\" title=\"初始化react-creat-app 和以前有一些不同\"></a>初始化react-creat-app 和以前有一些不同</h1><p>一种是解释型的函数来定义，一种使用es6的class来继承。函数型的定义比较简单，语法清晰，但是不能使用state和lifecycle（或者说如果使用的话需要hook）。class继承的方式相对复杂，但可以拥有state和life</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 解释型的函数来定义</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">App</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (hello, i am veigar);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> App;cycle</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用es6的class来继承</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"type\">React</span>, &#123;<span class=\"type\">Component</span>&#125; from <span class=\"symbol\">'reac</span>t';</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span></span>&#123;</span><br><span class=\"line\">  render()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>(hello, i am veigar)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export <span class=\"keyword\">default</span> <span class=\"type\">App</span>;</span><br></pre></td></tr></table></figure>","site":{"data":{"projects":[{"name":"NJUPT_Esport","url":"https://github.com/Davont/NJUPT_Esport","desc":"一个为在校学生提供体育相关成绩查询、校新闻推送、学生反馈评论的web app"},{"name":"Furniture_Management_System","url":"https://github.com/Davont/Furniture_Management_System","desc":"一个提供家具购买、下单、用户管理、订单管理、商户管理等功能的家具订单CMS系统"},{"name":"weapp-WQPS","url":"https://github.com/Davont/weapp-WQPS","desc":"一个展示型的微信小程序，旨在提供基于卫星传感网的水质监测系统的对外展示平台。"},{"name":"yiban_registration","url":"https://github.com/Davont/yiban_registration","desc":"一个面向社团提供新生加入社团的线上报名表"}]}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>实习公司的技术栈是React-Native，得学React，再加上React本身非常流行。我记得之前去谷歌开发者大会上，有人问了一个问题，React作为前端框架，它的优势到底是什么？演讲的大牛回答：生态。好的生态，才会有未来持续变好的可能，最近几年无数的例子证明，没有优秀的生态环境，没有频繁的维护跟新，没有友好的交流社区，历史终究会把你遗忘。</p>\n<h2 id=\"笔记初衷\"><a href=\"#笔记初衷\" class=\"headerlink\" title=\"笔记初衷\"></a>笔记初衷</h2><p><strong>初学，不求深刻，只求简洁。一切以接地气，大白话为主。</strong></p>\n<h1 id=\"笔记知识点\"><a href=\"#笔记知识点\" class=\"headerlink\" title=\"笔记知识点\"></a>笔记知识点</h1><h2 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h2><p>组件就是网页上的一部分，网页整体上就是一个大组件，大组件可以继续拆分，某种意义上，HTML标签也可以称得上是组件。<br>React中，大写字母都是组件。<br>一开始引入React</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>；</span><br><span class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span>;</span><br></pre></td></tr></table></figure>\n<p>引入它的意义是让我们能够理解下面的语法（大写字母的定义之类的）<br>ReactDOM 是可以让组件挂载到Dom节点上。<br>（意思是你虽然能在网页上看到元素，但在html源代码里看不到相关元素,这是因为react是挂载dom上去的）</p>\n<h2 id=\"react-dom\"><a href=\"#react-dom\" class=\"headerlink\" title=\"react dom\"></a>react dom</h2><p>react 不用直接操作dom，而是操作数据，和Vue一样，都是MVVM框架。</p>\n<figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">constructor</span><span class=\"params\">(props)</span><span class=\"comment\">&#123;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">    super(props);</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">    this.state=&#123;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">        list:[</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">            'learn react',</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">            'learn english'</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">        ]</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"function\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>解释：todolist 这个类刚被创建的时候，construction 会被执行，super进行初始化，不用管，stats可以存许多数据</p>\n<h3 id=\"this-state\"><a href=\"#this-state\" class=\"headerlink\" title=\"this.state\"></a>this.state</h3><p>你想要改变数据的时候，不要直接就调用this.state 改变数据，而是用this.setState({<br>    list:[…this.state.list,’hello’]<br>})</p>\n<p>如果要操作state的数据，最好不要直接更改state上的数据，而是先拷贝一个state，然后再更改。</p>\n<h3 id=\"react-里也有key-值-且要求不一样\"><a href=\"#react-里也有key-值-且要求不一样\" class=\"headerlink\" title=\"react 里也有key 值 且要求不一样\"></a>react 里也有key 值 且要求不一样</h3><h3 id=\"在react中，如果你的键值和名字一样，可以直接写一个即可，如：\"><a href=\"#在react中，如果你的键值和名字一样，可以直接写一个即可，如：\" class=\"headerlink\" title=\"在react中，如果你的键值和名字一样，可以直接写一个即可，如：\"></a>在react中，如果你的键值和名字一样，可以直接写一个即可，如：</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">this</span><span class=\"selector-class\">.setState</span>(&#123;</span><br><span class=\"line\">  <span class=\"attribute\">list</span>: list</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>可以修改为下面这个</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.setState(&#123; <span class=\"built_in\">list</span> &#125;);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"dom理解\"><a href=\"#dom理解\" class=\"headerlink\" title=\"dom理解\"></a>dom理解</h1><h1 id=\"父子组件传值\"><a href=\"#父子组件传值\" class=\"headerlink\" title=\"父子组件传值\"></a>父子组件传值</h1><ul>\n<li>父组件通过属性的形式向子组件传递参数，子组件通过props的形式来* 接收子组件的参数</li>\n<li>子组件向父组件通信，子组件要调用父组件传递过来的方法</li>\n</ul>\n<h1 id=\"浏览器渲染\"><a href=\"#浏览器渲染\" class=\"headerlink\" title=\"浏览器渲染\"></a>浏览器渲染</h1><h1 id=\"jsx-语句\"><a href=\"#jsx-语句\" class=\"headerlink\" title=\"jsx 语句\"></a>jsx 语句</h1><p>只能用js表达式，不能使用js 语句</p>\n<blockquote>\n<p> JSX 语法里的并不是真正的 HTML，而是虚拟 DOM，即 JS 代码，不信可看转译后的结果</p>\n</blockquote>\n<blockquote>\n<p> 这种把模板直接嵌套在js语句中当表达式就是jsx语法.</p>\n</blockquote>\n<blockquote>\n<p> JSX为我们提供了创建React元素方法</p>\n</blockquote>\n<p>jsx elements必须在一个可以闭合的标签元素中<br>说白了react模板必须有一个父元素，并且仅有一个作为根节点。</p>\n<h2 id=\"jsx中绑定事件\"><a href=\"#jsx中绑定事件\" class=\"headerlink\" title=\"jsx中绑定事件\"></a>jsx中绑定事件</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.handleBtnClick&#125;</span>&gt;</span>add<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"初始化react-creat-app-和以前有一些不同\"><a href=\"#初始化react-creat-app-和以前有一些不同\" class=\"headerlink\" title=\"初始化react-creat-app 和以前有一些不同\"></a>初始化react-creat-app 和以前有一些不同</h1><p>一种是解释型的函数来定义，一种使用es6的class来继承。函数型的定义比较简单，语法清晰，但是不能使用state和lifecycle（或者说如果使用的话需要hook）。class继承的方式相对复杂，但可以拥有state和life</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 解释型的函数来定义</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">App</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (hello, i am veigar);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> App;cycle</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用es6的class来继承</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"type\">React</span>, &#123;<span class=\"type\">Component</span>&#125; from <span class=\"symbol\">'reac</span>t';</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span></span>&#123;</span><br><span class=\"line\">  render()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>(hello, i am veigar)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export <span class=\"keyword\">default</span> <span class=\"type\">App</span>;</span><br></pre></td></tr></table></figure>"},{"title":"Markdown的基本用法","date":"2017-09-02T13:47:39.000Z","_content":"这个时候，我就特别想买个MAC，因为有个特别好看的Markdown编辑器：Mou\n\n![markdown](http://pic.davontt.com/picGo/markdown.png)\n<center style=\"color:#AAAAAA\">Mou</center>\n\n> Markdown 是一种轻量级的「标记语言」，它的优点很多，目前也被越来越多的写作爱好者，撰稿者广泛使用。看到这里请不要被「标记」、「语言」所迷惑，Markdown 的语法十分简单。常用的标记符号也不超过十个，这种相对于更为复杂的 HTML 标记语言来说，Markdown 可谓是十分轻量的，学习成本也不需要太多，且一旦熟悉这种语法规则，会有一劳永逸的效果。\n> ————摘自简书\n\n**简单的说就是如果你要写文章而且要发表到网站的话，那势必要注重排版（谁都不想看你的文章就像看小说一样密密麻麻），而排版这个东西是很麻烦的，这个时候就用到了Markdown，只需加几个符号，轻松出现分割线，标题，加粗，超链接等。**（你看，我现在就把前面那句话加粗了）\n\n### Markdown 官方文档\n\n[创始人写的文档](https://daringfireball.net/projects/markdown/syntax)\n\n[中文文档](http://wowubuntu.com/markdown/)\n\n不过写了官方文档好像你们就会仔细看似的\n\n### Markdown 优点\n\n*   写作中添加简单符号即完成排版，所见即所得。让你专注于文字而不是排版。\n*   格式转换方便，Markdown 的文本你可以轻松转换为 html、pdf等。\n*   可以保存称纯文本\n*   轻松的导出 HTML、PDF 和本身的 .md 文件。\n\n（其实我觉得是这个排版很漂亮，很舒服）\n\n### 基本操作规则\n\n其实对于写写博客文章的我来说，记住几个就够用了\n\n### 标题字体大小\n\n![markdown](http://pic.davontt.com/picGo/markdown-title.png)\n<center style=\"color:#AAAAAA\">原谅我用MAC的图</center>\n\n\n标题是每篇文章都需要也是最常用的格式，在 Markdown 中，如果一段文字被定义为标题，只要在这段文字前加 # 号即可。\n\n`# 一级标题`\n\n`## 二级标题`\n\n`### 三级标题`\n\n以此类推，总共六级标题，建议在井号后加一个空格，这是最标准的 Markdown 语法。\n\n### 列表\n\n![markdown](http://pic.davontt.com/picGo/markdown-list.png)\n<center style=\"color:#AAAAAA\">有序列表和无序列表</center>\n\n主要有两个，就是有序列表与无序列表的区别，在 Markdown 下，列表的显示只需要在文字前加上 - 或* 即可变为无序列表，有序列表则直接在文字前加 1. 2. 3. 符号要和文字之间加上一个字符的空格。\n\n### 引用\n\n![markdown](http://pic.davontt.com/picGo/markdown-q.png)\n<center style=\"color:#AAAAAA\">引用</center>\n\n如果你需要引用一小段别处的句子，那么就要用引用的格式。有的时候最好空一个格\n\n> 例如这样\n\n### 图片与链接\n\n![markdown](http://pic.davontt.com/picGo/markdwon-img.png)\n<center style=\"color:#AAAAAA\">图片与链接</center>\n\n插入链接与插入图片的语法很像，区别在一个!号\n这里需要图片地址，那么图片地址怎么获得呢？\n其实获得图片地址有很多方法，比如：\n\n*   在浏览器上在图片处右键有选项\n\n    > 在浏览器上在图片处右键有选项\n\n*   如果是你的本地图片呢？怎么知道它的地址呢 ？这时候就用到图床啦，我比较推荐七牛云图床，就是那个名字叫“极简图床”的Chrome插件，很方便\n\n\n### 粗体与斜体\n\nMarkdown 的粗体和斜体也非常简单\n\n用两个 ` 包含一段文本就是粗体的语法\n\n用一个 ` 包含一段文本就是斜体的语法。\n\n例如：这里是粗体 这里是斜体\n\n### 代码框\n\n对于写一些技术贴的时候，代码框总是必不可少的\n在 Markdown 下实现也非常简单，只需要用两个 `\n\n把中间的代码包裹起来，如 code。图例：\n\n![markdown](http://pic.davontt.com/picGo/markdown-code.png)\n<center style=\"color:#AAAAAA\">代码框</center>\n\n使用 `tab` 键即可缩进。\n\n### 分割线\n\n分割线的语法只需要另起一行，连续输入三个星号 *** 即可。\n","source":"_posts/markdown-instruction.md","raw":"---\ntitle: Markdown的基本用法\ndate: 2017-09-02 21:47:39\ntags: markdown\n---\n这个时候，我就特别想买个MAC，因为有个特别好看的Markdown编辑器：Mou\n\n![markdown](http://pic.davontt.com/picGo/markdown.png)\n<center style=\"color:#AAAAAA\">Mou</center>\n\n> Markdown 是一种轻量级的「标记语言」，它的优点很多，目前也被越来越多的写作爱好者，撰稿者广泛使用。看到这里请不要被「标记」、「语言」所迷惑，Markdown 的语法十分简单。常用的标记符号也不超过十个，这种相对于更为复杂的 HTML 标记语言来说，Markdown 可谓是十分轻量的，学习成本也不需要太多，且一旦熟悉这种语法规则，会有一劳永逸的效果。\n> ————摘自简书\n\n**简单的说就是如果你要写文章而且要发表到网站的话，那势必要注重排版（谁都不想看你的文章就像看小说一样密密麻麻），而排版这个东西是很麻烦的，这个时候就用到了Markdown，只需加几个符号，轻松出现分割线，标题，加粗，超链接等。**（你看，我现在就把前面那句话加粗了）\n\n### Markdown 官方文档\n\n[创始人写的文档](https://daringfireball.net/projects/markdown/syntax)\n\n[中文文档](http://wowubuntu.com/markdown/)\n\n不过写了官方文档好像你们就会仔细看似的\n\n### Markdown 优点\n\n*   写作中添加简单符号即完成排版，所见即所得。让你专注于文字而不是排版。\n*   格式转换方便，Markdown 的文本你可以轻松转换为 html、pdf等。\n*   可以保存称纯文本\n*   轻松的导出 HTML、PDF 和本身的 .md 文件。\n\n（其实我觉得是这个排版很漂亮，很舒服）\n\n### 基本操作规则\n\n其实对于写写博客文章的我来说，记住几个就够用了\n\n### 标题字体大小\n\n![markdown](http://pic.davontt.com/picGo/markdown-title.png)\n<center style=\"color:#AAAAAA\">原谅我用MAC的图</center>\n\n\n标题是每篇文章都需要也是最常用的格式，在 Markdown 中，如果一段文字被定义为标题，只要在这段文字前加 # 号即可。\n\n`# 一级标题`\n\n`## 二级标题`\n\n`### 三级标题`\n\n以此类推，总共六级标题，建议在井号后加一个空格，这是最标准的 Markdown 语法。\n\n### 列表\n\n![markdown](http://pic.davontt.com/picGo/markdown-list.png)\n<center style=\"color:#AAAAAA\">有序列表和无序列表</center>\n\n主要有两个，就是有序列表与无序列表的区别，在 Markdown 下，列表的显示只需要在文字前加上 - 或* 即可变为无序列表，有序列表则直接在文字前加 1. 2. 3. 符号要和文字之间加上一个字符的空格。\n\n### 引用\n\n![markdown](http://pic.davontt.com/picGo/markdown-q.png)\n<center style=\"color:#AAAAAA\">引用</center>\n\n如果你需要引用一小段别处的句子，那么就要用引用的格式。有的时候最好空一个格\n\n> 例如这样\n\n### 图片与链接\n\n![markdown](http://pic.davontt.com/picGo/markdwon-img.png)\n<center style=\"color:#AAAAAA\">图片与链接</center>\n\n插入链接与插入图片的语法很像，区别在一个!号\n这里需要图片地址，那么图片地址怎么获得呢？\n其实获得图片地址有很多方法，比如：\n\n*   在浏览器上在图片处右键有选项\n\n    > 在浏览器上在图片处右键有选项\n\n*   如果是你的本地图片呢？怎么知道它的地址呢 ？这时候就用到图床啦，我比较推荐七牛云图床，就是那个名字叫“极简图床”的Chrome插件，很方便\n\n\n### 粗体与斜体\n\nMarkdown 的粗体和斜体也非常简单\n\n用两个 ` 包含一段文本就是粗体的语法\n\n用一个 ` 包含一段文本就是斜体的语法。\n\n例如：这里是粗体 这里是斜体\n\n### 代码框\n\n对于写一些技术贴的时候，代码框总是必不可少的\n在 Markdown 下实现也非常简单，只需要用两个 `\n\n把中间的代码包裹起来，如 code。图例：\n\n![markdown](http://pic.davontt.com/picGo/markdown-code.png)\n<center style=\"color:#AAAAAA\">代码框</center>\n\n使用 `tab` 键即可缩进。\n\n### 分割线\n\n分割线的语法只需要另起一行，连续输入三个星号 *** 即可。\n","slug":"markdown-instruction","published":1,"updated":"2020-12-20T16:36:55.009Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrr9sojo000r1l5x3wi20dzm","content":"<p>这个时候，我就特别想买个MAC，因为有个特别好看的Markdown编辑器：Mou</p>\n<p><img src=\"http://pic.davontt.com/picGo/markdown.png\" alt=\"markdown\"></p>\n<center style=\"color:#AAAAAA\">Mou</center>\n\n<blockquote>\n<p>Markdown 是一种轻量级的「标记语言」，它的优点很多，目前也被越来越多的写作爱好者，撰稿者广泛使用。看到这里请不要被「标记」、「语言」所迷惑，Markdown 的语法十分简单。常用的标记符号也不超过十个，这种相对于更为复杂的 HTML 标记语言来说，Markdown 可谓是十分轻量的，学习成本也不需要太多，且一旦熟悉这种语法规则，会有一劳永逸的效果。<br>————摘自简书</p>\n</blockquote>\n<p><strong>简单的说就是如果你要写文章而且要发表到网站的话，那势必要注重排版（谁都不想看你的文章就像看小说一样密密麻麻），而排版这个东西是很麻烦的，这个时候就用到了Markdown，只需加几个符号，轻松出现分割线，标题，加粗，超链接等。</strong>（你看，我现在就把前面那句话加粗了）</p>\n<h3 id=\"Markdown-官方文档\"><a href=\"#Markdown-官方文档\" class=\"headerlink\" title=\"Markdown 官方文档\"></a>Markdown 官方文档</h3><p><a href=\"https://daringfireball.net/projects/markdown/syntax\" target=\"_blank\" rel=\"noopener\">创始人写的文档</a></p>\n<p><a href=\"http://wowubuntu.com/markdown/\" target=\"_blank\" rel=\"noopener\">中文文档</a></p>\n<p>不过写了官方文档好像你们就会仔细看似的</p>\n<h3 id=\"Markdown-优点\"><a href=\"#Markdown-优点\" class=\"headerlink\" title=\"Markdown 优点\"></a>Markdown 优点</h3><ul>\n<li>写作中添加简单符号即完成排版，所见即所得。让你专注于文字而不是排版。</li>\n<li>格式转换方便，Markdown 的文本你可以轻松转换为 html、pdf等。</li>\n<li>可以保存称纯文本</li>\n<li>轻松的导出 HTML、PDF 和本身的 .md 文件。</li>\n</ul>\n<p>（其实我觉得是这个排版很漂亮，很舒服）</p>\n<h3 id=\"基本操作规则\"><a href=\"#基本操作规则\" class=\"headerlink\" title=\"基本操作规则\"></a>基本操作规则</h3><p>其实对于写写博客文章的我来说，记住几个就够用了</p>\n<h3 id=\"标题字体大小\"><a href=\"#标题字体大小\" class=\"headerlink\" title=\"标题字体大小\"></a>标题字体大小</h3><p><img src=\"http://pic.davontt.com/picGo/markdown-title.png\" alt=\"markdown\"></p>\n<center style=\"color:#AAAAAA\">原谅我用MAC的图</center>\n\n\n<p>标题是每篇文章都需要也是最常用的格式，在 Markdown 中，如果一段文字被定义为标题，只要在这段文字前加 # 号即可。</p>\n<p><code># 一级标题</code></p>\n<p><code>## 二级标题</code></p>\n<p><code>### 三级标题</code></p>\n<p>以此类推，总共六级标题，建议在井号后加一个空格，这是最标准的 Markdown 语法。</p>\n<h3 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h3><p><img src=\"http://pic.davontt.com/picGo/markdown-list.png\" alt=\"markdown\"></p>\n<center style=\"color:#AAAAAA\">有序列表和无序列表</center>\n\n<p>主要有两个，就是有序列表与无序列表的区别，在 Markdown 下，列表的显示只需要在文字前加上 - 或* 即可变为无序列表，有序列表则直接在文字前加 1. 2. 3. 符号要和文字之间加上一个字符的空格。</p>\n<h3 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h3><p><img src=\"http://pic.davontt.com/picGo/markdown-q.png\" alt=\"markdown\"></p>\n<center style=\"color:#AAAAAA\">引用</center>\n\n<p>如果你需要引用一小段别处的句子，那么就要用引用的格式。有的时候最好空一个格</p>\n<blockquote>\n<p>例如这样</p>\n</blockquote>\n<h3 id=\"图片与链接\"><a href=\"#图片与链接\" class=\"headerlink\" title=\"图片与链接\"></a>图片与链接</h3><p><img src=\"http://pic.davontt.com/picGo/markdwon-img.png\" alt=\"markdown\"></p>\n<center style=\"color:#AAAAAA\">图片与链接</center>\n\n<p>插入链接与插入图片的语法很像，区别在一个!号<br>这里需要图片地址，那么图片地址怎么获得呢？<br>其实获得图片地址有很多方法，比如：</p>\n<ul>\n<li><p>在浏览器上在图片处右键有选项</p>\n<blockquote>\n<p>在浏览器上在图片处右键有选项</p>\n</blockquote>\n</li>\n<li><p>如果是你的本地图片呢？怎么知道它的地址呢 ？这时候就用到图床啦，我比较推荐七牛云图床，就是那个名字叫“极简图床”的Chrome插件，很方便</p>\n</li>\n</ul>\n<h3 id=\"粗体与斜体\"><a href=\"#粗体与斜体\" class=\"headerlink\" title=\"粗体与斜体\"></a>粗体与斜体</h3><p>Markdown 的粗体和斜体也非常简单</p>\n<p>用两个 ` 包含一段文本就是粗体的语法</p>\n<p>用一个 ` 包含一段文本就是斜体的语法。</p>\n<p>例如：这里是粗体 这里是斜体</p>\n<h3 id=\"代码框\"><a href=\"#代码框\" class=\"headerlink\" title=\"代码框\"></a>代码框</h3><p>对于写一些技术贴的时候，代码框总是必不可少的<br>在 Markdown 下实现也非常简单，只需要用两个 `</p>\n<p>把中间的代码包裹起来，如 code。图例：</p>\n<p><img src=\"http://pic.davontt.com/picGo/markdown-code.png\" alt=\"markdown\"></p>\n<center style=\"color:#AAAAAA\">代码框</center>\n\n<p>使用 <code>tab</code> 键即可缩进。</p>\n<h3 id=\"分割线\"><a href=\"#分割线\" class=\"headerlink\" title=\"分割线\"></a>分割线</h3><p>分割线的语法只需要另起一行，连续输入三个星号 *** 即可。</p>\n","site":{"data":{"projects":[{"name":"NJUPT_Esport","url":"https://github.com/Davont/NJUPT_Esport","desc":"一个为在校学生提供体育相关成绩查询、校新闻推送、学生反馈评论的web app"},{"name":"Furniture_Management_System","url":"https://github.com/Davont/Furniture_Management_System","desc":"一个提供家具购买、下单、用户管理、订单管理、商户管理等功能的家具订单CMS系统"},{"name":"weapp-WQPS","url":"https://github.com/Davont/weapp-WQPS","desc":"一个展示型的微信小程序，旨在提供基于卫星传感网的水质监测系统的对外展示平台。"},{"name":"yiban_registration","url":"https://github.com/Davont/yiban_registration","desc":"一个面向社团提供新生加入社团的线上报名表"}]}},"excerpt":"","more":"<p>这个时候，我就特别想买个MAC，因为有个特别好看的Markdown编辑器：Mou</p>\n<p><img src=\"http://pic.davontt.com/picGo/markdown.png\" alt=\"markdown\"></p>\n<center style=\"color:#AAAAAA\">Mou</center>\n\n<blockquote>\n<p>Markdown 是一种轻量级的「标记语言」，它的优点很多，目前也被越来越多的写作爱好者，撰稿者广泛使用。看到这里请不要被「标记」、「语言」所迷惑，Markdown 的语法十分简单。常用的标记符号也不超过十个，这种相对于更为复杂的 HTML 标记语言来说，Markdown 可谓是十分轻量的，学习成本也不需要太多，且一旦熟悉这种语法规则，会有一劳永逸的效果。<br>————摘自简书</p>\n</blockquote>\n<p><strong>简单的说就是如果你要写文章而且要发表到网站的话，那势必要注重排版（谁都不想看你的文章就像看小说一样密密麻麻），而排版这个东西是很麻烦的，这个时候就用到了Markdown，只需加几个符号，轻松出现分割线，标题，加粗，超链接等。</strong>（你看，我现在就把前面那句话加粗了）</p>\n<h3 id=\"Markdown-官方文档\"><a href=\"#Markdown-官方文档\" class=\"headerlink\" title=\"Markdown 官方文档\"></a>Markdown 官方文档</h3><p><a href=\"https://daringfireball.net/projects/markdown/syntax\" target=\"_blank\" rel=\"noopener\">创始人写的文档</a></p>\n<p><a href=\"http://wowubuntu.com/markdown/\" target=\"_blank\" rel=\"noopener\">中文文档</a></p>\n<p>不过写了官方文档好像你们就会仔细看似的</p>\n<h3 id=\"Markdown-优点\"><a href=\"#Markdown-优点\" class=\"headerlink\" title=\"Markdown 优点\"></a>Markdown 优点</h3><ul>\n<li>写作中添加简单符号即完成排版，所见即所得。让你专注于文字而不是排版。</li>\n<li>格式转换方便，Markdown 的文本你可以轻松转换为 html、pdf等。</li>\n<li>可以保存称纯文本</li>\n<li>轻松的导出 HTML、PDF 和本身的 .md 文件。</li>\n</ul>\n<p>（其实我觉得是这个排版很漂亮，很舒服）</p>\n<h3 id=\"基本操作规则\"><a href=\"#基本操作规则\" class=\"headerlink\" title=\"基本操作规则\"></a>基本操作规则</h3><p>其实对于写写博客文章的我来说，记住几个就够用了</p>\n<h3 id=\"标题字体大小\"><a href=\"#标题字体大小\" class=\"headerlink\" title=\"标题字体大小\"></a>标题字体大小</h3><p><img src=\"http://pic.davontt.com/picGo/markdown-title.png\" alt=\"markdown\"></p>\n<center style=\"color:#AAAAAA\">原谅我用MAC的图</center>\n\n\n<p>标题是每篇文章都需要也是最常用的格式，在 Markdown 中，如果一段文字被定义为标题，只要在这段文字前加 # 号即可。</p>\n<p><code># 一级标题</code></p>\n<p><code>## 二级标题</code></p>\n<p><code>### 三级标题</code></p>\n<p>以此类推，总共六级标题，建议在井号后加一个空格，这是最标准的 Markdown 语法。</p>\n<h3 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h3><p><img src=\"http://pic.davontt.com/picGo/markdown-list.png\" alt=\"markdown\"></p>\n<center style=\"color:#AAAAAA\">有序列表和无序列表</center>\n\n<p>主要有两个，就是有序列表与无序列表的区别，在 Markdown 下，列表的显示只需要在文字前加上 - 或* 即可变为无序列表，有序列表则直接在文字前加 1. 2. 3. 符号要和文字之间加上一个字符的空格。</p>\n<h3 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h3><p><img src=\"http://pic.davontt.com/picGo/markdown-q.png\" alt=\"markdown\"></p>\n<center style=\"color:#AAAAAA\">引用</center>\n\n<p>如果你需要引用一小段别处的句子，那么就要用引用的格式。有的时候最好空一个格</p>\n<blockquote>\n<p>例如这样</p>\n</blockquote>\n<h3 id=\"图片与链接\"><a href=\"#图片与链接\" class=\"headerlink\" title=\"图片与链接\"></a>图片与链接</h3><p><img src=\"http://pic.davontt.com/picGo/markdwon-img.png\" alt=\"markdown\"></p>\n<center style=\"color:#AAAAAA\">图片与链接</center>\n\n<p>插入链接与插入图片的语法很像，区别在一个!号<br>这里需要图片地址，那么图片地址怎么获得呢？<br>其实获得图片地址有很多方法，比如：</p>\n<ul>\n<li><p>在浏览器上在图片处右键有选项</p>\n<blockquote>\n<p>在浏览器上在图片处右键有选项</p>\n</blockquote>\n</li>\n<li><p>如果是你的本地图片呢？怎么知道它的地址呢 ？这时候就用到图床啦，我比较推荐七牛云图床，就是那个名字叫“极简图床”的Chrome插件，很方便</p>\n</li>\n</ul>\n<h3 id=\"粗体与斜体\"><a href=\"#粗体与斜体\" class=\"headerlink\" title=\"粗体与斜体\"></a>粗体与斜体</h3><p>Markdown 的粗体和斜体也非常简单</p>\n<p>用两个 ` 包含一段文本就是粗体的语法</p>\n<p>用一个 ` 包含一段文本就是斜体的语法。</p>\n<p>例如：这里是粗体 这里是斜体</p>\n<h3 id=\"代码框\"><a href=\"#代码框\" class=\"headerlink\" title=\"代码框\"></a>代码框</h3><p>对于写一些技术贴的时候，代码框总是必不可少的<br>在 Markdown 下实现也非常简单，只需要用两个 `</p>\n<p>把中间的代码包裹起来，如 code。图例：</p>\n<p><img src=\"http://pic.davontt.com/picGo/markdown-code.png\" alt=\"markdown\"></p>\n<center style=\"color:#AAAAAA\">代码框</center>\n\n<p>使用 <code>tab</code> 键即可缩进。</p>\n<h3 id=\"分割线\"><a href=\"#分割线\" class=\"headerlink\" title=\"分割线\"></a>分割线</h3><p>分割线的语法只需要另起一行，连续输入三个星号 *** 即可。</p>\n"},{"title":"NPM的基本设置","date":"2018-07-20T01:34:37.000Z","_content":"# 前言\nNPM的一些基本设置及更换一些淘宝源\n# 查看源\n\n```\nnpm config get registry\n\n```\n\n或者\n\n```\nnpm config list\n```\n\n# 修改源\n```\n# 默认源\n\nnpm config set registry https://registry.npmjs.org\n\n# https -> http，这样网速就会好很多\n\nnpm config set registry http://registry.npmjs.org\n\n# 如果还不能下载，就切换成淘宝源\n\nnpm config set registry https://registry.npm.taobao.org\n\n```\n\n# 使用cnpm命令代替npm\n\n```\n// 安装cnpm命令,不会改变npm的源\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\n\n//使用\ncnpm install\n```\n","source":"_posts/npm-setting.md","raw":"---\ntitle: NPM的基本设置\ndate: 2018-07-20 09:34:37\ntags: [npm,node.js]\n---\n# 前言\nNPM的一些基本设置及更换一些淘宝源\n# 查看源\n\n```\nnpm config get registry\n\n```\n\n或者\n\n```\nnpm config list\n```\n\n# 修改源\n```\n# 默认源\n\nnpm config set registry https://registry.npmjs.org\n\n# https -> http，这样网速就会好很多\n\nnpm config set registry http://registry.npmjs.org\n\n# 如果还不能下载，就切换成淘宝源\n\nnpm config set registry https://registry.npm.taobao.org\n\n```\n\n# 使用cnpm命令代替npm\n\n```\n// 安装cnpm命令,不会改变npm的源\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\n\n//使用\ncnpm install\n```\n","slug":"npm-setting","published":1,"updated":"2020-12-20T16:36:55.009Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrr9sojr000t1l5x3fb533y6","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>NPM的一些基本设置及更换一些淘宝源</p>\n<h1 id=\"查看源\"><a href=\"#查看源\" class=\"headerlink\" title=\"查看源\"></a>查看源</h1><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm<span class=\"built_in\"> config </span><span class=\"builtin-name\">get</span> registry</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm<span class=\"built_in\"> config </span>list</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"修改源\"><a href=\"#修改源\" class=\"headerlink\" title=\"修改源\"></a>修改源</h1><figure class=\"highlight tcl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 默认源</span></span><br><span class=\"line\"></span><br><span class=\"line\">npm config <span class=\"keyword\">set</span> <span class=\"keyword\">registry</span> https://<span class=\"keyword\">registry</span>.npmjs.org</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># https -&gt; http，这样网速就会好很多</span></span><br><span class=\"line\"></span><br><span class=\"line\">npm config <span class=\"keyword\">set</span> <span class=\"keyword\">registry</span> <span class=\"keyword\">http</span>://<span class=\"keyword\">registry</span>.npmjs.org</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果还不能下载，就切换成淘宝源</span></span><br><span class=\"line\"></span><br><span class=\"line\">npm config <span class=\"keyword\">set</span> <span class=\"keyword\">registry</span> https://<span class=\"keyword\">registry</span>.npm.taobao.org</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"使用cnpm命令代替npm\"><a href=\"#使用cnpm命令代替npm\" class=\"headerlink\" title=\"使用cnpm命令代替npm\"></a>使用cnpm命令代替npm</h1><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 安装cnpm命令,不会改变npm的源</span></span><br><span class=\"line\">npm install -g cnpm --registry=<span class=\"string\">https:</span><span class=\"comment\">//registry.npm.taobao.org</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用</span></span><br><span class=\"line\">cnpm install</span><br></pre></td></tr></table></figure>\n","site":{"data":{"projects":[{"name":"NJUPT_Esport","url":"https://github.com/Davont/NJUPT_Esport","desc":"一个为在校学生提供体育相关成绩查询、校新闻推送、学生反馈评论的web app"},{"name":"Furniture_Management_System","url":"https://github.com/Davont/Furniture_Management_System","desc":"一个提供家具购买、下单、用户管理、订单管理、商户管理等功能的家具订单CMS系统"},{"name":"weapp-WQPS","url":"https://github.com/Davont/weapp-WQPS","desc":"一个展示型的微信小程序，旨在提供基于卫星传感网的水质监测系统的对外展示平台。"},{"name":"yiban_registration","url":"https://github.com/Davont/yiban_registration","desc":"一个面向社团提供新生加入社团的线上报名表"}]}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>NPM的一些基本设置及更换一些淘宝源</p>\n<h1 id=\"查看源\"><a href=\"#查看源\" class=\"headerlink\" title=\"查看源\"></a>查看源</h1><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm<span class=\"built_in\"> config </span><span class=\"builtin-name\">get</span> registry</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm<span class=\"built_in\"> config </span>list</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"修改源\"><a href=\"#修改源\" class=\"headerlink\" title=\"修改源\"></a>修改源</h1><figure class=\"highlight tcl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 默认源</span></span><br><span class=\"line\"></span><br><span class=\"line\">npm config <span class=\"keyword\">set</span> <span class=\"keyword\">registry</span> https://<span class=\"keyword\">registry</span>.npmjs.org</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># https -&gt; http，这样网速就会好很多</span></span><br><span class=\"line\"></span><br><span class=\"line\">npm config <span class=\"keyword\">set</span> <span class=\"keyword\">registry</span> <span class=\"keyword\">http</span>://<span class=\"keyword\">registry</span>.npmjs.org</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果还不能下载，就切换成淘宝源</span></span><br><span class=\"line\"></span><br><span class=\"line\">npm config <span class=\"keyword\">set</span> <span class=\"keyword\">registry</span> https://<span class=\"keyword\">registry</span>.npm.taobao.org</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"使用cnpm命令代替npm\"><a href=\"#使用cnpm命令代替npm\" class=\"headerlink\" title=\"使用cnpm命令代替npm\"></a>使用cnpm命令代替npm</h1><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 安装cnpm命令,不会改变npm的源</span></span><br><span class=\"line\">npm install -g cnpm --registry=<span class=\"string\">https:</span><span class=\"comment\">//registry.npm.taobao.org</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用</span></span><br><span class=\"line\">cnpm install</span><br></pre></td></tr></table></figure>\n"},{"title":"使用nginx配置SSL证书","date":"2018-05-15T08:34:33.000Z","_content":"# 介绍\n最近在阿里云白嫖了一个ssl证书，这下可以通过https访问我的网站了。\n# 步骤\n## 开放443端口\n443端口是专门供https使用的端口。443端口和80端口区别如下：\n- 80端口：超文本服务器端口，用于网页浏览。服务于：HTTP\n- 443端口：安全服务端口（HTTPS），用于网页浏览端口，能提供加密和通过安全端口传输的另一种 HTTP。服务于：HTTPS\n### 阿里云增加安全组\n如果你用的是阿里云服务器，你不但得用过服务器本身开启，阿里云中还有安全组的设置，得登录它的控制台操作一下。\n![阿里云](http://pic.davontt.com/picGo/nginx1.png)\n<center style=\"color:#AAAAAA\">在控制台上找到“安全组”</center>\n然后点击实例，在实例中添加安全组规则：\n\n![阿里云](http://pic.davontt.com/picGo/nginx2.png)\n<center style=\"color:#AAAAAA\">添加安全组规则</center>\n\n添加443端口，按照途中配置即可：\n\n![阿里云](http://pic.davontt.com/picGo/nginx3.png)\n<center style=\"color:#AAAAAA\">添加443端口</center>\n\n一顿操作后安全组增加完成。\n### 服务器上开放443端口\n*环境：阿里云 centOS 7*\n\n1. 启动httpd服务：\n```\nsystemctl start httpd\n```\n2. 开放443端口：\n```\nfirewall-cmd --zone=public --add-port=443/tcp --permanent\n```\n3. 重新加载防火墙：\n```\nfirewall-cmd --reload\n```\n## 配置nginx\n\n> 本教程是基于centos7 yum安装的nginx，如果有疑问可看我之前写的文章\n\n### 新建文件夹存放ssl证书\ncentOS安装的nginx 默认安装在** /etc/nginx/ **目录下。\n```\ncd /etc/nginx\nmkdir cert\n```\n![nginx](http://pic.davontt.com/picGo/nginx4.png)\n<center style=\"color:#AAAAAA\">在cert文件夹中添加两个ssl相关文件</center>\n\n### 修改nginx 配置\n一般centOS7 用yum安装的nginx 的配置文件是 nginx.conf，打开它会看到默认配置：\n```\nvi nginx.conf\n```\n```\n# For more information on configuration, see:\n#   * Official English Documentation: http://nginx.org/en/docs/\n#   * Official Russian Documentation: http://nginx.org/ru/docs/\n \nuser nginx;\nworker_processes auto;\nerror_log /var/log/nginx/error.log;\npid /run/nginx.pid;\n \n# Load dynamic modules. See /usr/share/nginx/README.dynamic.\ninclude /usr/share/nginx/modules/*.conf;\n \nevents {\n    worker_connections 1024;\n}\n \nhttp {\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n \n    access_log  /var/log/nginx/access.log  main;\n \n    sendfile            on;\n    tcp_nopush          on;\n    tcp_nodelay         on;\n    keepalive_timeout   65;\n    types_hash_max_size 2048;\n    autoindex on; # 显示目录\n    autoindex_exact_size on; # 显示文件大小\n    autoindex_localtime on; # 显示文件时间\n \n    include             /etc/nginx/mime.types;\n    default_type        application/octet-stream;\n \n    # Load modular configuration files from the /etc/nginx/conf.d directory.\n    # See http://nginx.org/en/docs/ngx_core_module.html#include\n    # for more information.\n    include /etc/nginx/conf.d/*.conf;\n \n    #反响代理server 配置，可用于负载均衡\n    upstream file {\n    least_conn;\n    server 192.168.5.222;\n    }\n \n    server {\n        listen       80 default_server;\n        listen       [::]:80 default_server;\n        server_name  _;\n        root         /usr/share/nginx/html;\n \n        # Load configuration files for the default server block.\n        include /etc/nginx/default.d/*.conf;\n \n        location / {\n        #proxy_pass http://192.168.5.222;\n        }\n \n        error_page 404 /nginx/404.html;\n            location = /nginx/40x.html {\n        }\n \n        error_page 500 502 503 504 /nginx/50x.html;\n            location = /nginx/50x.html {\n        }\n    }\n    # 反向代理server\n    server {\n        listen 9999;\n        server_name _;\n        location / {\n            proxy_pass http://file;\n        }  \n    }\n \n# Settings for a TLS enabled server.\n#\n#    server {\n#        listen       443 ssl http2 default_server;\n#        listen       [::]:443 ssl http2 default_server;\n#        server_name  _;\n#        root         /usr/share/nginx/html;\n#\n#        ssl_certificate \"/etc/pki/nginx/server.crt\";\n#        ssl_certificate_key \"/etc/pki/nginx/private/server.key\";\n#        ssl_session_cache shared:SSL:1m;\n#        ssl_session_timeout  10m;\n#        ssl_ciphers HIGH:!aNULL:!MD5;\n#        ssl_prefer_server_ciphers on;\n#\n#        # Load configuration files for the default server block.\n#        include /etc/nginx/default.d/*.conf;\n#\n#        location / {\n#        }\n#\n#        error_page 404 /404.html;\n#            location = /40x.html {\n#        }\n#\n#        error_page 500 502 503 504 /50x.html;\n#            location = /50x.html {\n#        }\n#    }\n \n}\n```\n\n将“**Settings for a TLS enabled server.**”下面的注释消掉，修改几个重要参数即可：\n\n```\n#Settings for a TLS enabled server.\nserver {\n        listen       443 ssl;\n        ssl on;\n        server_name  www.davontt.com;#你的域名\n        root         ***; #你的网站主目录 绝对地址\n\n        ssl_certificate \"./cert/www.davontt.com.pem\";#你的ssl证书地址（注意后缀）\n        ssl_certificate_key \"./cert/www.davontt.com.key\";#同上你的ssl证书地址（注意后缀）\n        ssl_session_cache shared:SSL:1m;\n        ssl_session_timeout  10m;\n        ssl_ciphers HIGH:!aNULL:!MD5;\n        ssl_prefer_server_ciphers on;\n\n        # Load configuration files for the default server block.\n        include /etc/nginx/default.d/*.conf;\n\n        location / {\n              root ****;#你的网站主目录 绝对地址\n     \t      index index.html index.htm;\n        }\n\n        error_page 404 /404.html;\n            location = /40x.html {\n        }\n\n        error_page 500 502 503 504 /50x.html;\n            location = /50x.html {\n        }\n    }\n```\n### 重新启动nginx服务\n```\nsystemctl restart nginx\n```\n完成，打开浏览器输入https://+你的网址  即可。\n\n\n\n\n\n","source":"_posts/nginx-https.md","raw":"---\ntitle: 使用nginx配置SSL证书\ndate: 2018-05-15 16:34:33\ntags: [Nginx,ssl,https,linux]\n---\n# 介绍\n最近在阿里云白嫖了一个ssl证书，这下可以通过https访问我的网站了。\n# 步骤\n## 开放443端口\n443端口是专门供https使用的端口。443端口和80端口区别如下：\n- 80端口：超文本服务器端口，用于网页浏览。服务于：HTTP\n- 443端口：安全服务端口（HTTPS），用于网页浏览端口，能提供加密和通过安全端口传输的另一种 HTTP。服务于：HTTPS\n### 阿里云增加安全组\n如果你用的是阿里云服务器，你不但得用过服务器本身开启，阿里云中还有安全组的设置，得登录它的控制台操作一下。\n![阿里云](http://pic.davontt.com/picGo/nginx1.png)\n<center style=\"color:#AAAAAA\">在控制台上找到“安全组”</center>\n然后点击实例，在实例中添加安全组规则：\n\n![阿里云](http://pic.davontt.com/picGo/nginx2.png)\n<center style=\"color:#AAAAAA\">添加安全组规则</center>\n\n添加443端口，按照途中配置即可：\n\n![阿里云](http://pic.davontt.com/picGo/nginx3.png)\n<center style=\"color:#AAAAAA\">添加443端口</center>\n\n一顿操作后安全组增加完成。\n### 服务器上开放443端口\n*环境：阿里云 centOS 7*\n\n1. 启动httpd服务：\n```\nsystemctl start httpd\n```\n2. 开放443端口：\n```\nfirewall-cmd --zone=public --add-port=443/tcp --permanent\n```\n3. 重新加载防火墙：\n```\nfirewall-cmd --reload\n```\n## 配置nginx\n\n> 本教程是基于centos7 yum安装的nginx，如果有疑问可看我之前写的文章\n\n### 新建文件夹存放ssl证书\ncentOS安装的nginx 默认安装在** /etc/nginx/ **目录下。\n```\ncd /etc/nginx\nmkdir cert\n```\n![nginx](http://pic.davontt.com/picGo/nginx4.png)\n<center style=\"color:#AAAAAA\">在cert文件夹中添加两个ssl相关文件</center>\n\n### 修改nginx 配置\n一般centOS7 用yum安装的nginx 的配置文件是 nginx.conf，打开它会看到默认配置：\n```\nvi nginx.conf\n```\n```\n# For more information on configuration, see:\n#   * Official English Documentation: http://nginx.org/en/docs/\n#   * Official Russian Documentation: http://nginx.org/ru/docs/\n \nuser nginx;\nworker_processes auto;\nerror_log /var/log/nginx/error.log;\npid /run/nginx.pid;\n \n# Load dynamic modules. See /usr/share/nginx/README.dynamic.\ninclude /usr/share/nginx/modules/*.conf;\n \nevents {\n    worker_connections 1024;\n}\n \nhttp {\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n \n    access_log  /var/log/nginx/access.log  main;\n \n    sendfile            on;\n    tcp_nopush          on;\n    tcp_nodelay         on;\n    keepalive_timeout   65;\n    types_hash_max_size 2048;\n    autoindex on; # 显示目录\n    autoindex_exact_size on; # 显示文件大小\n    autoindex_localtime on; # 显示文件时间\n \n    include             /etc/nginx/mime.types;\n    default_type        application/octet-stream;\n \n    # Load modular configuration files from the /etc/nginx/conf.d directory.\n    # See http://nginx.org/en/docs/ngx_core_module.html#include\n    # for more information.\n    include /etc/nginx/conf.d/*.conf;\n \n    #反响代理server 配置，可用于负载均衡\n    upstream file {\n    least_conn;\n    server 192.168.5.222;\n    }\n \n    server {\n        listen       80 default_server;\n        listen       [::]:80 default_server;\n        server_name  _;\n        root         /usr/share/nginx/html;\n \n        # Load configuration files for the default server block.\n        include /etc/nginx/default.d/*.conf;\n \n        location / {\n        #proxy_pass http://192.168.5.222;\n        }\n \n        error_page 404 /nginx/404.html;\n            location = /nginx/40x.html {\n        }\n \n        error_page 500 502 503 504 /nginx/50x.html;\n            location = /nginx/50x.html {\n        }\n    }\n    # 反向代理server\n    server {\n        listen 9999;\n        server_name _;\n        location / {\n            proxy_pass http://file;\n        }  \n    }\n \n# Settings for a TLS enabled server.\n#\n#    server {\n#        listen       443 ssl http2 default_server;\n#        listen       [::]:443 ssl http2 default_server;\n#        server_name  _;\n#        root         /usr/share/nginx/html;\n#\n#        ssl_certificate \"/etc/pki/nginx/server.crt\";\n#        ssl_certificate_key \"/etc/pki/nginx/private/server.key\";\n#        ssl_session_cache shared:SSL:1m;\n#        ssl_session_timeout  10m;\n#        ssl_ciphers HIGH:!aNULL:!MD5;\n#        ssl_prefer_server_ciphers on;\n#\n#        # Load configuration files for the default server block.\n#        include /etc/nginx/default.d/*.conf;\n#\n#        location / {\n#        }\n#\n#        error_page 404 /404.html;\n#            location = /40x.html {\n#        }\n#\n#        error_page 500 502 503 504 /50x.html;\n#            location = /50x.html {\n#        }\n#    }\n \n}\n```\n\n将“**Settings for a TLS enabled server.**”下面的注释消掉，修改几个重要参数即可：\n\n```\n#Settings for a TLS enabled server.\nserver {\n        listen       443 ssl;\n        ssl on;\n        server_name  www.davontt.com;#你的域名\n        root         ***; #你的网站主目录 绝对地址\n\n        ssl_certificate \"./cert/www.davontt.com.pem\";#你的ssl证书地址（注意后缀）\n        ssl_certificate_key \"./cert/www.davontt.com.key\";#同上你的ssl证书地址（注意后缀）\n        ssl_session_cache shared:SSL:1m;\n        ssl_session_timeout  10m;\n        ssl_ciphers HIGH:!aNULL:!MD5;\n        ssl_prefer_server_ciphers on;\n\n        # Load configuration files for the default server block.\n        include /etc/nginx/default.d/*.conf;\n\n        location / {\n              root ****;#你的网站主目录 绝对地址\n     \t      index index.html index.htm;\n        }\n\n        error_page 404 /404.html;\n            location = /40x.html {\n        }\n\n        error_page 500 502 503 504 /50x.html;\n            location = /50x.html {\n        }\n    }\n```\n### 重新启动nginx服务\n```\nsystemctl restart nginx\n```\n完成，打开浏览器输入https://+你的网址  即可。\n\n\n\n\n\n","slug":"nginx-https","published":1,"updated":"2020-12-20T16:36:55.009Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrr9soju000v1l5x9i34e1m0","content":"<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>最近在阿里云白嫖了一个ssl证书，这下可以通过https访问我的网站了。</p>\n<h1 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h1><h2 id=\"开放443端口\"><a href=\"#开放443端口\" class=\"headerlink\" title=\"开放443端口\"></a>开放443端口</h2><p>443端口是专门供https使用的端口。443端口和80端口区别如下：</p>\n<ul>\n<li>80端口：超文本服务器端口，用于网页浏览。服务于：HTTP</li>\n<li>443端口：安全服务端口（HTTPS），用于网页浏览端口，能提供加密和通过安全端口传输的另一种 HTTP。服务于：HTTPS<h3 id=\"阿里云增加安全组\"><a href=\"#阿里云增加安全组\" class=\"headerlink\" title=\"阿里云增加安全组\"></a>阿里云增加安全组</h3>如果你用的是阿里云服务器，你不但得用过服务器本身开启，阿里云中还有安全组的设置，得登录它的控制台操作一下。<br><img src=\"http://pic.davontt.com/picGo/nginx1.png\" alt=\"阿里云\"><center style=\"color:#AAAAAA\">在控制台上找到“安全组”</center>\n然后点击实例，在实例中添加安全组规则：\n\n</li>\n</ul>\n<p><img src=\"http://pic.davontt.com/picGo/nginx2.png\" alt=\"阿里云\"></p>\n<center style=\"color:#AAAAAA\">添加安全组规则</center>\n\n<p>添加443端口，按照途中配置即可：</p>\n<p><img src=\"http://pic.davontt.com/picGo/nginx3.png\" alt=\"阿里云\"></p>\n<center style=\"color:#AAAAAA\">添加443端口</center>\n\n<p>一顿操作后安全组增加完成。</p>\n<h3 id=\"服务器上开放443端口\"><a href=\"#服务器上开放443端口\" class=\"headerlink\" title=\"服务器上开放443端口\"></a>服务器上开放443端口</h3><p><em>环境：阿里云 centOS 7</em></p>\n<ol>\n<li>启动httpd服务：<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl <span class=\"literal\">start</span> httpd</span><br></pre></td></tr></table></figure></li>\n<li>开放443端口：<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd <span class=\"attribute\">--zone</span>=public <span class=\"attribute\">--add-port</span>=443/tcp --permanent</span><br></pre></td></tr></table></figure></li>\n<li>重新加载防火墙：<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-<span class=\"keyword\">cmd</span><span class=\"bash\"> --reload</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"配置nginx\"><a href=\"#配置nginx\" class=\"headerlink\" title=\"配置nginx\"></a>配置nginx</h2></li>\n</ol>\n<blockquote>\n<p>本教程是基于centos7 yum安装的nginx，如果有疑问可看我之前写的文章</p>\n</blockquote>\n<h3 id=\"新建文件夹存放ssl证书\"><a href=\"#新建文件夹存放ssl证书\" class=\"headerlink\" title=\"新建文件夹存放ssl证书\"></a>新建文件夹存放ssl证书</h3><p>centOS安装的nginx 默认安装在** /etc/nginx/ **目录下。</p>\n<figure class=\"highlight dos\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /etc/nginx</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> cert</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://pic.davontt.com/picGo/nginx4.png\" alt=\"nginx\"></p>\n<center style=\"color:#AAAAAA\">在cert文件夹中添加两个ssl相关文件</center>\n\n<h3 id=\"修改nginx-配置\"><a href=\"#修改nginx-配置\" class=\"headerlink\" title=\"修改nginx 配置\"></a>修改nginx 配置</h3><p>一般centOS7 用yum安装的nginx 的配置文件是 nginx.conf，打开它会看到默认配置：</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">vi</span> nginx.<span class=\"keyword\">conf</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># For more information on configuration, see:</span></span><br><span class=\"line\"><span class=\"comment\">#   * Official English Documentation: http://nginx.org/en/docs/</span></span><br><span class=\"line\"><span class=\"comment\">#   * Official Russian Documentation: http://nginx.org/ru/docs/</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"attr\">user</span> <span class=\"string\">nginx;</span></span><br><span class=\"line\"><span class=\"attr\">worker_processes</span> <span class=\"string\">auto;</span></span><br><span class=\"line\"><span class=\"attr\">error_log</span> <span class=\"string\">/var/log/nginx/error.log;</span></span><br><span class=\"line\"><span class=\"attr\">pid</span> <span class=\"string\">/run/nginx.pid;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># Load dynamic modules. See /usr/share/nginx/README.dynamic.</span></span><br><span class=\"line\"><span class=\"attr\">include</span> <span class=\"string\">/usr/share/nginx/modules/*.conf;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"attr\">events</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">worker_connections</span> <span class=\"string\">1024;</span></span><br><span class=\"line\"><span class=\"attr\">&#125;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"attr\">http</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">log_format</span>  <span class=\"string\">main  '$remote_addr - $remote_user [$time_local] \"$request\" '</span></span><br><span class=\"line\">                      <span class=\"meta\">'$status</span> <span class=\"string\">$body_bytes_sent \"$http_referer\" '</span></span><br><span class=\"line\">                      <span class=\"meta\">'\"$http_user_agent\"</span> <span class=\"string\">\"$http_x_forwarded_for\"';</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"attr\">access_log</span>  <span class=\"string\">/var/log/nginx/access.log  main;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"attr\">sendfile</span>            <span class=\"string\">on;</span></span><br><span class=\"line\">    <span class=\"attr\">tcp_nopush</span>          <span class=\"string\">on;</span></span><br><span class=\"line\">    <span class=\"attr\">tcp_nodelay</span>         <span class=\"string\">on;</span></span><br><span class=\"line\">    <span class=\"attr\">keepalive_timeout</span>   <span class=\"string\">65;</span></span><br><span class=\"line\">    <span class=\"attr\">types_hash_max_size</span> <span class=\"string\">2048;</span></span><br><span class=\"line\">    <span class=\"attr\">autoindex</span> <span class=\"string\">on; # 显示目录</span></span><br><span class=\"line\">    <span class=\"attr\">autoindex_exact_size</span> <span class=\"string\">on; # 显示文件大小</span></span><br><span class=\"line\">    <span class=\"attr\">autoindex_localtime</span> <span class=\"string\">on; # 显示文件时间</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"attr\">include</span>             <span class=\"string\">/etc/nginx/mime.types;</span></span><br><span class=\"line\">    <span class=\"attr\">default_type</span>        <span class=\"string\">application/octet-stream;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">    # Load modular configuration files from the /etc/nginx/conf.d directory.</span></span><br><span class=\"line\"><span class=\"comment\">    # See http://nginx.org/en/docs/ngx_core_module.html#include</span></span><br><span class=\"line\"><span class=\"comment\">    # for more information.</span></span><br><span class=\"line\">    <span class=\"attr\">include</span> <span class=\"string\">/etc/nginx/conf.d/*.conf;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">    #反响代理server 配置，可用于负载均衡</span></span><br><span class=\"line\">    <span class=\"attr\">upstream</span> <span class=\"string\">file &#123;</span></span><br><span class=\"line\">    <span class=\"attr\">least_conn;</span></span><br><span class=\"line\">    <span class=\"attr\">server</span> <span class=\"string\">192.168.5.222;</span></span><br><span class=\"line\">    <span class=\"attr\">&#125;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"attr\">server</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">listen</span>       <span class=\"string\">80 default_server;</span></span><br><span class=\"line\">        <span class=\"attr\">listen</span>       <span class=\"string\">[::]:80 default_server;</span></span><br><span class=\"line\">        <span class=\"attr\">server_name</span>  <span class=\"string\">_;</span></span><br><span class=\"line\">        <span class=\"attr\">root</span>         <span class=\"string\">/usr/share/nginx/html;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">        # Load configuration files for the default server block.</span></span><br><span class=\"line\">        <span class=\"attr\">include</span> <span class=\"string\">/etc/nginx/default.d/*.conf;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"attr\">location</span> <span class=\"string\">/ &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        #proxy_pass http://192.168.5.222;</span></span><br><span class=\"line\">        <span class=\"attr\">&#125;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"attr\">error_page</span> <span class=\"string\">404 /nginx/404.html;</span></span><br><span class=\"line\">            <span class=\"attr\">location</span> = <span class=\"string\">/nginx/40x.html &#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&#125;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"attr\">error_page</span> <span class=\"string\">500 502 503 504 /nginx/50x.html;</span></span><br><span class=\"line\">            <span class=\"attr\">location</span> = <span class=\"string\">/nginx/50x.html &#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&#125;</span></span><br><span class=\"line\">    <span class=\"attr\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">    # 反向代理server</span></span><br><span class=\"line\">    <span class=\"attr\">server</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">listen</span> <span class=\"string\">9999;</span></span><br><span class=\"line\">        <span class=\"attr\">server_name</span> <span class=\"string\">_;</span></span><br><span class=\"line\">        <span class=\"attr\">location</span> <span class=\"string\">/ &#123;</span></span><br><span class=\"line\">            <span class=\"attr\">proxy_pass</span> <span class=\"string\">http://file;</span></span><br><span class=\"line\">        <span class=\"meta\">&#125;</span>  <span class=\"string\"></span></span><br><span class=\"line\">    <span class=\"attr\">&#125;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># Settings for a TLS enabled server.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#    server &#123;</span></span><br><span class=\"line\"><span class=\"comment\">#        listen       443 ssl http2 default_server;</span></span><br><span class=\"line\"><span class=\"comment\">#        listen       [::]:443 ssl http2 default_server;</span></span><br><span class=\"line\"><span class=\"comment\">#        server_name  _;</span></span><br><span class=\"line\"><span class=\"comment\">#        root         /usr/share/nginx/html;</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#        ssl_certificate \"/etc/pki/nginx/server.crt\";</span></span><br><span class=\"line\"><span class=\"comment\">#        ssl_certificate_key \"/etc/pki/nginx/private/server.key\";</span></span><br><span class=\"line\"><span class=\"comment\">#        ssl_session_cache shared:SSL:1m;</span></span><br><span class=\"line\"><span class=\"comment\">#        ssl_session_timeout  10m;</span></span><br><span class=\"line\"><span class=\"comment\">#        ssl_ciphers HIGH:!aNULL:!MD5;</span></span><br><span class=\"line\"><span class=\"comment\">#        ssl_prefer_server_ciphers on;</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#        # Load configuration files for the default server block.</span></span><br><span class=\"line\"><span class=\"comment\">#        include /etc/nginx/default.d/*.conf;</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#        location / &#123;</span></span><br><span class=\"line\"><span class=\"comment\">#        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#        error_page 404 /404.html;</span></span><br><span class=\"line\"><span class=\"comment\">#            location = /40x.html &#123;</span></span><br><span class=\"line\"><span class=\"comment\">#        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#        error_page 500 502 503 504 /50x.html;</span></span><br><span class=\"line\"><span class=\"comment\">#            location = /50x.html &#123;</span></span><br><span class=\"line\"><span class=\"comment\">#        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">#    &#125;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"attr\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>将“<strong>Settings for a TLS enabled server.</strong>”下面的注释消掉，修改几个重要参数即可：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#Settings for a TLS enabled server.</span></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">listen</span>       <span class=\"number\">443</span> ssl;</span><br><span class=\"line\">        <span class=\"attribute\">ssl</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\">        <span class=\"attribute\">server_name</span>  www.davontt.com;<span class=\"comment\">#你的域名</span></span><br><span class=\"line\">        <span class=\"attribute\">root</span>         ***; <span class=\"comment\">#你的网站主目录 绝对地址</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attribute\">ssl_certificate</span> <span class=\"string\">\"./cert/www.davontt.com.pem\"</span>;<span class=\"comment\">#你的ssl证书地址（注意后缀）</span></span><br><span class=\"line\">        <span class=\"attribute\">ssl_certificate_key</span> <span class=\"string\">\"./cert/www.davontt.com.key\"</span>;<span class=\"comment\">#同上你的ssl证书地址（注意后缀）</span></span><br><span class=\"line\">        <span class=\"attribute\">ssl_session_cache</span> shared:SSL:<span class=\"number\">1m</span>;</span><br><span class=\"line\">        <span class=\"attribute\">ssl_session_timeout</span>  <span class=\"number\">10m</span>;</span><br><span class=\"line\">        <span class=\"attribute\">ssl_ciphers</span> HIGH:!aNULL:!MD5;</span><br><span class=\"line\">        <span class=\"attribute\">ssl_prefer_server_ciphers</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Load configuration files for the default server block.</span></span><br><span class=\"line\">        <span class=\"attribute\">include</span> /etc/nginx/default.d/<span class=\"regexp\">*.conf</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">              <span class=\"attribute\">root</span> ****;<span class=\"comment\">#你的网站主目录 绝对地址</span></span><br><span class=\"line\">     \t      <span class=\"attribute\">index</span> index.html index.htm;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attribute\">error_page</span> <span class=\"number\">404</span> /<span class=\"number\">404</span>.html;</span><br><span class=\"line\">            <span class=\"attribute\">location</span> = /40x.html &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attribute\">error_page</span> <span class=\"number\">500</span> <span class=\"number\">502</span> <span class=\"number\">503</span> <span class=\"number\">504</span> /50x.html;</span><br><span class=\"line\">            <span class=\"attribute\">location</span> = /50x.html &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"重新启动nginx服务\"><a href=\"#重新启动nginx服务\" class=\"headerlink\" title=\"重新启动nginx服务\"></a>重新启动nginx服务</h3><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">systemctl restart nginx</span></span><br></pre></td></tr></table></figure>\n<p>完成，打开浏览器输入https://+你的网址  即可。</p>\n","site":{"data":{"projects":[{"name":"NJUPT_Esport","url":"https://github.com/Davont/NJUPT_Esport","desc":"一个为在校学生提供体育相关成绩查询、校新闻推送、学生反馈评论的web app"},{"name":"Furniture_Management_System","url":"https://github.com/Davont/Furniture_Management_System","desc":"一个提供家具购买、下单、用户管理、订单管理、商户管理等功能的家具订单CMS系统"},{"name":"weapp-WQPS","url":"https://github.com/Davont/weapp-WQPS","desc":"一个展示型的微信小程序，旨在提供基于卫星传感网的水质监测系统的对外展示平台。"},{"name":"yiban_registration","url":"https://github.com/Davont/yiban_registration","desc":"一个面向社团提供新生加入社团的线上报名表"}]}},"excerpt":"","more":"<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>最近在阿里云白嫖了一个ssl证书，这下可以通过https访问我的网站了。</p>\n<h1 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h1><h2 id=\"开放443端口\"><a href=\"#开放443端口\" class=\"headerlink\" title=\"开放443端口\"></a>开放443端口</h2><p>443端口是专门供https使用的端口。443端口和80端口区别如下：</p>\n<ul>\n<li>80端口：超文本服务器端口，用于网页浏览。服务于：HTTP</li>\n<li>443端口：安全服务端口（HTTPS），用于网页浏览端口，能提供加密和通过安全端口传输的另一种 HTTP。服务于：HTTPS<h3 id=\"阿里云增加安全组\"><a href=\"#阿里云增加安全组\" class=\"headerlink\" title=\"阿里云增加安全组\"></a>阿里云增加安全组</h3>如果你用的是阿里云服务器，你不但得用过服务器本身开启，阿里云中还有安全组的设置，得登录它的控制台操作一下。<br><img src=\"http://pic.davontt.com/picGo/nginx1.png\" alt=\"阿里云\"><center style=\"color:#AAAAAA\">在控制台上找到“安全组”</center>\n然后点击实例，在实例中添加安全组规则：\n\n</li>\n</ul>\n<p><img src=\"http://pic.davontt.com/picGo/nginx2.png\" alt=\"阿里云\"></p>\n<center style=\"color:#AAAAAA\">添加安全组规则</center>\n\n<p>添加443端口，按照途中配置即可：</p>\n<p><img src=\"http://pic.davontt.com/picGo/nginx3.png\" alt=\"阿里云\"></p>\n<center style=\"color:#AAAAAA\">添加443端口</center>\n\n<p>一顿操作后安全组增加完成。</p>\n<h3 id=\"服务器上开放443端口\"><a href=\"#服务器上开放443端口\" class=\"headerlink\" title=\"服务器上开放443端口\"></a>服务器上开放443端口</h3><p><em>环境：阿里云 centOS 7</em></p>\n<ol>\n<li>启动httpd服务：<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl <span class=\"literal\">start</span> httpd</span><br></pre></td></tr></table></figure></li>\n<li>开放443端口：<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd <span class=\"attribute\">--zone</span>=public <span class=\"attribute\">--add-port</span>=443/tcp --permanent</span><br></pre></td></tr></table></figure></li>\n<li>重新加载防火墙：<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-<span class=\"keyword\">cmd</span><span class=\"bash\"> --reload</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"配置nginx\"><a href=\"#配置nginx\" class=\"headerlink\" title=\"配置nginx\"></a>配置nginx</h2></li>\n</ol>\n<blockquote>\n<p>本教程是基于centos7 yum安装的nginx，如果有疑问可看我之前写的文章</p>\n</blockquote>\n<h3 id=\"新建文件夹存放ssl证书\"><a href=\"#新建文件夹存放ssl证书\" class=\"headerlink\" title=\"新建文件夹存放ssl证书\"></a>新建文件夹存放ssl证书</h3><p>centOS安装的nginx 默认安装在** /etc/nginx/ **目录下。</p>\n<figure class=\"highlight dos\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /etc/nginx</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> cert</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://pic.davontt.com/picGo/nginx4.png\" alt=\"nginx\"></p>\n<center style=\"color:#AAAAAA\">在cert文件夹中添加两个ssl相关文件</center>\n\n<h3 id=\"修改nginx-配置\"><a href=\"#修改nginx-配置\" class=\"headerlink\" title=\"修改nginx 配置\"></a>修改nginx 配置</h3><p>一般centOS7 用yum安装的nginx 的配置文件是 nginx.conf，打开它会看到默认配置：</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">vi</span> nginx.<span class=\"keyword\">conf</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># For more information on configuration, see:</span></span><br><span class=\"line\"><span class=\"comment\">#   * Official English Documentation: http://nginx.org/en/docs/</span></span><br><span class=\"line\"><span class=\"comment\">#   * Official Russian Documentation: http://nginx.org/ru/docs/</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"attr\">user</span> <span class=\"string\">nginx;</span></span><br><span class=\"line\"><span class=\"attr\">worker_processes</span> <span class=\"string\">auto;</span></span><br><span class=\"line\"><span class=\"attr\">error_log</span> <span class=\"string\">/var/log/nginx/error.log;</span></span><br><span class=\"line\"><span class=\"attr\">pid</span> <span class=\"string\">/run/nginx.pid;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># Load dynamic modules. See /usr/share/nginx/README.dynamic.</span></span><br><span class=\"line\"><span class=\"attr\">include</span> <span class=\"string\">/usr/share/nginx/modules/*.conf;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"attr\">events</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">worker_connections</span> <span class=\"string\">1024;</span></span><br><span class=\"line\"><span class=\"attr\">&#125;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"attr\">http</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">log_format</span>  <span class=\"string\">main  '$remote_addr - $remote_user [$time_local] \"$request\" '</span></span><br><span class=\"line\">                      <span class=\"meta\">'$status</span> <span class=\"string\">$body_bytes_sent \"$http_referer\" '</span></span><br><span class=\"line\">                      <span class=\"meta\">'\"$http_user_agent\"</span> <span class=\"string\">\"$http_x_forwarded_for\"';</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"attr\">access_log</span>  <span class=\"string\">/var/log/nginx/access.log  main;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"attr\">sendfile</span>            <span class=\"string\">on;</span></span><br><span class=\"line\">    <span class=\"attr\">tcp_nopush</span>          <span class=\"string\">on;</span></span><br><span class=\"line\">    <span class=\"attr\">tcp_nodelay</span>         <span class=\"string\">on;</span></span><br><span class=\"line\">    <span class=\"attr\">keepalive_timeout</span>   <span class=\"string\">65;</span></span><br><span class=\"line\">    <span class=\"attr\">types_hash_max_size</span> <span class=\"string\">2048;</span></span><br><span class=\"line\">    <span class=\"attr\">autoindex</span> <span class=\"string\">on; # 显示目录</span></span><br><span class=\"line\">    <span class=\"attr\">autoindex_exact_size</span> <span class=\"string\">on; # 显示文件大小</span></span><br><span class=\"line\">    <span class=\"attr\">autoindex_localtime</span> <span class=\"string\">on; # 显示文件时间</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"attr\">include</span>             <span class=\"string\">/etc/nginx/mime.types;</span></span><br><span class=\"line\">    <span class=\"attr\">default_type</span>        <span class=\"string\">application/octet-stream;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">    # Load modular configuration files from the /etc/nginx/conf.d directory.</span></span><br><span class=\"line\"><span class=\"comment\">    # See http://nginx.org/en/docs/ngx_core_module.html#include</span></span><br><span class=\"line\"><span class=\"comment\">    # for more information.</span></span><br><span class=\"line\">    <span class=\"attr\">include</span> <span class=\"string\">/etc/nginx/conf.d/*.conf;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">    #反响代理server 配置，可用于负载均衡</span></span><br><span class=\"line\">    <span class=\"attr\">upstream</span> <span class=\"string\">file &#123;</span></span><br><span class=\"line\">    <span class=\"attr\">least_conn;</span></span><br><span class=\"line\">    <span class=\"attr\">server</span> <span class=\"string\">192.168.5.222;</span></span><br><span class=\"line\">    <span class=\"attr\">&#125;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"attr\">server</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">listen</span>       <span class=\"string\">80 default_server;</span></span><br><span class=\"line\">        <span class=\"attr\">listen</span>       <span class=\"string\">[::]:80 default_server;</span></span><br><span class=\"line\">        <span class=\"attr\">server_name</span>  <span class=\"string\">_;</span></span><br><span class=\"line\">        <span class=\"attr\">root</span>         <span class=\"string\">/usr/share/nginx/html;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">        # Load configuration files for the default server block.</span></span><br><span class=\"line\">        <span class=\"attr\">include</span> <span class=\"string\">/etc/nginx/default.d/*.conf;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"attr\">location</span> <span class=\"string\">/ &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        #proxy_pass http://192.168.5.222;</span></span><br><span class=\"line\">        <span class=\"attr\">&#125;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"attr\">error_page</span> <span class=\"string\">404 /nginx/404.html;</span></span><br><span class=\"line\">            <span class=\"attr\">location</span> = <span class=\"string\">/nginx/40x.html &#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&#125;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"attr\">error_page</span> <span class=\"string\">500 502 503 504 /nginx/50x.html;</span></span><br><span class=\"line\">            <span class=\"attr\">location</span> = <span class=\"string\">/nginx/50x.html &#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&#125;</span></span><br><span class=\"line\">    <span class=\"attr\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">    # 反向代理server</span></span><br><span class=\"line\">    <span class=\"attr\">server</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">listen</span> <span class=\"string\">9999;</span></span><br><span class=\"line\">        <span class=\"attr\">server_name</span> <span class=\"string\">_;</span></span><br><span class=\"line\">        <span class=\"attr\">location</span> <span class=\"string\">/ &#123;</span></span><br><span class=\"line\">            <span class=\"attr\">proxy_pass</span> <span class=\"string\">http://file;</span></span><br><span class=\"line\">        <span class=\"meta\">&#125;</span>  <span class=\"string\"></span></span><br><span class=\"line\">    <span class=\"attr\">&#125;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># Settings for a TLS enabled server.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#    server &#123;</span></span><br><span class=\"line\"><span class=\"comment\">#        listen       443 ssl http2 default_server;</span></span><br><span class=\"line\"><span class=\"comment\">#        listen       [::]:443 ssl http2 default_server;</span></span><br><span class=\"line\"><span class=\"comment\">#        server_name  _;</span></span><br><span class=\"line\"><span class=\"comment\">#        root         /usr/share/nginx/html;</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#        ssl_certificate \"/etc/pki/nginx/server.crt\";</span></span><br><span class=\"line\"><span class=\"comment\">#        ssl_certificate_key \"/etc/pki/nginx/private/server.key\";</span></span><br><span class=\"line\"><span class=\"comment\">#        ssl_session_cache shared:SSL:1m;</span></span><br><span class=\"line\"><span class=\"comment\">#        ssl_session_timeout  10m;</span></span><br><span class=\"line\"><span class=\"comment\">#        ssl_ciphers HIGH:!aNULL:!MD5;</span></span><br><span class=\"line\"><span class=\"comment\">#        ssl_prefer_server_ciphers on;</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#        # Load configuration files for the default server block.</span></span><br><span class=\"line\"><span class=\"comment\">#        include /etc/nginx/default.d/*.conf;</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#        location / &#123;</span></span><br><span class=\"line\"><span class=\"comment\">#        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#        error_page 404 /404.html;</span></span><br><span class=\"line\"><span class=\"comment\">#            location = /40x.html &#123;</span></span><br><span class=\"line\"><span class=\"comment\">#        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#        error_page 500 502 503 504 /50x.html;</span></span><br><span class=\"line\"><span class=\"comment\">#            location = /50x.html &#123;</span></span><br><span class=\"line\"><span class=\"comment\">#        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">#    &#125;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"attr\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>将“<strong>Settings for a TLS enabled server.</strong>”下面的注释消掉，修改几个重要参数即可：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#Settings for a TLS enabled server.</span></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">listen</span>       <span class=\"number\">443</span> ssl;</span><br><span class=\"line\">        <span class=\"attribute\">ssl</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\">        <span class=\"attribute\">server_name</span>  www.davontt.com;<span class=\"comment\">#你的域名</span></span><br><span class=\"line\">        <span class=\"attribute\">root</span>         ***; <span class=\"comment\">#你的网站主目录 绝对地址</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attribute\">ssl_certificate</span> <span class=\"string\">\"./cert/www.davontt.com.pem\"</span>;<span class=\"comment\">#你的ssl证书地址（注意后缀）</span></span><br><span class=\"line\">        <span class=\"attribute\">ssl_certificate_key</span> <span class=\"string\">\"./cert/www.davontt.com.key\"</span>;<span class=\"comment\">#同上你的ssl证书地址（注意后缀）</span></span><br><span class=\"line\">        <span class=\"attribute\">ssl_session_cache</span> shared:SSL:<span class=\"number\">1m</span>;</span><br><span class=\"line\">        <span class=\"attribute\">ssl_session_timeout</span>  <span class=\"number\">10m</span>;</span><br><span class=\"line\">        <span class=\"attribute\">ssl_ciphers</span> HIGH:!aNULL:!MD5;</span><br><span class=\"line\">        <span class=\"attribute\">ssl_prefer_server_ciphers</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Load configuration files for the default server block.</span></span><br><span class=\"line\">        <span class=\"attribute\">include</span> /etc/nginx/default.d/<span class=\"regexp\">*.conf</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">              <span class=\"attribute\">root</span> ****;<span class=\"comment\">#你的网站主目录 绝对地址</span></span><br><span class=\"line\">     \t      <span class=\"attribute\">index</span> index.html index.htm;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attribute\">error_page</span> <span class=\"number\">404</span> /<span class=\"number\">404</span>.html;</span><br><span class=\"line\">            <span class=\"attribute\">location</span> = /40x.html &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attribute\">error_page</span> <span class=\"number\">500</span> <span class=\"number\">502</span> <span class=\"number\">503</span> <span class=\"number\">504</span> /50x.html;</span><br><span class=\"line\">            <span class=\"attribute\">location</span> = /50x.html &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"重新启动nginx服务\"><a href=\"#重新启动nginx服务\" class=\"headerlink\" title=\"重新启动nginx服务\"></a>重新启动nginx服务</h3><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">systemctl restart nginx</span></span><br></pre></td></tr></table></figure>\n<p>完成，打开浏览器输入https://+你的网址  即可。</p>\n"},{"title":"七牛云+PicGo 实现图床搭建","date":"2018-07-03T20:20:10.000Z","_content":"# 前言\n在日常的Markdown写作中，使用图片是必不可少的，所以靠谱的图片存储服务和上传工具显得格外重要。图片存储上我一直使用七牛，个人用户拥有10GB的免费存储空间，并且拥有很成熟易用的图片处理引擎，可以说是个人博客的不二之选。而上传工具的选择一直是我比较头痛的地方。手动打开七牛上传对于我这种懒人是不可能的，而基于MD编辑器的内置图片上传接口不够灵活（小书匠、Typora等），而当初多个工具使用下来iPic无意识Mac端用户体验最佳的工具，但是，他月费的模式并不适合我这种低频使用者。所以，当初我折中的使用了一个小网站叫极简图床。然而，最近他也挂掉了。重新搜索，我发现了今天要介绍的一个工具PicGo。其使用electron-vue进行编写，具有全平台的适用性。体验上也跟iPic无二并支持多个图床的配置，甚至支持插件的编写。言归正传，下面介绍七牛云+PicGo的图床解决方案。\n\n# 七牛云存储配置\n首先，需要配置七牛的对象存储空间。没有注册的同学首先要注册账号。\n\n进入**管理控制台**，选择**对象存储**。\n\n选择新建存储空间，填写存储空间信息，点击确定创建。\n\n![qiniuyun](http://pic.davontt.com/picGo/qiniuyun.png)\n<center style=\"color:#AAAAAA\">新建存储对象</center>\n\n创建成功后，可以看到七牛给了我们一个测试域名用于文件访问`\nq3f23y9nq.bkt.clouddn.com`。但是该域名仅可用于测试且会在三十日内失效，所以需要进行个人域名的绑定。\n\n![qiniuyun](http://pic.davontt.com/picGo/qiniuyun2.png)\n<center style=\"color:#AAAAAA\">测试域名</center>\n\n点击**绑定域名**，在这里选择普通域名，填入一个已进行公安备案的二级域名作为空间域名。此处已davontt.com为例。其它选项可根据个人需求进行具体调整。\n\n![qiniuyun](http://pic.davontt.com/picGo/qiniuyun3.png)\n<center style=\"color:#AAAAAA\">绑定域名</center>\n\n点击创建后，等待五到十分钟待七牛配置完毕，就可以去域名管理复制得到自己的CNAME。最后登录自己的域名运营商，配置域名解析。\n\n![qiniuyun](http://pic.davontt.com/picGo/qinniuyun3.png)\n<center style=\"color:#AAAAAA\">域名解析</center>\n\n如图中所示，选择CNAME类型，将二级域名指向我们得到的CNAME。\n自此，存储空间配置完毕。\n\n# PicGo配置\n\nPicGo的安装配置相对简单。首先，我们在[picgo](github项目首页)上下载最新版本的安装文件。\n\n安装完成后打开应用，右键点击右上角PicGo的图标选择打开详细窗口，在图床设置中找到七牛图床设置。\n \n![qiniuyun](http://pic.davontt.com/picGo/qiniuyun4.png)\n<center style=\"color:#AAAAAA\">PicGo配置</center>\n\n- 如图需要我们填入一系列的设置，其中：\n- AK与SK在七牛的个人面板密钥管理中可查。\n- 存储空间名称即为我们之前所设置的存储空间名称。\n- 访问网址即为我们之前所绑定的域名。）\n- 可以指定存储路径，将PicGo上传的图片存储到指定目录当中。\n\n上传图片时，一种方式是直接拖拽图片到上传区\n\n![qiniuyun](http://pic.davontt.com/picGo/qiniuyun5.png)\n<center style=\"color:#AAAAAA\">图片上传区</center>\n\n上传成功后PicGo会自动将链接格式对应的图片自制放到剪贴板上以供复制。\n\n另一种方式可能更加实用，直接使用微信等自带的截图工具，截图后图片在剪贴板中，此时可使用\n```\nshift+cmd+p\n```\n自动上传，同样上传成功后，图片地址会传入剪贴板，可以直接在MarkDown文件中进行复制使用。\n\n至此，基于七牛与PicGo的图床配置完成。","source":"_posts/picgo-qiniuyun.md","raw":"---\ntitle: 七牛云+PicGo 实现图床搭建\ndate: 2018-07-04 04:20:10\ntags: 博客搭建\n---\n# 前言\n在日常的Markdown写作中，使用图片是必不可少的，所以靠谱的图片存储服务和上传工具显得格外重要。图片存储上我一直使用七牛，个人用户拥有10GB的免费存储空间，并且拥有很成熟易用的图片处理引擎，可以说是个人博客的不二之选。而上传工具的选择一直是我比较头痛的地方。手动打开七牛上传对于我这种懒人是不可能的，而基于MD编辑器的内置图片上传接口不够灵活（小书匠、Typora等），而当初多个工具使用下来iPic无意识Mac端用户体验最佳的工具，但是，他月费的模式并不适合我这种低频使用者。所以，当初我折中的使用了一个小网站叫极简图床。然而，最近他也挂掉了。重新搜索，我发现了今天要介绍的一个工具PicGo。其使用electron-vue进行编写，具有全平台的适用性。体验上也跟iPic无二并支持多个图床的配置，甚至支持插件的编写。言归正传，下面介绍七牛云+PicGo的图床解决方案。\n\n# 七牛云存储配置\n首先，需要配置七牛的对象存储空间。没有注册的同学首先要注册账号。\n\n进入**管理控制台**，选择**对象存储**。\n\n选择新建存储空间，填写存储空间信息，点击确定创建。\n\n![qiniuyun](http://pic.davontt.com/picGo/qiniuyun.png)\n<center style=\"color:#AAAAAA\">新建存储对象</center>\n\n创建成功后，可以看到七牛给了我们一个测试域名用于文件访问`\nq3f23y9nq.bkt.clouddn.com`。但是该域名仅可用于测试且会在三十日内失效，所以需要进行个人域名的绑定。\n\n![qiniuyun](http://pic.davontt.com/picGo/qiniuyun2.png)\n<center style=\"color:#AAAAAA\">测试域名</center>\n\n点击**绑定域名**，在这里选择普通域名，填入一个已进行公安备案的二级域名作为空间域名。此处已davontt.com为例。其它选项可根据个人需求进行具体调整。\n\n![qiniuyun](http://pic.davontt.com/picGo/qiniuyun3.png)\n<center style=\"color:#AAAAAA\">绑定域名</center>\n\n点击创建后，等待五到十分钟待七牛配置完毕，就可以去域名管理复制得到自己的CNAME。最后登录自己的域名运营商，配置域名解析。\n\n![qiniuyun](http://pic.davontt.com/picGo/qinniuyun3.png)\n<center style=\"color:#AAAAAA\">域名解析</center>\n\n如图中所示，选择CNAME类型，将二级域名指向我们得到的CNAME。\n自此，存储空间配置完毕。\n\n# PicGo配置\n\nPicGo的安装配置相对简单。首先，我们在[picgo](github项目首页)上下载最新版本的安装文件。\n\n安装完成后打开应用，右键点击右上角PicGo的图标选择打开详细窗口，在图床设置中找到七牛图床设置。\n \n![qiniuyun](http://pic.davontt.com/picGo/qiniuyun4.png)\n<center style=\"color:#AAAAAA\">PicGo配置</center>\n\n- 如图需要我们填入一系列的设置，其中：\n- AK与SK在七牛的个人面板密钥管理中可查。\n- 存储空间名称即为我们之前所设置的存储空间名称。\n- 访问网址即为我们之前所绑定的域名。）\n- 可以指定存储路径，将PicGo上传的图片存储到指定目录当中。\n\n上传图片时，一种方式是直接拖拽图片到上传区\n\n![qiniuyun](http://pic.davontt.com/picGo/qiniuyun5.png)\n<center style=\"color:#AAAAAA\">图片上传区</center>\n\n上传成功后PicGo会自动将链接格式对应的图片自制放到剪贴板上以供复制。\n\n另一种方式可能更加实用，直接使用微信等自带的截图工具，截图后图片在剪贴板中，此时可使用\n```\nshift+cmd+p\n```\n自动上传，同样上传成功后，图片地址会传入剪贴板，可以直接在MarkDown文件中进行复制使用。\n\n至此，基于七牛与PicGo的图床配置完成。","slug":"picgo-qiniuyun","published":1,"updated":"2020-12-20T16:36:55.010Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrr9sojw000w1l5xdt1cam0m","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>在日常的Markdown写作中，使用图片是必不可少的，所以靠谱的图片存储服务和上传工具显得格外重要。图片存储上我一直使用七牛，个人用户拥有10GB的免费存储空间，并且拥有很成熟易用的图片处理引擎，可以说是个人博客的不二之选。而上传工具的选择一直是我比较头痛的地方。手动打开七牛上传对于我这种懒人是不可能的，而基于MD编辑器的内置图片上传接口不够灵活（小书匠、Typora等），而当初多个工具使用下来iPic无意识Mac端用户体验最佳的工具，但是，他月费的模式并不适合我这种低频使用者。所以，当初我折中的使用了一个小网站叫极简图床。然而，最近他也挂掉了。重新搜索，我发现了今天要介绍的一个工具PicGo。其使用electron-vue进行编写，具有全平台的适用性。体验上也跟iPic无二并支持多个图床的配置，甚至支持插件的编写。言归正传，下面介绍七牛云+PicGo的图床解决方案。</p>\n<h1 id=\"七牛云存储配置\"><a href=\"#七牛云存储配置\" class=\"headerlink\" title=\"七牛云存储配置\"></a>七牛云存储配置</h1><p>首先，需要配置七牛的对象存储空间。没有注册的同学首先要注册账号。</p>\n<p>进入<strong>管理控制台</strong>，选择<strong>对象存储</strong>。</p>\n<p>选择新建存储空间，填写存储空间信息，点击确定创建。</p>\n<p><img src=\"http://pic.davontt.com/picGo/qiniuyun.png\" alt=\"qiniuyun\"></p>\n<center style=\"color:#AAAAAA\">新建存储对象</center>\n\n<p>创建成功后，可以看到七牛给了我们一个测试域名用于文件访问<code>q3f23y9nq.bkt.clouddn.com</code>。但是该域名仅可用于测试且会在三十日内失效，所以需要进行个人域名的绑定。</p>\n<p><img src=\"http://pic.davontt.com/picGo/qiniuyun2.png\" alt=\"qiniuyun\"></p>\n<center style=\"color:#AAAAAA\">测试域名</center>\n\n<p>点击<strong>绑定域名</strong>，在这里选择普通域名，填入一个已进行公安备案的二级域名作为空间域名。此处已davontt.com为例。其它选项可根据个人需求进行具体调整。</p>\n<p><img src=\"http://pic.davontt.com/picGo/qiniuyun3.png\" alt=\"qiniuyun\"></p>\n<center style=\"color:#AAAAAA\">绑定域名</center>\n\n<p>点击创建后，等待五到十分钟待七牛配置完毕，就可以去域名管理复制得到自己的CNAME。最后登录自己的域名运营商，配置域名解析。</p>\n<p><img src=\"http://pic.davontt.com/picGo/qinniuyun3.png\" alt=\"qiniuyun\"></p>\n<center style=\"color:#AAAAAA\">域名解析</center>\n\n<p>如图中所示，选择CNAME类型，将二级域名指向我们得到的CNAME。<br>自此，存储空间配置完毕。</p>\n<h1 id=\"PicGo配置\"><a href=\"#PicGo配置\" class=\"headerlink\" title=\"PicGo配置\"></a>PicGo配置</h1><p>PicGo的安装配置相对简单。首先，我们在<a href=\"github项目首页\">picgo</a>上下载最新版本的安装文件。</p>\n<p>安装完成后打开应用，右键点击右上角PicGo的图标选择打开详细窗口，在图床设置中找到七牛图床设置。</p>\n<p><img src=\"http://pic.davontt.com/picGo/qiniuyun4.png\" alt=\"qiniuyun\"></p>\n<center style=\"color:#AAAAAA\">PicGo配置</center>\n\n<ul>\n<li>如图需要我们填入一系列的设置，其中：</li>\n<li>AK与SK在七牛的个人面板密钥管理中可查。</li>\n<li>存储空间名称即为我们之前所设置的存储空间名称。</li>\n<li>访问网址即为我们之前所绑定的域名。）</li>\n<li>可以指定存储路径，将PicGo上传的图片存储到指定目录当中。</li>\n</ul>\n<p>上传图片时，一种方式是直接拖拽图片到上传区</p>\n<p><img src=\"http://pic.davontt.com/picGo/qiniuyun5.png\" alt=\"qiniuyun\"></p>\n<center style=\"color:#AAAAAA\">图片上传区</center>\n\n<p>上传成功后PicGo会自动将链接格式对应的图片自制放到剪贴板上以供复制。</p>\n<p>另一种方式可能更加实用，直接使用微信等自带的截图工具，截图后图片在剪贴板中，此时可使用</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shift+<span class=\"keyword\">cmd</span><span class=\"bash\">+p</span></span><br></pre></td></tr></table></figure>\n<p>自动上传，同样上传成功后，图片地址会传入剪贴板，可以直接在MarkDown文件中进行复制使用。</p>\n<p>至此，基于七牛与PicGo的图床配置完成。</p>\n","site":{"data":{"projects":[{"name":"NJUPT_Esport","url":"https://github.com/Davont/NJUPT_Esport","desc":"一个为在校学生提供体育相关成绩查询、校新闻推送、学生反馈评论的web app"},{"name":"Furniture_Management_System","url":"https://github.com/Davont/Furniture_Management_System","desc":"一个提供家具购买、下单、用户管理、订单管理、商户管理等功能的家具订单CMS系统"},{"name":"weapp-WQPS","url":"https://github.com/Davont/weapp-WQPS","desc":"一个展示型的微信小程序，旨在提供基于卫星传感网的水质监测系统的对外展示平台。"},{"name":"yiban_registration","url":"https://github.com/Davont/yiban_registration","desc":"一个面向社团提供新生加入社团的线上报名表"}]}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>在日常的Markdown写作中，使用图片是必不可少的，所以靠谱的图片存储服务和上传工具显得格外重要。图片存储上我一直使用七牛，个人用户拥有10GB的免费存储空间，并且拥有很成熟易用的图片处理引擎，可以说是个人博客的不二之选。而上传工具的选择一直是我比较头痛的地方。手动打开七牛上传对于我这种懒人是不可能的，而基于MD编辑器的内置图片上传接口不够灵活（小书匠、Typora等），而当初多个工具使用下来iPic无意识Mac端用户体验最佳的工具，但是，他月费的模式并不适合我这种低频使用者。所以，当初我折中的使用了一个小网站叫极简图床。然而，最近他也挂掉了。重新搜索，我发现了今天要介绍的一个工具PicGo。其使用electron-vue进行编写，具有全平台的适用性。体验上也跟iPic无二并支持多个图床的配置，甚至支持插件的编写。言归正传，下面介绍七牛云+PicGo的图床解决方案。</p>\n<h1 id=\"七牛云存储配置\"><a href=\"#七牛云存储配置\" class=\"headerlink\" title=\"七牛云存储配置\"></a>七牛云存储配置</h1><p>首先，需要配置七牛的对象存储空间。没有注册的同学首先要注册账号。</p>\n<p>进入<strong>管理控制台</strong>，选择<strong>对象存储</strong>。</p>\n<p>选择新建存储空间，填写存储空间信息，点击确定创建。</p>\n<p><img src=\"http://pic.davontt.com/picGo/qiniuyun.png\" alt=\"qiniuyun\"></p>\n<center style=\"color:#AAAAAA\">新建存储对象</center>\n\n<p>创建成功后，可以看到七牛给了我们一个测试域名用于文件访问<code>q3f23y9nq.bkt.clouddn.com</code>。但是该域名仅可用于测试且会在三十日内失效，所以需要进行个人域名的绑定。</p>\n<p><img src=\"http://pic.davontt.com/picGo/qiniuyun2.png\" alt=\"qiniuyun\"></p>\n<center style=\"color:#AAAAAA\">测试域名</center>\n\n<p>点击<strong>绑定域名</strong>，在这里选择普通域名，填入一个已进行公安备案的二级域名作为空间域名。此处已davontt.com为例。其它选项可根据个人需求进行具体调整。</p>\n<p><img src=\"http://pic.davontt.com/picGo/qiniuyun3.png\" alt=\"qiniuyun\"></p>\n<center style=\"color:#AAAAAA\">绑定域名</center>\n\n<p>点击创建后，等待五到十分钟待七牛配置完毕，就可以去域名管理复制得到自己的CNAME。最后登录自己的域名运营商，配置域名解析。</p>\n<p><img src=\"http://pic.davontt.com/picGo/qinniuyun3.png\" alt=\"qiniuyun\"></p>\n<center style=\"color:#AAAAAA\">域名解析</center>\n\n<p>如图中所示，选择CNAME类型，将二级域名指向我们得到的CNAME。<br>自此，存储空间配置完毕。</p>\n<h1 id=\"PicGo配置\"><a href=\"#PicGo配置\" class=\"headerlink\" title=\"PicGo配置\"></a>PicGo配置</h1><p>PicGo的安装配置相对简单。首先，我们在<a href=\"github项目首页\">picgo</a>上下载最新版本的安装文件。</p>\n<p>安装完成后打开应用，右键点击右上角PicGo的图标选择打开详细窗口，在图床设置中找到七牛图床设置。</p>\n<p><img src=\"http://pic.davontt.com/picGo/qiniuyun4.png\" alt=\"qiniuyun\"></p>\n<center style=\"color:#AAAAAA\">PicGo配置</center>\n\n<ul>\n<li>如图需要我们填入一系列的设置，其中：</li>\n<li>AK与SK在七牛的个人面板密钥管理中可查。</li>\n<li>存储空间名称即为我们之前所设置的存储空间名称。</li>\n<li>访问网址即为我们之前所绑定的域名。）</li>\n<li>可以指定存储路径，将PicGo上传的图片存储到指定目录当中。</li>\n</ul>\n<p>上传图片时，一种方式是直接拖拽图片到上传区</p>\n<p><img src=\"http://pic.davontt.com/picGo/qiniuyun5.png\" alt=\"qiniuyun\"></p>\n<center style=\"color:#AAAAAA\">图片上传区</center>\n\n<p>上传成功后PicGo会自动将链接格式对应的图片自制放到剪贴板上以供复制。</p>\n<p>另一种方式可能更加实用，直接使用微信等自带的截图工具，截图后图片在剪贴板中，此时可使用</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shift+<span class=\"keyword\">cmd</span><span class=\"bash\">+p</span></span><br></pre></td></tr></table></figure>\n<p>自动上传，同样上传成功后，图片地址会传入剪贴板，可以直接在MarkDown文件中进行复制使用。</p>\n<p>至此，基于七牛与PicGo的图床配置完成。</p>\n"},{"title":"个人博客正式上线","date":"2017-07-10T13:10:50.000Z","_content":"## 为什么我要写博客\n### 独立的才是自己的\n对于一个内心较丰富的人，有时候总想记点什么东西，但又不知如何记起，从何记起。有时候，发布在空间微博上动态写一些类似个人感悟的内容似乎总不“适宜”。毕竟像微信、QQ空间、新浪微博这类社交平台发布一些身边趣事，搞笑段子，奇闻异事，或者大家都在议论的某个话题等等好像更符合社交的概念。而你自己的所感所想，谁会在意呢？因此，做一个只属于自己的网站，自己想写什么就写什么，不必在意一些束缚，这样，才是最好的。\n## 博客的内容\n其实我把写博客当成一种记录，或者一种分享。但我不会漫无目的的记录一些没有养分的事情（至少对我来说），往往我会经过一定的思考，以及对思考的结果把它表达出来。毕竟想是一回事，而写又是另一回事。这里分享某位作者对于写博客内容的看法：\n1. 不是生活杂记、不是流水账、不是牢骚、不是抱怨、不是心情琐记……；\n2. 有目的地写，要务实，追求质量；\n3. 承认真实的自己，不要吹嘘，不要装逼，无需讨好读者；\n4. 记录自己学习、思考、总结的过程；\n5. 分享你的故事、所得、感想、经验；\n而我，想把这个内容分成两个部分：“个人心得”和“技术感悟”，第一个不必多说，第二个\n主要是关于计算机相关技术的分享总结，虽然不全是干货，但对我自己来说是一个经历和记录。\n### 重新认识自己\n人们对于别人的了解好像总是高于了解自己。而自己究竟是个什么样的人有时会在脑子里过一遍，但之后终究还是忘了。因此写下来就变得尤为重要。\n\n### 旨在提高自己知识\n在大数据时代，有太多太多的知识，这就需要个人的不断学习与积累，本人现在也是小白一枚，想通过写博客的方式分享自己的所学，这既能够帮助了别人，在写的时候也让自己温习了一遍。两全其美，何乐而不为？\n### 培养持续做一件事的能力\n额。。。很多事光想不做是没有意义的，想起一句：在脑子里面的想法永远是天才的想法。个人比较喜欢看电影，但有的电影看了就忘，也许当时还心情澎湃，但一个星期之后就忘了电影叫什么了。以前有想过把看过的每一部电影都做一个总结，可是做了几次也没坚持下来，所以我很怕这次想之前一样坚持不下来。\n默默地持续做一件事是一种难得的能力，也是一种难得的品质。\n> 如果你想要清晰地思考，就必须远离人群。但是走得越远，你的处境就会越困难，收到的阻力也会越大。因为你没有迎合社会习俗，而是一步步地与它背道而驰。如果自己就是潮水的一部分 ，怎么能看见潮流的方向呢？你只能永远保持质疑，问自己，什么话是我不能说的？为什么？——Paul Graham《不能说的话》\n\n## 后博客时代\n博客现在写的人感觉越来越少了，所以博客更多的是一种写给自己的。\n\n在某种意义上，它也是一个人的简历，与其说简历，倒不如说一个人的历程。\n\n## 写在最后\n每人都会有思维的盲点，就好像这篇文章一样，可能你觉得我可能说得不对，你可以反驳我，我欢迎这种讨论，因为讨论的过程中会产生各种的思维的碰撞，这种碰撞会让你反思，也会激发出你新的灵感，这种讨论反思给自己的带来巨大的受益。\n\n一个知乎博主说过：“互联网给你的反馈就是让你承受更多，接受更多，成为一个更好的人。”\n\n共勉。\n","source":"_posts/myNewBlog.md","raw":"---\ntitle: 个人博客正式上线\ndate: 2017-7-10 21:10:50\ntags: 随笔\n---\n## 为什么我要写博客\n### 独立的才是自己的\n对于一个内心较丰富的人，有时候总想记点什么东西，但又不知如何记起，从何记起。有时候，发布在空间微博上动态写一些类似个人感悟的内容似乎总不“适宜”。毕竟像微信、QQ空间、新浪微博这类社交平台发布一些身边趣事，搞笑段子，奇闻异事，或者大家都在议论的某个话题等等好像更符合社交的概念。而你自己的所感所想，谁会在意呢？因此，做一个只属于自己的网站，自己想写什么就写什么，不必在意一些束缚，这样，才是最好的。\n## 博客的内容\n其实我把写博客当成一种记录，或者一种分享。但我不会漫无目的的记录一些没有养分的事情（至少对我来说），往往我会经过一定的思考，以及对思考的结果把它表达出来。毕竟想是一回事，而写又是另一回事。这里分享某位作者对于写博客内容的看法：\n1. 不是生活杂记、不是流水账、不是牢骚、不是抱怨、不是心情琐记……；\n2. 有目的地写，要务实，追求质量；\n3. 承认真实的自己，不要吹嘘，不要装逼，无需讨好读者；\n4. 记录自己学习、思考、总结的过程；\n5. 分享你的故事、所得、感想、经验；\n而我，想把这个内容分成两个部分：“个人心得”和“技术感悟”，第一个不必多说，第二个\n主要是关于计算机相关技术的分享总结，虽然不全是干货，但对我自己来说是一个经历和记录。\n### 重新认识自己\n人们对于别人的了解好像总是高于了解自己。而自己究竟是个什么样的人有时会在脑子里过一遍，但之后终究还是忘了。因此写下来就变得尤为重要。\n\n### 旨在提高自己知识\n在大数据时代，有太多太多的知识，这就需要个人的不断学习与积累，本人现在也是小白一枚，想通过写博客的方式分享自己的所学，这既能够帮助了别人，在写的时候也让自己温习了一遍。两全其美，何乐而不为？\n### 培养持续做一件事的能力\n额。。。很多事光想不做是没有意义的，想起一句：在脑子里面的想法永远是天才的想法。个人比较喜欢看电影，但有的电影看了就忘，也许当时还心情澎湃，但一个星期之后就忘了电影叫什么了。以前有想过把看过的每一部电影都做一个总结，可是做了几次也没坚持下来，所以我很怕这次想之前一样坚持不下来。\n默默地持续做一件事是一种难得的能力，也是一种难得的品质。\n> 如果你想要清晰地思考，就必须远离人群。但是走得越远，你的处境就会越困难，收到的阻力也会越大。因为你没有迎合社会习俗，而是一步步地与它背道而驰。如果自己就是潮水的一部分 ，怎么能看见潮流的方向呢？你只能永远保持质疑，问自己，什么话是我不能说的？为什么？——Paul Graham《不能说的话》\n\n## 后博客时代\n博客现在写的人感觉越来越少了，所以博客更多的是一种写给自己的。\n\n在某种意义上，它也是一个人的简历，与其说简历，倒不如说一个人的历程。\n\n## 写在最后\n每人都会有思维的盲点，就好像这篇文章一样，可能你觉得我可能说得不对，你可以反驳我，我欢迎这种讨论，因为讨论的过程中会产生各种的思维的碰撞，这种碰撞会让你反思，也会激发出你新的灵感，这种讨论反思给自己的带来巨大的受益。\n\n一个知乎博主说过：“互联网给你的反馈就是让你承受更多，接受更多，成为一个更好的人。”\n\n共勉。\n","slug":"myNewBlog","published":1,"updated":"2020-12-20T16:36:55.009Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrr9sojz000y1l5x9lq7a5vw","content":"<h2 id=\"为什么我要写博客\"><a href=\"#为什么我要写博客\" class=\"headerlink\" title=\"为什么我要写博客\"></a>为什么我要写博客</h2><h3 id=\"独立的才是自己的\"><a href=\"#独立的才是自己的\" class=\"headerlink\" title=\"独立的才是自己的\"></a>独立的才是自己的</h3><p>对于一个内心较丰富的人，有时候总想记点什么东西，但又不知如何记起，从何记起。有时候，发布在空间微博上动态写一些类似个人感悟的内容似乎总不“适宜”。毕竟像微信、QQ空间、新浪微博这类社交平台发布一些身边趣事，搞笑段子，奇闻异事，或者大家都在议论的某个话题等等好像更符合社交的概念。而你自己的所感所想，谁会在意呢？因此，做一个只属于自己的网站，自己想写什么就写什么，不必在意一些束缚，这样，才是最好的。</p>\n<h2 id=\"博客的内容\"><a href=\"#博客的内容\" class=\"headerlink\" title=\"博客的内容\"></a>博客的内容</h2><p>其实我把写博客当成一种记录，或者一种分享。但我不会漫无目的的记录一些没有养分的事情（至少对我来说），往往我会经过一定的思考，以及对思考的结果把它表达出来。毕竟想是一回事，而写又是另一回事。这里分享某位作者对于写博客内容的看法：</p>\n<ol>\n<li>不是生活杂记、不是流水账、不是牢骚、不是抱怨、不是心情琐记……；</li>\n<li>有目的地写，要务实，追求质量；</li>\n<li>承认真实的自己，不要吹嘘，不要装逼，无需讨好读者；</li>\n<li>记录自己学习、思考、总结的过程；</li>\n<li>分享你的故事、所得、感想、经验；<br>而我，想把这个内容分成两个部分：“个人心得”和“技术感悟”，第一个不必多说，第二个<br>主要是关于计算机相关技术的分享总结，虽然不全是干货，但对我自己来说是一个经历和记录。<h3 id=\"重新认识自己\"><a href=\"#重新认识自己\" class=\"headerlink\" title=\"重新认识自己\"></a>重新认识自己</h3>人们对于别人的了解好像总是高于了解自己。而自己究竟是个什么样的人有时会在脑子里过一遍，但之后终究还是忘了。因此写下来就变得尤为重要。</li>\n</ol>\n<h3 id=\"旨在提高自己知识\"><a href=\"#旨在提高自己知识\" class=\"headerlink\" title=\"旨在提高自己知识\"></a>旨在提高自己知识</h3><p>在大数据时代，有太多太多的知识，这就需要个人的不断学习与积累，本人现在也是小白一枚，想通过写博客的方式分享自己的所学，这既能够帮助了别人，在写的时候也让自己温习了一遍。两全其美，何乐而不为？</p>\n<h3 id=\"培养持续做一件事的能力\"><a href=\"#培养持续做一件事的能力\" class=\"headerlink\" title=\"培养持续做一件事的能力\"></a>培养持续做一件事的能力</h3><p>额。。。很多事光想不做是没有意义的，想起一句：在脑子里面的想法永远是天才的想法。个人比较喜欢看电影，但有的电影看了就忘，也许当时还心情澎湃，但一个星期之后就忘了电影叫什么了。以前有想过把看过的每一部电影都做一个总结，可是做了几次也没坚持下来，所以我很怕这次想之前一样坚持不下来。<br>默默地持续做一件事是一种难得的能力，也是一种难得的品质。</p>\n<blockquote>\n<p>如果你想要清晰地思考，就必须远离人群。但是走得越远，你的处境就会越困难，收到的阻力也会越大。因为你没有迎合社会习俗，而是一步步地与它背道而驰。如果自己就是潮水的一部分 ，怎么能看见潮流的方向呢？你只能永远保持质疑，问自己，什么话是我不能说的？为什么？——Paul Graham《不能说的话》</p>\n</blockquote>\n<h2 id=\"后博客时代\"><a href=\"#后博客时代\" class=\"headerlink\" title=\"后博客时代\"></a>后博客时代</h2><p>博客现在写的人感觉越来越少了，所以博客更多的是一种写给自己的。</p>\n<p>在某种意义上，它也是一个人的简历，与其说简历，倒不如说一个人的历程。</p>\n<h2 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h2><p>每人都会有思维的盲点，就好像这篇文章一样，可能你觉得我可能说得不对，你可以反驳我，我欢迎这种讨论，因为讨论的过程中会产生各种的思维的碰撞，这种碰撞会让你反思，也会激发出你新的灵感，这种讨论反思给自己的带来巨大的受益。</p>\n<p>一个知乎博主说过：“互联网给你的反馈就是让你承受更多，接受更多，成为一个更好的人。”</p>\n<p>共勉。</p>\n","site":{"data":{"projects":[{"name":"NJUPT_Esport","url":"https://github.com/Davont/NJUPT_Esport","desc":"一个为在校学生提供体育相关成绩查询、校新闻推送、学生反馈评论的web app"},{"name":"Furniture_Management_System","url":"https://github.com/Davont/Furniture_Management_System","desc":"一个提供家具购买、下单、用户管理、订单管理、商户管理等功能的家具订单CMS系统"},{"name":"weapp-WQPS","url":"https://github.com/Davont/weapp-WQPS","desc":"一个展示型的微信小程序，旨在提供基于卫星传感网的水质监测系统的对外展示平台。"},{"name":"yiban_registration","url":"https://github.com/Davont/yiban_registration","desc":"一个面向社团提供新生加入社团的线上报名表"}]}},"excerpt":"","more":"<h2 id=\"为什么我要写博客\"><a href=\"#为什么我要写博客\" class=\"headerlink\" title=\"为什么我要写博客\"></a>为什么我要写博客</h2><h3 id=\"独立的才是自己的\"><a href=\"#独立的才是自己的\" class=\"headerlink\" title=\"独立的才是自己的\"></a>独立的才是自己的</h3><p>对于一个内心较丰富的人，有时候总想记点什么东西，但又不知如何记起，从何记起。有时候，发布在空间微博上动态写一些类似个人感悟的内容似乎总不“适宜”。毕竟像微信、QQ空间、新浪微博这类社交平台发布一些身边趣事，搞笑段子，奇闻异事，或者大家都在议论的某个话题等等好像更符合社交的概念。而你自己的所感所想，谁会在意呢？因此，做一个只属于自己的网站，自己想写什么就写什么，不必在意一些束缚，这样，才是最好的。</p>\n<h2 id=\"博客的内容\"><a href=\"#博客的内容\" class=\"headerlink\" title=\"博客的内容\"></a>博客的内容</h2><p>其实我把写博客当成一种记录，或者一种分享。但我不会漫无目的的记录一些没有养分的事情（至少对我来说），往往我会经过一定的思考，以及对思考的结果把它表达出来。毕竟想是一回事，而写又是另一回事。这里分享某位作者对于写博客内容的看法：</p>\n<ol>\n<li>不是生活杂记、不是流水账、不是牢骚、不是抱怨、不是心情琐记……；</li>\n<li>有目的地写，要务实，追求质量；</li>\n<li>承认真实的自己，不要吹嘘，不要装逼，无需讨好读者；</li>\n<li>记录自己学习、思考、总结的过程；</li>\n<li>分享你的故事、所得、感想、经验；<br>而我，想把这个内容分成两个部分：“个人心得”和“技术感悟”，第一个不必多说，第二个<br>主要是关于计算机相关技术的分享总结，虽然不全是干货，但对我自己来说是一个经历和记录。<h3 id=\"重新认识自己\"><a href=\"#重新认识自己\" class=\"headerlink\" title=\"重新认识自己\"></a>重新认识自己</h3>人们对于别人的了解好像总是高于了解自己。而自己究竟是个什么样的人有时会在脑子里过一遍，但之后终究还是忘了。因此写下来就变得尤为重要。</li>\n</ol>\n<h3 id=\"旨在提高自己知识\"><a href=\"#旨在提高自己知识\" class=\"headerlink\" title=\"旨在提高自己知识\"></a>旨在提高自己知识</h3><p>在大数据时代，有太多太多的知识，这就需要个人的不断学习与积累，本人现在也是小白一枚，想通过写博客的方式分享自己的所学，这既能够帮助了别人，在写的时候也让自己温习了一遍。两全其美，何乐而不为？</p>\n<h3 id=\"培养持续做一件事的能力\"><a href=\"#培养持续做一件事的能力\" class=\"headerlink\" title=\"培养持续做一件事的能力\"></a>培养持续做一件事的能力</h3><p>额。。。很多事光想不做是没有意义的，想起一句：在脑子里面的想法永远是天才的想法。个人比较喜欢看电影，但有的电影看了就忘，也许当时还心情澎湃，但一个星期之后就忘了电影叫什么了。以前有想过把看过的每一部电影都做一个总结，可是做了几次也没坚持下来，所以我很怕这次想之前一样坚持不下来。<br>默默地持续做一件事是一种难得的能力，也是一种难得的品质。</p>\n<blockquote>\n<p>如果你想要清晰地思考，就必须远离人群。但是走得越远，你的处境就会越困难，收到的阻力也会越大。因为你没有迎合社会习俗，而是一步步地与它背道而驰。如果自己就是潮水的一部分 ，怎么能看见潮流的方向呢？你只能永远保持质疑，问自己，什么话是我不能说的？为什么？——Paul Graham《不能说的话》</p>\n</blockquote>\n<h2 id=\"后博客时代\"><a href=\"#后博客时代\" class=\"headerlink\" title=\"后博客时代\"></a>后博客时代</h2><p>博客现在写的人感觉越来越少了，所以博客更多的是一种写给自己的。</p>\n<p>在某种意义上，它也是一个人的简历，与其说简历，倒不如说一个人的历程。</p>\n<h2 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h2><p>每人都会有思维的盲点，就好像这篇文章一样，可能你觉得我可能说得不对，你可以反驳我，我欢迎这种讨论，因为讨论的过程中会产生各种的思维的碰撞，这种碰撞会让你反思，也会激发出你新的灵感，这种讨论反思给自己的带来巨大的受益。</p>\n<p>一个知乎博主说过：“互联网给你的反馈就是让你承受更多，接受更多，成为一个更好的人。”</p>\n<p>共勉。</p>\n"},{"title":"JavaScript运行机制","date":"2019-03-05T01:21:40.000Z","_content":"# 前言\nJavaScript是一个单线程、解释型语言。\n\n单线程的意思很简单，就是同一个时间只能做一件事。\n\n编译型语言和解释型语言区别:\n- 编译型语言：C、C++、java此类编译型语言，运行过程：给人看的代码文件->机器能运行的代码文件->运行结果,下次执行不需要再重复此过程,这个过程叫做编译。\n- 解释型语言：JavaScript、Python此类解释型语言，自上而下，解释一行，执行一行；不会通篇编译为一个文件再执行。\n\n> 解释型语言：程序不需要编译，程序在运行时才**翻译**成机器语言，每执行一次都要翻译一次。\n\n> 编译型语言：程序在执行之前需要一个专门的**编译**过程，把程序编译成 为机器语言的文件，运行时不需要重新翻译，直接使用编译的结果。\n\n\n# JavaScript执行过程\n\n1. 语法分析\n2. 预编译\n3. 解释执行\n\nJavaScript按照代码块来进行解释和执行，代码块间相互独立，但变量和方法共享。\n\n*JavaScript中的代码块是指由`<script></script>`标签分割的代码段。*\n\n## 1. 语法分析\n顾名思义 就是检查一遍js代码内有没有出现语法错误（比如少些个分号，多写个括号等）；语法分析期间不会执行代码。\n\n## 2. 预编译\n在此之前，有些人可能会有疑问：js不是说好了是解释型语言吗？怎么还有预编译，它到底能编译吗？事实上，JavaScript确实是一门解释型语言，但它有编译特性（取决于引擎）。\n可以参考下面两篇文章\n> https://www.cnblogs.com/allen2333/p/9148230.html\n> https://baijiahao.baidu.com/s?id=1591528352410621144&wfr=spider&for=pc\n\n### 预编译发生在什么时候？\n脚本代码块script执行前（全局）或者函数执行前（函数体内）\n\n### 预编译发生在哪些范围内？\n全局范围和函数体内。\n\n- **全局**：全局的变量声明和函数声明则会存放在全局对象内（Global Object 简称GO，它是window的一部分，你可以直接把他理解成window对象）中\n- **函数体内**\n预编译会提前把函数里的变量声明和函数声明依据规则存放在该活动对象内（Activation Object，简称AO），\n\n预编译简单理解就是在内存中开辟一些空间，存放一些变量与函数 。\n\n预编译大致可分为4步：\n\n1. 创建AO/GO对象\n2. 找形参和变量声明，将形参和变量名作为AO/GO属性名，值为undefined\n3. 将实参值和形参统一\n4. 在函数体里面找函数声明，值赋予函数体。\n\n### 预编译小结\n\n**函数声明整体提升** \n1. 创建AO对象（Active Object）\n2. 查找函数形参及函数内变量声明，形参名及变量名作为AO对象的属性，值为undefined\n3. 实参形参相统一，实参值赋给形参\n4. 查找函数声明，函数名作为AO对象的属性，值为函数引用\n**变量声明提升** \n1. 查找全局变量声明（包括隐式全局变量声明，省略var声明），变量名作全局对象的属性，值为undefined\n3. 查找函数声明，函数名作为全局对象的属性，值为函数引用\n(具体点说，无论变量调用和声明的位置是前是后，系统总会把声明移到调用前，注意仅仅只是声明，所以值是undefined），只有在解释执行阶段才会进行变量初始化，匿名函数不参与预编译。\n预编译前奏\n\n> imply global 即任何变量，如果未经声明就赋值，则此变量就为全局变量所有(全局域就是window) 。一切声明的全局变量，全是window的属性。\n\n> JavaScript中函数定义主要有两种：声明式与函数表达式。\n\n```js\n    //声明式函数\n    function test() {\n        //...\n    }\n    //函数表达式\n    var test = function() {\n        //...\n    }\n```\n### 代码实例\n\n1.变量声明提升\n```js\nalert(a);\nalert('ok');\nvar a = 1;\n/*弹出undefined和ok。因为执行时先解释：定义var变量，并未初始化赋值，当前值为undefined。*/\n```\n\n2.未定义声明即为全局变量\n```js\nalert(a);\nalert('ok');\na = 1;\n```\n会发现报错了，因为a未定义，解释时定义var变量，并不会定义此处的a。\n\n**到这里我们又发现了一个值得关注的问题--定义变量的方式。**\n\n> JavaScript变量分两种：全局变量和局部变量。像a = 1;这种定义默认是创建全局变量，其实就相当于window.a = 1;而var a = 1;这种格式是定义一个当前作用域下的变量。解释时只会定义var格式的变量。\n\n3.下面代码做了什么？\n```js\n<script>\n    var a = 1;// 变量声明\n    function b(y){//函数声明\n        var x = 1;\n        console.log('so easy');\n    };\n    var c = function(){//是变量声明而不是函数声明！！\n        //...\n    }\n    b(100);\n</script>\n\n<script>\n    var d = 0;\n</script>\n```\n- 页面产生便创建了GO全局对象（Global Object）（也就是大家熟悉的window对象）\n- 第一个脚本文件加载\n- 脚本加载完毕后，分析语法是否合法\n- 开始预编译\n   - 查找变量声明，作为GO属性，值赋予undefined\n   - 查找函数声明，作为GO属性，值赋予函数体\n\n## 3. 解释执行\n预编译完毕之后，JavaScript 脚本开始执行，执行顺序按照从上到下的顺序执行。\n\n## 总结\n总结\nJavaScript执行顺序\n\n1. 语法分析\n2. 预编译\n2.1. 创建AO(GO)对象\n2.2. 找形参和变量声明，将形参和变量名作为AO(GO)属性名，值为undefined\n2.3. 将实参值和形参统一\n2.4. 在函数体里面找函数声明，值赋予函数体。\n3. 解释执行\n\n","source":"_posts/js-operation.md","raw":"---\ntitle: JavaScript运行机制\ndate: 2019-03-05 09:21:40\ntags: [js]\n---\n# 前言\nJavaScript是一个单线程、解释型语言。\n\n单线程的意思很简单，就是同一个时间只能做一件事。\n\n编译型语言和解释型语言区别:\n- 编译型语言：C、C++、java此类编译型语言，运行过程：给人看的代码文件->机器能运行的代码文件->运行结果,下次执行不需要再重复此过程,这个过程叫做编译。\n- 解释型语言：JavaScript、Python此类解释型语言，自上而下，解释一行，执行一行；不会通篇编译为一个文件再执行。\n\n> 解释型语言：程序不需要编译，程序在运行时才**翻译**成机器语言，每执行一次都要翻译一次。\n\n> 编译型语言：程序在执行之前需要一个专门的**编译**过程，把程序编译成 为机器语言的文件，运行时不需要重新翻译，直接使用编译的结果。\n\n\n# JavaScript执行过程\n\n1. 语法分析\n2. 预编译\n3. 解释执行\n\nJavaScript按照代码块来进行解释和执行，代码块间相互独立，但变量和方法共享。\n\n*JavaScript中的代码块是指由`<script></script>`标签分割的代码段。*\n\n## 1. 语法分析\n顾名思义 就是检查一遍js代码内有没有出现语法错误（比如少些个分号，多写个括号等）；语法分析期间不会执行代码。\n\n## 2. 预编译\n在此之前，有些人可能会有疑问：js不是说好了是解释型语言吗？怎么还有预编译，它到底能编译吗？事实上，JavaScript确实是一门解释型语言，但它有编译特性（取决于引擎）。\n可以参考下面两篇文章\n> https://www.cnblogs.com/allen2333/p/9148230.html\n> https://baijiahao.baidu.com/s?id=1591528352410621144&wfr=spider&for=pc\n\n### 预编译发生在什么时候？\n脚本代码块script执行前（全局）或者函数执行前（函数体内）\n\n### 预编译发生在哪些范围内？\n全局范围和函数体内。\n\n- **全局**：全局的变量声明和函数声明则会存放在全局对象内（Global Object 简称GO，它是window的一部分，你可以直接把他理解成window对象）中\n- **函数体内**\n预编译会提前把函数里的变量声明和函数声明依据规则存放在该活动对象内（Activation Object，简称AO），\n\n预编译简单理解就是在内存中开辟一些空间，存放一些变量与函数 。\n\n预编译大致可分为4步：\n\n1. 创建AO/GO对象\n2. 找形参和变量声明，将形参和变量名作为AO/GO属性名，值为undefined\n3. 将实参值和形参统一\n4. 在函数体里面找函数声明，值赋予函数体。\n\n### 预编译小结\n\n**函数声明整体提升** \n1. 创建AO对象（Active Object）\n2. 查找函数形参及函数内变量声明，形参名及变量名作为AO对象的属性，值为undefined\n3. 实参形参相统一，实参值赋给形参\n4. 查找函数声明，函数名作为AO对象的属性，值为函数引用\n**变量声明提升** \n1. 查找全局变量声明（包括隐式全局变量声明，省略var声明），变量名作全局对象的属性，值为undefined\n3. 查找函数声明，函数名作为全局对象的属性，值为函数引用\n(具体点说，无论变量调用和声明的位置是前是后，系统总会把声明移到调用前，注意仅仅只是声明，所以值是undefined），只有在解释执行阶段才会进行变量初始化，匿名函数不参与预编译。\n预编译前奏\n\n> imply global 即任何变量，如果未经声明就赋值，则此变量就为全局变量所有(全局域就是window) 。一切声明的全局变量，全是window的属性。\n\n> JavaScript中函数定义主要有两种：声明式与函数表达式。\n\n```js\n    //声明式函数\n    function test() {\n        //...\n    }\n    //函数表达式\n    var test = function() {\n        //...\n    }\n```\n### 代码实例\n\n1.变量声明提升\n```js\nalert(a);\nalert('ok');\nvar a = 1;\n/*弹出undefined和ok。因为执行时先解释：定义var变量，并未初始化赋值，当前值为undefined。*/\n```\n\n2.未定义声明即为全局变量\n```js\nalert(a);\nalert('ok');\na = 1;\n```\n会发现报错了，因为a未定义，解释时定义var变量，并不会定义此处的a。\n\n**到这里我们又发现了一个值得关注的问题--定义变量的方式。**\n\n> JavaScript变量分两种：全局变量和局部变量。像a = 1;这种定义默认是创建全局变量，其实就相当于window.a = 1;而var a = 1;这种格式是定义一个当前作用域下的变量。解释时只会定义var格式的变量。\n\n3.下面代码做了什么？\n```js\n<script>\n    var a = 1;// 变量声明\n    function b(y){//函数声明\n        var x = 1;\n        console.log('so easy');\n    };\n    var c = function(){//是变量声明而不是函数声明！！\n        //...\n    }\n    b(100);\n</script>\n\n<script>\n    var d = 0;\n</script>\n```\n- 页面产生便创建了GO全局对象（Global Object）（也就是大家熟悉的window对象）\n- 第一个脚本文件加载\n- 脚本加载完毕后，分析语法是否合法\n- 开始预编译\n   - 查找变量声明，作为GO属性，值赋予undefined\n   - 查找函数声明，作为GO属性，值赋予函数体\n\n## 3. 解释执行\n预编译完毕之后，JavaScript 脚本开始执行，执行顺序按照从上到下的顺序执行。\n\n## 总结\n总结\nJavaScript执行顺序\n\n1. 语法分析\n2. 预编译\n2.1. 创建AO(GO)对象\n2.2. 找形参和变量声明，将形参和变量名作为AO(GO)属性名，值为undefined\n2.3. 将实参值和形参统一\n2.4. 在函数体里面找函数声明，值赋予函数体。\n3. 解释执行\n\n","slug":"js-operation","published":1,"updated":"2020-12-20T16:36:55.009Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrr9sok100101l5xfpa4ao8m","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>JavaScript是一个单线程、解释型语言。</p>\n<p>单线程的意思很简单，就是同一个时间只能做一件事。</p>\n<p>编译型语言和解释型语言区别:</p>\n<ul>\n<li>编译型语言：C、C++、java此类编译型语言，运行过程：给人看的代码文件-&gt;机器能运行的代码文件-&gt;运行结果,下次执行不需要再重复此过程,这个过程叫做编译。</li>\n<li>解释型语言：JavaScript、Python此类解释型语言，自上而下，解释一行，执行一行；不会通篇编译为一个文件再执行。</li>\n</ul>\n<blockquote>\n<p>解释型语言：程序不需要编译，程序在运行时才<strong>翻译</strong>成机器语言，每执行一次都要翻译一次。</p>\n</blockquote>\n<blockquote>\n<p>编译型语言：程序在执行之前需要一个专门的<strong>编译</strong>过程，把程序编译成 为机器语言的文件，运行时不需要重新翻译，直接使用编译的结果。</p>\n</blockquote>\n<h1 id=\"JavaScript执行过程\"><a href=\"#JavaScript执行过程\" class=\"headerlink\" title=\"JavaScript执行过程\"></a>JavaScript执行过程</h1><ol>\n<li>语法分析</li>\n<li>预编译</li>\n<li>解释执行</li>\n</ol>\n<p>JavaScript按照代码块来进行解释和执行，代码块间相互独立，但变量和方法共享。</p>\n<p><em>JavaScript中的代码块是指由<code>&lt;script&gt;&lt;/script&gt;</code>标签分割的代码段。</em></p>\n<h2 id=\"1-语法分析\"><a href=\"#1-语法分析\" class=\"headerlink\" title=\"1. 语法分析\"></a>1. 语法分析</h2><p>顾名思义 就是检查一遍js代码内有没有出现语法错误（比如少些个分号，多写个括号等）；语法分析期间不会执行代码。</p>\n<h2 id=\"2-预编译\"><a href=\"#2-预编译\" class=\"headerlink\" title=\"2. 预编译\"></a>2. 预编译</h2><p>在此之前，有些人可能会有疑问：js不是说好了是解释型语言吗？怎么还有预编译，它到底能编译吗？事实上，JavaScript确实是一门解释型语言，但它有编译特性（取决于引擎）。<br>可以参考下面两篇文章</p>\n<blockquote>\n<p><a href=\"https://www.cnblogs.com/allen2333/p/9148230.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/allen2333/p/9148230.html</a><br><a href=\"https://baijiahao.baidu.com/s?id=1591528352410621144&amp;wfr=spider&amp;for=pc\" target=\"_blank\" rel=\"noopener\">https://baijiahao.baidu.com/s?id=1591528352410621144&amp;wfr=spider&amp;for=pc</a></p>\n</blockquote>\n<h3 id=\"预编译发生在什么时候？\"><a href=\"#预编译发生在什么时候？\" class=\"headerlink\" title=\"预编译发生在什么时候？\"></a>预编译发生在什么时候？</h3><p>脚本代码块script执行前（全局）或者函数执行前（函数体内）</p>\n<h3 id=\"预编译发生在哪些范围内？\"><a href=\"#预编译发生在哪些范围内？\" class=\"headerlink\" title=\"预编译发生在哪些范围内？\"></a>预编译发生在哪些范围内？</h3><p>全局范围和函数体内。</p>\n<ul>\n<li><strong>全局</strong>：全局的变量声明和函数声明则会存放在全局对象内（Global Object 简称GO，它是window的一部分，你可以直接把他理解成window对象）中</li>\n<li><strong>函数体内</strong><br>预编译会提前把函数里的变量声明和函数声明依据规则存放在该活动对象内（Activation Object，简称AO），</li>\n</ul>\n<p>预编译简单理解就是在内存中开辟一些空间，存放一些变量与函数 。</p>\n<p>预编译大致可分为4步：</p>\n<ol>\n<li>创建AO/GO对象</li>\n<li>找形参和变量声明，将形参和变量名作为AO/GO属性名，值为undefined</li>\n<li>将实参值和形参统一</li>\n<li>在函数体里面找函数声明，值赋予函数体。</li>\n</ol>\n<h3 id=\"预编译小结\"><a href=\"#预编译小结\" class=\"headerlink\" title=\"预编译小结\"></a>预编译小结</h3><p><strong>函数声明整体提升</strong> </p>\n<ol>\n<li>创建AO对象（Active Object）</li>\n<li>查找函数形参及函数内变量声明，形参名及变量名作为AO对象的属性，值为undefined</li>\n<li>实参形参相统一，实参值赋给形参</li>\n<li>查找函数声明，函数名作为AO对象的属性，值为函数引用</li>\n</ol>\n<p><strong>变量声明提升</strong> </p>\n<ol>\n<li>查找全局变量声明（包括隐式全局变量声明，省略var声明），变量名作全局对象的属性，值为undefined</li>\n<li>查找函数声明，函数名作为全局对象的属性，值为函数引用<br>(具体点说，无论变量调用和声明的位置是前是后，系统总会把声明移到调用前，注意仅仅只是声明，所以值是undefined），只有在解释执行阶段才会进行变量初始化，匿名函数不参与预编译。<br>预编译前奏</li>\n</ol>\n<blockquote>\n<p>imply global 即任何变量，如果未经声明就赋值，则此变量就为全局变量所有(全局域就是window) 。一切声明的全局变量，全是window的属性。</p>\n</blockquote>\n<blockquote>\n<p>JavaScript中函数定义主要有两种：声明式与函数表达式。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//声明式函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//函数表达式</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> test = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"代码实例\"><a href=\"#代码实例\" class=\"headerlink\" title=\"代码实例\"></a>代码实例</h3><p>1.变量声明提升</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert(a);</span><br><span class=\"line\">alert(<span class=\"string\">'ok'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"comment\">/*弹出undefined和ok。因为执行时先解释：定义var变量，并未初始化赋值，当前值为undefined。*/</span></span><br></pre></td></tr></table></figure>\n\n<p>2.未定义声明即为全局变量</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert(a);</span><br><span class=\"line\">alert(<span class=\"string\">'ok'</span>);</span><br><span class=\"line\">a = <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n<p>会发现报错了，因为a未定义，解释时定义var变量，并不会定义此处的a。</p>\n<p><strong>到这里我们又发现了一个值得关注的问题–定义变量的方式。</strong></p>\n<blockquote>\n<p>JavaScript变量分两种：全局变量和局部变量。像a = 1;这种定义默认是创建全局变量，其实就相当于window.a = 1;而var a = 1;这种格式是定义一个当前作用域下的变量。解释时只会定义var格式的变量。</p>\n</blockquote>\n<p>3.下面代码做了什么？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;<span class=\"comment\">// 变量声明</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\">y</span>)</span>&#123;<span class=\"comment\">//函数声明</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'so easy'</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> c = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"comment\">//是变量声明而不是函数声明！！</span></span><br><span class=\"line\">        <span class=\"comment\">//...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    b(<span class=\"number\">100</span>);</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">&lt;script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    var d = 0;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>页面产生便创建了GO全局对象（Global Object）（也就是大家熟悉的window对象）</li>\n<li>第一个脚本文件加载</li>\n<li>脚本加载完毕后，分析语法是否合法</li>\n<li>开始预编译<ul>\n<li>查找变量声明，作为GO属性，值赋予undefined</li>\n<li>查找函数声明，作为GO属性，值赋予函数体</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"3-解释执行\"><a href=\"#3-解释执行\" class=\"headerlink\" title=\"3. 解释执行\"></a>3. 解释执行</h2><p>预编译完毕之后，JavaScript 脚本开始执行，执行顺序按照从上到下的顺序执行。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>总结<br>JavaScript执行顺序</p>\n<ol>\n<li>语法分析</li>\n<li>预编译</li>\n<li><ol>\n<li>创建AO(GO)对象</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>找形参和变量声明，将形参和变量名作为AO(GO)属性名，值为undefined</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>将实参值和形参统一</li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li>在函数体里面找函数声明，值赋予函数体。</li>\n</ol>\n</li>\n<li>解释执行</li>\n</ol>\n","site":{"data":{"projects":[{"name":"NJUPT_Esport","url":"https://github.com/Davont/NJUPT_Esport","desc":"一个为在校学生提供体育相关成绩查询、校新闻推送、学生反馈评论的web app"},{"name":"Furniture_Management_System","url":"https://github.com/Davont/Furniture_Management_System","desc":"一个提供家具购买、下单、用户管理、订单管理、商户管理等功能的家具订单CMS系统"},{"name":"weapp-WQPS","url":"https://github.com/Davont/weapp-WQPS","desc":"一个展示型的微信小程序，旨在提供基于卫星传感网的水质监测系统的对外展示平台。"},{"name":"yiban_registration","url":"https://github.com/Davont/yiban_registration","desc":"一个面向社团提供新生加入社团的线上报名表"}]}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>JavaScript是一个单线程、解释型语言。</p>\n<p>单线程的意思很简单，就是同一个时间只能做一件事。</p>\n<p>编译型语言和解释型语言区别:</p>\n<ul>\n<li>编译型语言：C、C++、java此类编译型语言，运行过程：给人看的代码文件-&gt;机器能运行的代码文件-&gt;运行结果,下次执行不需要再重复此过程,这个过程叫做编译。</li>\n<li>解释型语言：JavaScript、Python此类解释型语言，自上而下，解释一行，执行一行；不会通篇编译为一个文件再执行。</li>\n</ul>\n<blockquote>\n<p>解释型语言：程序不需要编译，程序在运行时才<strong>翻译</strong>成机器语言，每执行一次都要翻译一次。</p>\n</blockquote>\n<blockquote>\n<p>编译型语言：程序在执行之前需要一个专门的<strong>编译</strong>过程，把程序编译成 为机器语言的文件，运行时不需要重新翻译，直接使用编译的结果。</p>\n</blockquote>\n<h1 id=\"JavaScript执行过程\"><a href=\"#JavaScript执行过程\" class=\"headerlink\" title=\"JavaScript执行过程\"></a>JavaScript执行过程</h1><ol>\n<li>语法分析</li>\n<li>预编译</li>\n<li>解释执行</li>\n</ol>\n<p>JavaScript按照代码块来进行解释和执行，代码块间相互独立，但变量和方法共享。</p>\n<p><em>JavaScript中的代码块是指由<code>&lt;script&gt;&lt;/script&gt;</code>标签分割的代码段。</em></p>\n<h2 id=\"1-语法分析\"><a href=\"#1-语法分析\" class=\"headerlink\" title=\"1. 语法分析\"></a>1. 语法分析</h2><p>顾名思义 就是检查一遍js代码内有没有出现语法错误（比如少些个分号，多写个括号等）；语法分析期间不会执行代码。</p>\n<h2 id=\"2-预编译\"><a href=\"#2-预编译\" class=\"headerlink\" title=\"2. 预编译\"></a>2. 预编译</h2><p>在此之前，有些人可能会有疑问：js不是说好了是解释型语言吗？怎么还有预编译，它到底能编译吗？事实上，JavaScript确实是一门解释型语言，但它有编译特性（取决于引擎）。<br>可以参考下面两篇文章</p>\n<blockquote>\n<p><a href=\"https://www.cnblogs.com/allen2333/p/9148230.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/allen2333/p/9148230.html</a><br><a href=\"https://baijiahao.baidu.com/s?id=1591528352410621144&amp;wfr=spider&amp;for=pc\" target=\"_blank\" rel=\"noopener\">https://baijiahao.baidu.com/s?id=1591528352410621144&amp;wfr=spider&amp;for=pc</a></p>\n</blockquote>\n<h3 id=\"预编译发生在什么时候？\"><a href=\"#预编译发生在什么时候？\" class=\"headerlink\" title=\"预编译发生在什么时候？\"></a>预编译发生在什么时候？</h3><p>脚本代码块script执行前（全局）或者函数执行前（函数体内）</p>\n<h3 id=\"预编译发生在哪些范围内？\"><a href=\"#预编译发生在哪些范围内？\" class=\"headerlink\" title=\"预编译发生在哪些范围内？\"></a>预编译发生在哪些范围内？</h3><p>全局范围和函数体内。</p>\n<ul>\n<li><strong>全局</strong>：全局的变量声明和函数声明则会存放在全局对象内（Global Object 简称GO，它是window的一部分，你可以直接把他理解成window对象）中</li>\n<li><strong>函数体内</strong><br>预编译会提前把函数里的变量声明和函数声明依据规则存放在该活动对象内（Activation Object，简称AO），</li>\n</ul>\n<p>预编译简单理解就是在内存中开辟一些空间，存放一些变量与函数 。</p>\n<p>预编译大致可分为4步：</p>\n<ol>\n<li>创建AO/GO对象</li>\n<li>找形参和变量声明，将形参和变量名作为AO/GO属性名，值为undefined</li>\n<li>将实参值和形参统一</li>\n<li>在函数体里面找函数声明，值赋予函数体。</li>\n</ol>\n<h3 id=\"预编译小结\"><a href=\"#预编译小结\" class=\"headerlink\" title=\"预编译小结\"></a>预编译小结</h3><p><strong>函数声明整体提升</strong> </p>\n<ol>\n<li>创建AO对象（Active Object）</li>\n<li>查找函数形参及函数内变量声明，形参名及变量名作为AO对象的属性，值为undefined</li>\n<li>实参形参相统一，实参值赋给形参</li>\n<li>查找函数声明，函数名作为AO对象的属性，值为函数引用</li>\n</ol>\n<p><strong>变量声明提升</strong> </p>\n<ol>\n<li>查找全局变量声明（包括隐式全局变量声明，省略var声明），变量名作全局对象的属性，值为undefined</li>\n<li>查找函数声明，函数名作为全局对象的属性，值为函数引用<br>(具体点说，无论变量调用和声明的位置是前是后，系统总会把声明移到调用前，注意仅仅只是声明，所以值是undefined），只有在解释执行阶段才会进行变量初始化，匿名函数不参与预编译。<br>预编译前奏</li>\n</ol>\n<blockquote>\n<p>imply global 即任何变量，如果未经声明就赋值，则此变量就为全局变量所有(全局域就是window) 。一切声明的全局变量，全是window的属性。</p>\n</blockquote>\n<blockquote>\n<p>JavaScript中函数定义主要有两种：声明式与函数表达式。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//声明式函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//函数表达式</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> test = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"代码实例\"><a href=\"#代码实例\" class=\"headerlink\" title=\"代码实例\"></a>代码实例</h3><p>1.变量声明提升</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert(a);</span><br><span class=\"line\">alert(<span class=\"string\">'ok'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"comment\">/*弹出undefined和ok。因为执行时先解释：定义var变量，并未初始化赋值，当前值为undefined。*/</span></span><br></pre></td></tr></table></figure>\n\n<p>2.未定义声明即为全局变量</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert(a);</span><br><span class=\"line\">alert(<span class=\"string\">'ok'</span>);</span><br><span class=\"line\">a = <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n<p>会发现报错了，因为a未定义，解释时定义var变量，并不会定义此处的a。</p>\n<p><strong>到这里我们又发现了一个值得关注的问题–定义变量的方式。</strong></p>\n<blockquote>\n<p>JavaScript变量分两种：全局变量和局部变量。像a = 1;这种定义默认是创建全局变量，其实就相当于window.a = 1;而var a = 1;这种格式是定义一个当前作用域下的变量。解释时只会定义var格式的变量。</p>\n</blockquote>\n<p>3.下面代码做了什么？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;<span class=\"comment\">// 变量声明</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\">y</span>)</span>&#123;<span class=\"comment\">//函数声明</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'so easy'</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> c = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"comment\">//是变量声明而不是函数声明！！</span></span><br><span class=\"line\">        <span class=\"comment\">//...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    b(<span class=\"number\">100</span>);</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">&lt;script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    var d = 0;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>页面产生便创建了GO全局对象（Global Object）（也就是大家熟悉的window对象）</li>\n<li>第一个脚本文件加载</li>\n<li>脚本加载完毕后，分析语法是否合法</li>\n<li>开始预编译<ul>\n<li>查找变量声明，作为GO属性，值赋予undefined</li>\n<li>查找函数声明，作为GO属性，值赋予函数体</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"3-解释执行\"><a href=\"#3-解释执行\" class=\"headerlink\" title=\"3. 解释执行\"></a>3. 解释执行</h2><p>预编译完毕之后，JavaScript 脚本开始执行，执行顺序按照从上到下的顺序执行。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>总结<br>JavaScript执行顺序</p>\n<ol>\n<li>语法分析</li>\n<li>预编译</li>\n<li><ol>\n<li>创建AO(GO)对象</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>找形参和变量声明，将形参和变量名作为AO(GO)属性名，值为undefined</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>将实参值和形参统一</li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li>在函数体里面找函数声明，值赋予函数体。</li>\n</ol>\n</li>\n<li>解释执行</li>\n</ol>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ckrr9sohz00001l5x58j90lr4","tag_id":"ckrr9soii00031l5xevfg17vy","_id":"ckrr9soj1000c1l5x4fhgaufa"},{"post_id":"ckrr9sohz00001l5x58j90lr4","tag_id":"ckrr9sois00071l5xchix1fcj","_id":"ckrr9soj4000e1l5xbha1bgys"},{"post_id":"ckrr9soie00021l5xb39qgbey","tag_id":"ckrr9soiy000a1l5xgd0h74yt","_id":"ckrr9soj9000h1l5xbvrf64w3"},{"post_id":"ckrr9soil00041l5xftjmgr4u","tag_id":"ckrr9soj4000f1l5x2ls31hh0","_id":"ckrr9sojh000l1l5x83r2e4rx"},{"post_id":"ckrr9sojd000k1l5x9nno3vdi","tag_id":"ckrr9soj4000f1l5x2ls31hh0","_id":"ckrr9sojk000n1l5x280g528s"},{"post_id":"ckrr9soio00051l5x4aewetyi","tag_id":"ckrr9sois00071l5xchix1fcj","_id":"ckrr9sojo000q1l5xaqh73h75"},{"post_id":"ckrr9soir00061l5xf6qseaek","tag_id":"ckrr9soiy000a1l5xgd0h74yt","_id":"ckrr9sojt000u1l5xdpas91h6"},{"post_id":"ckrr9sojw000w1l5xdt1cam0m","tag_id":"ckrr9soiy000a1l5xgd0h74yt","_id":"ckrr9sok1000z1l5xb38qbdhq"},{"post_id":"ckrr9sojz000y1l5x9lq7a5vw","tag_id":"ckrr9soj4000f1l5x2ls31hh0","_id":"ckrr9sok300121l5x2kt3flze"},{"post_id":"ckrr9soit00081l5x0en721d0","tag_id":"ckrr9sojq000s1l5xaui9a779","_id":"ckrr9sok400131l5xb1cqh152"},{"post_id":"ckrr9soit00081l5x0en721d0","tag_id":"ckrr9sojy000x1l5x7cygax2w","_id":"ckrr9sok500151l5x9s8i2x4l"},{"post_id":"ckrr9sok100101l5xfpa4ao8m","tag_id":"ckrr9sojq000s1l5xaui9a779","_id":"ckrr9sok500161l5x9r2o2wyc"},{"post_id":"ckrr9soiw00091l5xcf0s61yw","tag_id":"ckrr9sok200111l5x016mgp8r","_id":"ckrr9sok600171l5x5z1bai6f"},{"post_id":"ckrr9soiw00091l5xcf0s61yw","tag_id":"ckrr9sois00071l5xchix1fcj","_id":"ckrr9sok600191l5xg6cvc13b"},{"post_id":"ckrr9soiz000b1l5xhjdmbs1f","tag_id":"ckrr9sok400141l5x9vlxe1ye","_id":"ckrr9sok7001a1l5xbmpj5dx9"},{"post_id":"ckrr9soj2000d1l5x0cepasiu","tag_id":"ckrr9sok600181l5x33b3fcx9","_id":"ckrr9sok7001c1l5xbmlidx88"},{"post_id":"ckrr9soj5000g1l5xg7pme6ie","tag_id":"ckrr9sok7001b1l5xdtvn5t98","_id":"ckrr9sok8001e1l5xh1y0cdna"},{"post_id":"ckrr9soja000i1l5xasaq42j1","tag_id":"ckrr9soj4000f1l5x2ls31hh0","_id":"ckrr9sokc001g1l5xfnmt5kfs"},{"post_id":"ckrr9soja000i1l5xasaq42j1","tag_id":"ckrr9sok8001d1l5xhwv3353b","_id":"ckrr9sokc001h1l5xazjq2gh3"},{"post_id":"ckrr9sojh000m1l5xa4e558kl","tag_id":"ckrr9sojq000s1l5xaui9a779","_id":"ckrr9sokf001k1l5x03o8d3r4"},{"post_id":"ckrr9sojh000m1l5xa4e558kl","tag_id":"ckrr9sokc001i1l5x8s304d4g","_id":"ckrr9sokf001l1l5xb2xff5wd"},{"post_id":"ckrr9sojl000p1l5x5xpp9was","tag_id":"ckrr9soke001j1l5xaulieiv3","_id":"ckrr9soki001o1l5xhzgwavms"},{"post_id":"ckrr9sojl000p1l5x5xpp9was","tag_id":"ckrr9sojq000s1l5xaui9a779","_id":"ckrr9soki001p1l5xeo3c7a45"},{"post_id":"ckrr9sojo000r1l5x3wi20dzm","tag_id":"ckrr9sokh001n1l5x6xa13f2p","_id":"ckrr9sokk001r1l5xh6ch5q2h"},{"post_id":"ckrr9sojr000t1l5x3fb533y6","tag_id":"ckrr9sokj001q1l5xcin7fphj","_id":"ckrr9sokt001u1l5xaoo15znc"},{"post_id":"ckrr9sojr000t1l5x3fb533y6","tag_id":"ckrr9sokm001s1l5x547p8mfg","_id":"ckrr9sokt001v1l5xhew05ob7"},{"post_id":"ckrr9soju000v1l5x9i34e1m0","tag_id":"ckrr9soii00031l5xevfg17vy","_id":"ckrr9sokw001x1l5xcfiy3mhz"},{"post_id":"ckrr9soju000v1l5x9i34e1m0","tag_id":"ckrr9soks001t1l5x003mcf8t","_id":"ckrr9sokw001y1l5xb1f74aia"},{"post_id":"ckrr9soju000v1l5x9i34e1m0","tag_id":"ckrr9soku001w1l5x895m6u8a","_id":"ckrr9sokx001z1l5xcg7w7t6p"},{"post_id":"ckrr9soju000v1l5x9i34e1m0","tag_id":"ckrr9sois00071l5xchix1fcj","_id":"ckrr9sokx00201l5x3a5q7il5"}],"Tag":[{"name":"Nginx","_id":"ckrr9soii00031l5xevfg17vy"},{"name":"linux","_id":"ckrr9sois00071l5xchix1fcj"},{"name":"博客搭建","_id":"ckrr9soiy000a1l5xgd0h74yt"},{"name":"随笔","_id":"ckrr9soj4000f1l5x2ls31hh0"},{"name":"js","_id":"ckrr9sojq000s1l5xaui9a779"},{"name":"es6","_id":"ckrr9sojy000x1l5x7cygax2w"},{"name":"git","_id":"ckrr9sok200111l5x016mgp8r"},{"name":"科技","_id":"ckrr9sok400141l5x9vlxe1ye"},{"name":"hexo","_id":"ckrr9sok600181l5x33b3fcx9"},{"name":"debug","_id":"ckrr9sok7001b1l5xdtvn5t98"},{"name":"电影","_id":"ckrr9sok8001d1l5xhwv3353b"},{"name":"算法","_id":"ckrr9sokc001i1l5x8s304d4g"},{"name":"React","_id":"ckrr9soke001j1l5xaulieiv3"},{"name":"markdown","_id":"ckrr9sokh001n1l5x6xa13f2p"},{"name":"npm","_id":"ckrr9sokj001q1l5xcin7fphj"},{"name":"node.js","_id":"ckrr9sokm001s1l5x547p8mfg"},{"name":"ssl","_id":"ckrr9soks001t1l5x003mcf8t"},{"name":"https","_id":"ckrr9soku001w1l5x895m6u8a"}]}}